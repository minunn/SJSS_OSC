/* tslint:disable */
/* eslint-disable */
/**
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.16.5
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import axiosCookieJarSupport from "axios-cookiejar-support";axiosCookieJarSupport(globalAxios);import { CookieJar } from "tough-cookie";globalAxios.defaults.jar = new CookieJar();globalAxios.defaults.withCredentials = true;

/**
 * 
 * @export
 * @interface APIConfig
 */
export interface APIConfig {
    /**
     * Unknown, probably voice optimization testing
     * @type {boolean}
     * @memberof APIConfig
     */
    'VoiceEnableDegradation': boolean;
    /**
     * Unknown, probably voice optimization testing
     * @type {boolean}
     * @memberof APIConfig
     */
    'VoiceEnableReceiverLimiting': boolean;
    /**
     * VRChat\'s office address
     * @type {string}
     * @memberof APIConfig
     */
    'address': string;
    /**
     * Public Announcements
     * @type {Set<APIConfigAnnouncement>}
     * @memberof APIConfig
     */
    'announcements': Set<APIConfigAnnouncement>;
    /**
     * Game name
     * @type {string}
     * @memberof APIConfig
     * @deprecated
     */
    'appName': string;
    /**
     * Build tag of the API server
     * @type {string}
     * @memberof APIConfig
     */
    'buildVersionTag': string;
    /**
     * apiKey to be used for all other requests
     * @type {string}
     * @memberof APIConfig
     */
    'clientApiKey': string;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'clientBPSCeiling': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'clientDisconnectTimeout': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'clientReservedPlayerBPS': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'clientSentCountAllowance': number;
    /**
     * VRChat\'s contact email
     * @type {string}
     * @memberof APIConfig
     */
    'contactEmail': string;
    /**
     * VRChat\'s copyright-issues-related email
     * @type {string}
     * @memberof APIConfig
     */
    'copyrightEmail': string;
    /**
     * Current version number of the Terms of Service
     * @type {number}
     * @memberof APIConfig
     */
    'currentTOSVersion': number;
    /**
     * 
     * @type {string}
     * @memberof APIConfig
     */
    'defaultAvatar': string;
    /**
     * 
     * @type {DeploymentGroup}
     * @memberof APIConfig
     */
    'deploymentGroup': DeploymentGroup;
    /**
     * Version number for game development build
     * @type {string}
     * @memberof APIConfig
     * @deprecated
     */
    'devAppVersionStandalone': string;
    /**
     * Developer Download link
     * @type {string}
     * @memberof APIConfig
     * @deprecated
     */
    'devDownloadLinkWindows': string;
    /**
     * Link to download the development SDK, use downloadUrls instead
     * @type {string}
     * @memberof APIConfig
     * @deprecated
     */
    'devSdkUrl': string;
    /**
     * Version of the development SDK
     * @type {string}
     * @memberof APIConfig
     * @deprecated
     */
    'devSdkVersion': string;
    /**
     * Version number for server development build
     * @type {string}
     * @memberof APIConfig
     * @deprecated
     */
    'devServerVersionStandalone': string;
    /**
     * Unknown, \"dis\" maybe for disconnect?
     * @type {string}
     * @memberof APIConfig
     */
    'dis-countdown': string;
    /**
     * Toggles if copying avatars should be disabled
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableAvatarCopying': boolean;
    /**
     * Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the `system_avatar_access` Tag or `admin_avatar_access` Tag
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableAvatarGating': boolean;
    /**
     * Toggles if the Community Labs should be disabled
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableCommunityLabs': boolean;
    /**
     * Toggles if promotion out of Community Labs should be disabled
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableCommunityLabsPromotion': boolean;
    /**
     * Unknown
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableEmail': boolean;
    /**
     * Toggles if Analytics should be disabled.
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableEventStream': boolean;
    /**
     * Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the `system_feedback_access` Tag.
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableFeedbackGating': boolean;
    /**
     * Unknown, probably toggles compilation of frontend web builds? So internal flag?
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableFrontendBuilds': boolean;
    /**
     * Unknown
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableHello': boolean;
    /**
     * Toggles if signing up for Subscriptions in Oculus is disabled or not.
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableOculusSubs': boolean;
    /**
     * Toggles if new user account registration should be disabled.
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableRegistration': boolean;
    /**
     * Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead.
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableSteamNetworking': boolean;
    /**
     * Toggles if 2FA should be disabled.
     * @type {boolean}
     * @memberof APIConfig
     * @deprecated
     */
    'disableTwoFactorAuth': boolean;
    /**
     * Toggles if Udon should be universally disabled in-game.
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableUdon': boolean;
    /**
     * Toggles if account upgrading \"linking with Steam/Oculus\" should be disabled.
     * @type {boolean}
     * @memberof APIConfig
     */
    'disableUpgradeAccount': boolean;
    /**
     * Download link for game on the Oculus Rift website.
     * @type {string}
     * @memberof APIConfig
     */
    'downloadLinkWindows': string;
    /**
     * 
     * @type {APIConfigDownloadURLList}
     * @memberof APIConfig
     */
    'downloadUrls': APIConfigDownloadURLList;
    /**
     * Array of DynamicWorldRow objects, used by the game to display the list of world rows
     * @type {Set<DynamicContentRow>}
     * @memberof APIConfig
     */
    'dynamicWorldRows': Set<DynamicContentRow>;
    /**
     * 
     * @type {APIConfigEvents}
     * @memberof APIConfig
     */
    'events': APIConfigEvents;
    /**
     * Unknown
     * @type {string}
     * @memberof APIConfig
     * @deprecated
     */
    'gearDemoRoomId': string;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof APIConfig
     */
    'homeWorldId': string;
    /**
     * Redirect target if you try to open the base API domain in your browser
     * @type {string}
     * @memberof APIConfig
     */
    'homepageRedirectTarget': string;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof APIConfig
     */
    'hubWorldId': string;
    /**
     * VRChat\'s job application email
     * @type {string}
     * @memberof APIConfig
     */
    'jobsEmail': string;
    /**
     * MOTD
     * @type {string}
     * @memberof APIConfig
     * @deprecated
     */
    'messageOfTheDay': string;
    /**
     * VRChat\'s moderation related email
     * @type {string}
     * @memberof APIConfig
     */
    'moderationEmail': string;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'moderationQueryPeriod': number;
    /**
     * Used in-game to notify a user they aren\'t allowed to select avatars in private worlds
     * @type {string}
     * @memberof APIConfig
     */
    'notAllowedToSelectAvatarInPrivateWorldMessage': string;
    /**
     * Extra [plugin](https://doc.photonengine.com/en-us/server/current/plugins/manual) to run in each instance
     * @type {string}
     * @memberof APIConfig
     */
    'plugin': string;
    /**
     * Version number for game release build
     * @type {string}
     * @memberof APIConfig
     * @deprecated
     */
    'releaseAppVersionStandalone': string;
    /**
     * Link to download the release SDK
     * @type {string}
     * @memberof APIConfig
     * @deprecated
     */
    'releaseSdkUrl': string;
    /**
     * Version of the release SDK
     * @type {string}
     * @memberof APIConfig
     * @deprecated
     */
    'releaseSdkVersion': string;
    /**
     * Version number for server release build
     * @type {string}
     * @memberof APIConfig
     * @deprecated
     */
    'releaseServerVersionStandalone': string;
    /**
     * Link to the developer FAQ
     * @type {string}
     * @memberof APIConfig
     */
    'sdkDeveloperFaqUrl': string;
    /**
     * Link to the official VRChat Discord
     * @type {string}
     * @memberof APIConfig
     */
    'sdkDiscordUrl': string;
    /**
     * Used in the SDK to notify a user they aren\'t allowed to upload avatars/worlds yet
     * @type {string}
     * @memberof APIConfig
     */
    'sdkNotAllowedToPublishMessage': string;
    /**
     * Unity version supported by the SDK
     * @type {string}
     * @memberof APIConfig
     */
    'sdkUnityVersion': string;
    /**
     * Server name of the API server currently responding
     * @type {string}
     * @memberof APIConfig
     */
    'serverName': string;
    /**
     * VRChat\'s support email
     * @type {string}
     * @memberof APIConfig
     */
    'supportEmail': string;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof APIConfig
     */
    'timeOutWorldId': string;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof APIConfig
     */
    'tutorialWorldId': string;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'updateRateMsMaximum': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'updateRateMsMinimum': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'updateRateMsNormal': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'updateRateMsUdonManual': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'uploadAnalysisPercent': number;
    /**
     * List of allowed URLs that bypass the \"Allow untrusted URL\'s\" setting in-game
     * @type {Array<string>}
     * @memberof APIConfig
     */
    'urlList': Array<string>;
    /**
     * Unknown
     * @type {boolean}
     * @memberof APIConfig
     */
    'useReliableUdpForVoice': boolean;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'userUpdatePeriod': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'userVerificationDelay': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'userVerificationRetry': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'userVerificationTimeout': number;
    /**
     * Download link for game on the Steam website.
     * @type {string}
     * @memberof APIConfig
     */
    'viveWindowsUrl': string;
    /**
     * List of allowed URLs that are allowed to host avatar assets
     * @type {Array<string>}
     * @memberof APIConfig
     */
    'whiteListedAssetUrls': Array<string>;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfig
     */
    'worldUpdatePeriod': number;
    /**
     * Currently used youtube-dl.exe hash in SHA-256-delimited format
     * @type {string}
     * @memberof APIConfig
     */
    'player-url-resolver-hash': string;
    /**
     * Currently used youtube-dl.exe version
     * @type {string}
     * @memberof APIConfig
     */
    'player-url-resolver-version': string;
}
/**
 * Public Announcement
 * @export
 * @interface APIConfigAnnouncement
 */
export interface APIConfigAnnouncement {
    /**
     * Announcement name
     * @type {string}
     * @memberof APIConfigAnnouncement
     */
    'name': string;
    /**
     * Announcement text
     * @type {string}
     * @memberof APIConfigAnnouncement
     */
    'text': string;
}
/**
 * Download links for various development assets.
 * @export
 * @interface APIConfigDownloadURLList
 */
export interface APIConfigDownloadURLList {
    /**
     * Download link for legacy SDK2
     * @type {string}
     * @memberof APIConfigDownloadURLList
     * @deprecated
     */
    'sdk2': string;
    /**
     * Download link for SDK3 for Avatars
     * @type {string}
     * @memberof APIConfigDownloadURLList
     */
    'sdk3-avatars': string;
    /**
     * Download link for SDK3 for Worlds
     * @type {string}
     * @memberof APIConfigDownloadURLList
     */
    'sdk3-worlds': string;
    /**
     * Download link for the Creator Companion
     * @type {string}
     * @memberof APIConfigDownloadURLList
     */
    'vcc': string;
    /**
     * Download link for ???
     * @type {string}
     * @memberof APIConfigDownloadURLList
     */
    'bootstrap': string;
}
/**
 * 
 * @export
 * @interface APIConfigEvents
 */
export interface APIConfigEvents {
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfigEvents
     */
    'distanceClose': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfigEvents
     */
    'distanceFactor': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfigEvents
     */
    'distanceFar': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfigEvents
     */
    'groupDistance': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfigEvents
     */
    'maximumBunchSize': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfigEvents
     */
    'notVisibleFactor': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfigEvents
     */
    'playerOrderBucketSize': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfigEvents
     */
    'playerOrderFactor': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfigEvents
     */
    'slowUpdateFactorThreshold': number;
    /**
     * Unknown
     * @type {number}
     * @memberof APIConfigEvents
     */
    'viewSegmentLength': number;
}
/**
 * 
 * @export
 * @interface APIHealth
 */
export interface APIHealth {
    /**
     * 
     * @type {boolean}
     * @memberof APIHealth
     */
    'ok': boolean;
    /**
     * 
     * @type {string}
     * @memberof APIHealth
     */
    'serverName': string;
    /**
     * 
     * @type {string}
     * @memberof APIHealth
     */
    'buildVersionTag': string;
}
/**
 * 
 * @export
 * @interface AccountDeletionLog
 */
export interface AccountDeletionLog {
    /**
     * Typically \"Deletion requested\" or \"Deletion canceled\". Other messages like \"Deletion completed\" may exist, but are these are not possible to see as a regular user.
     * @type {string}
     * @memberof AccountDeletionLog
     */
    'message'?: string;
    /**
     * When the deletion is scheduled to happen, standard is 14 days after the request.
     * @type {string}
     * @memberof AccountDeletionLog
     */
    'deletionScheduled'?: string | null;
    /**
     * Date and time of the deletion request.
     * @type {string}
     * @memberof AccountDeletionLog
     */
    'dateTime'?: string;
}
/**
 * 
 * @export
 * @interface AddFavoriteRequest
 */
export interface AddFavoriteRequest {
    /**
     * 
     * @type {FavoriteType}
     * @memberof AddFavoriteRequest
     */
    'type': FavoriteType;
    /**
     * Must be either AvatarID, WorldID or UserID.
     * @type {string}
     * @memberof AddFavoriteRequest
     */
    'favoriteId': string;
    /**
     * Tags indicate which group this favorite belongs to. Adding multiple groups makes it show up in all. Removing it from one in that case removes it from all.
     * @type {Array<string>}
     * @memberof AddFavoriteRequest
     */
    'tags': Array<string>;
}
/**
 * 
 * @export
 * @interface AddGroupGalleryImageRequest
 */
export interface AddGroupGalleryImageRequest {
    /**
     * 
     * @type {string}
     * @memberof AddGroupGalleryImageRequest
     */
    'fileId': string;
}
/**
 * 
 * @export
 * @interface Avatar
 */
export interface Avatar {
    /**
     * Not present from general serach `/avatars`, only on specific requests `/avatars/{avatarId}`.
     * @type {string}
     * @memberof Avatar
     */
    'assetUrl'?: string;
    /**
     * Not present from general serach `/avatars`, only on specific requests `/avatars/{avatarId}`. **Deprecation:** `Object` has unknown usage/fields, and is always empty. Use normal `Url` field instead.
     * @type {object}
     * @memberof Avatar
     */
    'assetUrlObject'?: object;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof Avatar
     */
    'authorId': string;
    /**
     * 
     * @type {string}
     * @memberof Avatar
     */
    'authorName': string;
    /**
     * 
     * @type {string}
     * @memberof Avatar
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Avatar
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof Avatar
     */
    'featured': boolean;
    /**
     * 
     * @type {string}
     * @memberof Avatar
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Avatar
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Avatar
     */
    'name': string;
    /**
     * 
     * @type {ReleaseStatus}
     * @memberof Avatar
     */
    'releaseStatus': ReleaseStatus;
    /**
     *  
     * @type {Array<string>}
     * @memberof Avatar
     */
    'tags': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Avatar
     */
    'thumbnailImageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Avatar
     */
    'unityPackageUrl': string;
    /**
     * 
     * @type {AvatarUnityPackageUrlObject}
     * @memberof Avatar
     * @deprecated
     */
    'unityPackageUrlObject': AvatarUnityPackageUrlObject;
    /**
     * 
     * @type {Set<UnityPackage>}
     * @memberof Avatar
     */
    'unityPackages': Set<UnityPackage>;
    /**
     * 
     * @type {string}
     * @memberof Avatar
     */
    'updated_at': string;
    /**
     * 
     * @type {number}
     * @memberof Avatar
     */
    'version': number;
}
/**
 * **Deprecation:** `Object` has unknown usage/fields, and is always empty. Use normal `Url` field instead.
 * @export
 * @interface AvatarUnityPackageUrlObject
 */
export interface AvatarUnityPackageUrlObject {
    /**
     * 
     * @type {string}
     * @memberof AvatarUnityPackageUrlObject
     */
    'unityPackageUrl'?: string;
}
/**
 * 
 * @export
 * @interface BanGroupMemberRequest
 */
export interface BanGroupMemberRequest {
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof BanGroupMemberRequest
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface CreateAvatarRequest
 */
export interface CreateAvatarRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateAvatarRequest
     */
    'assetUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAvatarRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAvatarRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAvatarRequest
     */
    'description'?: string;
    /**
     *  
     * @type {Array<string>}
     * @memberof CreateAvatarRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateAvatarRequest
     */
    'imageUrl': string;
    /**
     * 
     * @type {ReleaseStatus}
     * @memberof CreateAvatarRequest
     */
    'releaseStatus'?: ReleaseStatus;
    /**
     * 
     * @type {number}
     * @memberof CreateAvatarRequest
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateAvatarRequest
     */
    'unityPackageUrl'?: string;
}
/**
 * 
 * @export
 * @interface CreateFileRequest
 */
export interface CreateFileRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateFileRequest
     */
    'name': string;
    /**
     * 
     * @type {MIMEType}
     * @memberof CreateFileRequest
     */
    'mimeType': MIMEType;
    /**
     * 
     * @type {string}
     * @memberof CreateFileRequest
     */
    'extension': string;
    /**
     *  
     * @type {Array<string>}
     * @memberof CreateFileRequest
     */
    'tags'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateFileVersionRequest
 */
export interface CreateFileVersionRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateFileVersionRequest
     */
    'signatureMd5': string;
    /**
     * 
     * @type {number}
     * @memberof CreateFileVersionRequest
     */
    'signatureSizeInBytes': number;
    /**
     * 
     * @type {string}
     * @memberof CreateFileVersionRequest
     */
    'fileMd5'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateFileVersionRequest
     */
    'fileSizeInBytes'?: number;
}
/**
 * 
 * @export
 * @interface CreateGroupAnnouncementRequest
 */
export interface CreateGroupAnnouncementRequest {
    /**
     * Announcement title
     * @type {string}
     * @memberof CreateGroupAnnouncementRequest
     */
    'title': string;
    /**
     * Announcement text
     * @type {string}
     * @memberof CreateGroupAnnouncementRequest
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupAnnouncementRequest
     */
    'imageId'?: string;
    /**
     * Send notification to group members.
     * @type {boolean}
     * @memberof CreateGroupAnnouncementRequest
     */
    'sendNotification'?: boolean;
}
/**
 * 
 * @export
 * @interface CreateGroupGalleryRequest
 */
export interface CreateGroupGalleryRequest {
    /**
     * Name of the gallery.
     * @type {string}
     * @memberof CreateGroupGalleryRequest
     */
    'name': string;
    /**
     * Description of the gallery.
     * @type {string}
     * @memberof CreateGroupGalleryRequest
     */
    'description'?: string;
    /**
     * Whether the gallery is members only.
     * @type {boolean}
     * @memberof CreateGroupGalleryRequest
     */
    'membersOnly'?: boolean;
    /**
     *  
     * @type {Array<string>}
     * @memberof CreateGroupGalleryRequest
     */
    'roleIdsToView'?: Array<string> | null;
    /**
     *  
     * @type {Array<string>}
     * @memberof CreateGroupGalleryRequest
     */
    'roleIdsToSubmit'?: Array<string> | null;
    /**
     *  
     * @type {Array<string>}
     * @memberof CreateGroupGalleryRequest
     */
    'roleIdsToAutoApprove'?: Array<string> | null;
    /**
     *  
     * @type {Array<string>}
     * @memberof CreateGroupGalleryRequest
     */
    'roleIdsToManage'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface CreateGroupInviteRequest
 */
export interface CreateGroupInviteRequest {
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof CreateGroupInviteRequest
     */
    'userId': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateGroupInviteRequest
     */
    'confirmOverrideBlock'?: boolean;
}
/**
 * 
 * @export
 * @interface CreateGroupRequest
 */
export interface CreateGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    'shortCode': string;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    'description'?: string;
    /**
     * 
     * @type {GroupJoinState}
     * @memberof CreateGroupRequest
     */
    'joinState'?: GroupJoinState;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    'iconId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRequest
     */
    'bannerId'?: string | null;
    /**
     * 
     * @type {GroupPrivacy}
     * @memberof CreateGroupRequest
     */
    'privacy'?: GroupPrivacy;
    /**
     * 
     * @type {GroupRoleTemplate}
     * @memberof CreateGroupRequest
     */
    'roleTemplate': GroupRoleTemplate;
}
/**
 * 
 * @export
 * @interface CreateGroupRoleRequest
 */
export interface CreateGroupRoleRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRoleRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRoleRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupRoleRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateGroupRoleRequest
     */
    'isSelfAssignable'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateGroupRoleRequest
     */
    'permissions'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateWorldRequest
 */
export interface CreateWorldRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateWorldRequest
     */
    'assetUrl': string;
    /**
     * 
     * @type {number}
     * @memberof CreateWorldRequest
     */
    'assetVersion'?: number;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof CreateWorldRequest
     */
    'authorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorldRequest
     */
    'authorName'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateWorldRequest
     */
    'capacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateWorldRequest
     */
    'description'?: string;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof CreateWorldRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorldRequest
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorldRequest
     */
    'name': string;
    /**
     * This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.
     * @type {string}
     * @memberof CreateWorldRequest
     */
    'platform'?: string;
    /**
     * 
     * @type {ReleaseStatus}
     * @memberof CreateWorldRequest
     */
    'releaseStatus'?: ReleaseStatus;
    /**
     *  
     * @type {Array<string>}
     * @memberof CreateWorldRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateWorldRequest
     */
    'unityPackageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorldRequest
     */
    'unityVersion'?: string;
}
/**
 * 
 * @export
 * @interface CurrentUser
 */
export interface CurrentUser {
    /**
     * 
     * @type {number}
     * @memberof CurrentUser
     */
    'acceptedTOSVersion': number;
    /**
     * 
     * @type {number}
     * @memberof CurrentUser
     */
    'acceptedPrivacyVersion'?: number;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'accountDeletionDate'?: string | null;
    /**
     *  
     * @type {Array<AccountDeletionLog>}
     * @memberof CurrentUser
     */
    'accountDeletionLog'?: Array<AccountDeletionLog> | null;
    /**
     *  
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    'activeFriends'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    'allowAvatarCopying': boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'bio': string;
    /**
     *  
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    'bioLinks': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'currentAvatar': string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'currentAvatarAssetUrl': string;
    /**
     * When profilePicOverride is not empty, use it instead.
     * @type {string}
     * @memberof CurrentUser
     */
    'currentAvatarImageUrl': string;
    /**
     * When profilePicOverride is not empty, use it instead.
     * @type {string}
     * @memberof CurrentUser
     */
    'currentAvatarThumbnailImageUrl': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    'currentAvatarTags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'date_joined': string;
    /**
     * 
     * @type {DeveloperType}
     * @memberof CurrentUser
     */
    'developerType': DeveloperType;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'displayName': string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    'emailVerified': boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'fallbackAvatar'?: string;
    /**
     * Always empty array.
     * @type {Array<string>}
     * @memberof CurrentUser
     * @deprecated
     */
    'friendGroupNames': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'friendKey': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    'friends': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    'hasBirthday': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    'hideContentFilterSettings'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'userLanguage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'userLanguageCode'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    'hasEmail': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    'hasLoggedInFromClient': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    'hasPendingEmail': boolean;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof CurrentUser
     */
    'homeLocation': string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof CurrentUser
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    'isFriend': boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'last_activity'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'last_login': string;
    /**
     * This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.
     * @type {string}
     * @memberof CurrentUser
     */
    'last_platform': string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'obfuscatedEmail': string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'obfuscatedPendingEmail': string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'oculusId': string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'googleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'picoId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'viveId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    'offlineFriends'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    'onlineFriends'?: Array<string>;
    /**
     *  
     * @type {Array<PastDisplayName>}
     * @memberof CurrentUser
     */
    'pastDisplayNames': Array<PastDisplayName>;
    /**
     * 
     * @type {CurrentUserPresence}
     * @memberof CurrentUser
     */
    'presence'?: CurrentUserPresence;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'profilePicOverride': string;
    /**
     * 
     * @type {UserState}
     * @memberof CurrentUser
     */
    'state': UserState;
    /**
     * 
     * @type {UserStatus}
     * @memberof CurrentUser
     */
    'status': UserStatus;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'statusDescription': string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    'statusFirstTime': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    'statusHistory': Array<string>;
    /**
     * 
     * @type {object}
     * @memberof CurrentUser
     */
    'steamDetails': object;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'steamId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    'tags': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    'twoFactorAuthEnabled': boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'twoFactorAuthEnabledDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    'unsubscribe': boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'userIcon': string;
    /**
     * -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
     * @type {string}
     * @memberof CurrentUser
     * @deprecated
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface CurrentUserPresence
 */
export interface CurrentUserPresence {
    /**
     * 
     * @type {string}
     * @memberof CurrentUserPresence
     */
    'avatarThumbnail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserPresence
     */
    'displayName'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUserPresence
     */
    'groups'?: Array<string> | null;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof CurrentUserPresence
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserPresence
     */
    'instance'?: string | null;
    /**
     * either an InstanceType or an empty string
     * @type {string}
     * @memberof CurrentUserPresence
     */
    'instanceType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserPresence
     */
    'isRejoining'?: string | null;
    /**
     * either a Platform or an empty string
     * @type {string}
     * @memberof CurrentUserPresence
     */
    'platform'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserPresence
     */
    'profilePicOverride'?: string | null;
    /**
     * either a UserStatus or empty string
     * @type {string}
     * @memberof CurrentUserPresence
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserPresence
     */
    'travelingToInstance'?: string | null;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof CurrentUserPresence
     */
    'travelingToWorld'?: string;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof CurrentUserPresence
     */
    'world'?: string;
}
/**
 * Used to identify which API deployment cluster is currently responding.  `blue` and `green` are used by Production. `grape`and `cherry` are used during Development.  [Blue Green Deployment by Martin Fowler](https://martinfowler.com/bliki/BlueGreenDeployment.html)
 * @export
 * @enum {string}
 */

export const DeploymentGroup = {
    Blue: 'blue',
    Green: 'green',
    Grape: 'grape',
    Cherry: 'cherry'
} as const;

export type DeploymentGroup = typeof DeploymentGroup[keyof typeof DeploymentGroup];


/**
 * \"none\" User is a normal user \"trusted\" Unknown \"internal\" Is a VRChat Developer \"moderator\" Is a VRChat Moderator  Staff can hide their developerType at will.
 * @export
 * @enum {string}
 */

export const DeveloperType = {
    None: 'none',
    Trusted: 'trusted',
    Internal: 'internal',
    Moderator: 'moderator'
} as const;

export type DeveloperType = typeof DeveloperType[keyof typeof DeveloperType];


/**
 * 
 * @export
 * @interface DynamicContentRow
 */
export interface DynamicContentRow {
    /**
     * 
     * @type {number}
     * @memberof DynamicContentRow
     */
    'index'?: number;
    /**
     * 
     * @type {string}
     * @memberof DynamicContentRow
     */
    'name': string;
    /**
     * Usually \"ThisPlatformSupported\", but can also be other values such as \"all\" or platform specific identifiers.
     * @type {string}
     * @memberof DynamicContentRow
     */
    'platform': string;
    /**
     * 
     * @type {string}
     * @memberof DynamicContentRow
     */
    'sortHeading': string;
    /**
     * 
     * @type {string}
     * @memberof DynamicContentRow
     */
    'sortOrder': string;
    /**
     * 
     * @type {string}
     * @memberof DynamicContentRow
     */
    'sortOwnership': string;
    /**
     * Tag to filter content for this row.
     * @type {string}
     * @memberof DynamicContentRow
     */
    'tag'?: string;
    /**
     * Type is not present if it is a world.
     * @type {string}
     * @memberof DynamicContentRow
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface Favorite
 */
export interface Favorite {
    /**
     * MUST be either AvatarID, UserID or WorldID.
     * @type {string}
     * @memberof Favorite
     */
    'favoriteId': string;
    /**
     * 
     * @type {string}
     * @memberof Favorite
     */
    'id': string;
    /**
     *  
     * @type {Array<string>}
     * @memberof Favorite
     */
    'tags': Array<string>;
    /**
     * 
     * @type {FavoriteType}
     * @memberof Favorite
     */
    'type': FavoriteType;
}
/**
 * 
 * @export
 * @interface FavoriteGroup
 */
export interface FavoriteGroup {
    /**
     * 
     * @type {string}
     * @memberof FavoriteGroup
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof FavoriteGroup
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FavoriteGroup
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FavoriteGroup
     */
    'ownerDisplayName': string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof FavoriteGroup
     */
    'ownerId': string;
    /**
     *  
     * @type {Array<string>}
     * @memberof FavoriteGroup
     */
    'tags': Array<string>;
    /**
     * 
     * @type {FavoriteType}
     * @memberof FavoriteGroup
     */
    'type': FavoriteType;
    /**
     * 
     * @type {FavoriteGroupVisibility}
     * @memberof FavoriteGroup
     */
    'visibility': FavoriteGroupVisibility;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const FavoriteGroupVisibility = {
    Private: 'private',
    Friends: 'friends',
    Public: 'public'
} as const;

export type FavoriteGroupVisibility = typeof FavoriteGroupVisibility[keyof typeof FavoriteGroupVisibility];


/**
 * 
 * @export
 * @enum {string}
 */

export const FavoriteType = {
    World: 'world',
    Friend: 'friend',
    Avatar: 'avatar'
} as const;

export type FavoriteType = typeof FavoriteType[keyof typeof FavoriteType];


/**
 * 
 * @export
 * @interface FileData
 */
export interface FileData {
    /**
     * 
     * @type {string}
     * @memberof FileData
     */
    'category': FileDataCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof FileData
     */
    'fileName': string;
    /**
     * 
     * @type {string}
     * @memberof FileData
     */
    'md5': string;
    /**
     * 
     * @type {number}
     * @memberof FileData
     */
    'sizeInBytes': number;
    /**
     * 
     * @type {FileStatus}
     * @memberof FileData
     */
    'status': FileStatus;
    /**
     * 
     * @type {string}
     * @memberof FileData
     */
    'uploadId': string;
    /**
     * 
     * @type {string}
     * @memberof FileData
     */
    'url': string;
}

export const FileDataCategoryEnum = {
    Multipart: 'multipart',
    Queued: 'queued',
    Simple: 'simple'
} as const;

export type FileDataCategoryEnum = typeof FileDataCategoryEnum[keyof typeof FileDataCategoryEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const FileStatus = {
    Waiting: 'waiting',
    Complete: 'complete',
    None: 'none',
    Queued: 'queued'
} as const;

export type FileStatus = typeof FileStatus[keyof typeof FileStatus];


/**
 * 
 * @export
 * @interface FileUploadURL
 */
export interface FileUploadURL {
    /**
     * 
     * @type {string}
     * @memberof FileUploadURL
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface FileVersion
 */
export interface FileVersion {
    /**
     * 
     * @type {string}
     * @memberof FileVersion
     */
    'created_at': string;
    /**
     * Usually only present if `true`
     * @type {boolean}
     * @memberof FileVersion
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {FileData}
     * @memberof FileVersion
     */
    'delta'?: FileData;
    /**
     * 
     * @type {FileData}
     * @memberof FileVersion
     */
    'file'?: FileData;
    /**
     * 
     * @type {FileData}
     * @memberof FileVersion
     */
    'signature'?: FileData;
    /**
     * 
     * @type {FileStatus}
     * @memberof FileVersion
     */
    'status': FileStatus;
    /**
     * Incremental version counter, can only be increased.
     * @type {number}
     * @memberof FileVersion
     */
    'version': number;
}
/**
 * 
 * @export
 * @interface FileVersionUploadStatus
 */
export interface FileVersionUploadStatus {
    /**
     * 
     * @type {string}
     * @memberof FileVersionUploadStatus
     */
    'uploadId': string;
    /**
     * 
     * @type {string}
     * @memberof FileVersionUploadStatus
     */
    'fileName': string;
    /**
     * 
     * @type {number}
     * @memberof FileVersionUploadStatus
     */
    'nextPartNumber': number;
    /**
     * 
     * @type {number}
     * @memberof FileVersionUploadStatus
     */
    'maxParts': number;
    /**
     * 
     * @type {Array<object>}
     * @memberof FileVersionUploadStatus
     */
    'parts': Array<object>;
    /**
     * Unknown
     * @type {Array<object>}
     * @memberof FileVersionUploadStatus
     */
    'etags': Array<object>;
}
/**
 * 
 * @export
 * @interface FinishFileDataUploadRequest
 */
export interface FinishFileDataUploadRequest {
    /**
     * Array of ETags uploaded.
     * @type {Set<string>}
     * @memberof FinishFileDataUploadRequest
     */
    'etags'?: Set<string>;
    /**
     * Always a zero in string form, despite how many parts uploaded.
     * @type {string}
     * @memberof FinishFileDataUploadRequest
     * @deprecated
     */
    'nextPartNumber': string;
    /**
     * Always a zero in string form, despite how many parts uploaded.
     * @type {string}
     * @memberof FinishFileDataUploadRequest
     * @deprecated
     */
    'maxParts': string;
}
/**
 * 
 * @export
 * @interface FriendStatus
 */
export interface FriendStatus {
    /**
     * 
     * @type {boolean}
     * @memberof FriendStatus
     */
    'incomingRequest': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FriendStatus
     */
    'isFriend': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FriendStatus
     */
    'outgoingRequest': boolean;
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'shortCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'discriminator'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'iconUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'bannerUrl'?: string | null;
    /**
     * 
     * @type {GroupPrivacy}
     * @memberof Group
     */
    'privacy'?: GroupPrivacy;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof Group
     */
    'ownerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'rules'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Group
     */
    'links'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Group
     */
    'languages'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'iconId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'bannerId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    'memberCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'memberCountSyncedAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Group
     */
    'isVerified'?: boolean;
    /**
     * 
     * @type {GroupJoinState}
     * @memberof Group
     */
    'joinState'?: GroupJoinState;
    /**
     *  
     * @type {Array<string>}
     * @memberof Group
     */
    'tags'?: Array<string>;
    /**
     *  
     * @type {Array<GroupGallery>}
     * @memberof Group
     */
    'galleries'?: Array<GroupGallery>;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    'onlineMemberCount'?: number;
    /**
     * 
     * @type {GroupMemberStatus}
     * @memberof Group
     */
    'membershipStatus'?: GroupMemberStatus;
    /**
     * 
     * @type {GroupMyMember}
     * @memberof Group
     */
    'myMember'?: GroupMyMember;
    /**
     * Only returned if ?includeRoles=true is specified.
     * @type {Array<GroupRole>}
     * @memberof Group
     */
    'roles'?: Array<GroupRole> | null;
}
/**
 * 
 * @export
 * @interface GroupAnnouncement
 */
export interface GroupAnnouncement {
    /**
     * 
     * @type {string}
     * @memberof GroupAnnouncement
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupAnnouncement
     */
    'groupId'?: string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof GroupAnnouncement
     */
    'authorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupAnnouncement
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupAnnouncement
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupAnnouncement
     */
    'imageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupAnnouncement
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupAnnouncement
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupAnnouncement
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface GroupAuditLogEntry
 */
export interface GroupAuditLogEntry {
    /**
     * 
     * @type {string}
     * @memberof GroupAuditLogEntry
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupAuditLogEntry
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupAuditLogEntry
     */
    'groupId'?: string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof GroupAuditLogEntry
     */
    'actorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupAuditLogEntry
     */
    'actorDisplayname'?: string;
    /**
     * Typically GroupID or GroupRoleID, but could be other types of IDs.
     * @type {string}
     * @memberof GroupAuditLogEntry
     */
    'targetId'?: string;
    /**
     * The type of event that occurred. This is a string that is prefixed with the type of object that the event occurred on. For example, a group role update event would be prefixed with `group.role`.
     * @type {string}
     * @memberof GroupAuditLogEntry
     */
    'eventType'?: string;
    /**
     * A human-readable description of the event.
     * @type {string}
     * @memberof GroupAuditLogEntry
     */
    'description'?: string;
    /**
     * The data associated with the event. The format of this data is dependent on the event type.
     * @type {object}
     * @memberof GroupAuditLogEntry
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface GroupGallery
 */
export interface GroupGallery {
    /**
     * 
     * @type {string}
     * @memberof GroupGallery
     */
    'id'?: string;
    /**
     * Name of the gallery.
     * @type {string}
     * @memberof GroupGallery
     */
    'name'?: string;
    /**
     * Description of the gallery.
     * @type {string}
     * @memberof GroupGallery
     */
    'description'?: string;
    /**
     * Whether the gallery is members only.
     * @type {boolean}
     * @memberof GroupGallery
     */
    'membersOnly'?: boolean;
    /**
     *  
     * @type {Array<string>}
     * @memberof GroupGallery
     */
    'roleIdsToView'?: Array<string> | null;
    /**
     *  
     * @type {Array<string>}
     * @memberof GroupGallery
     */
    'roleIdsToSubmit'?: Array<string> | null;
    /**
     *  
     * @type {Array<string>}
     * @memberof GroupGallery
     */
    'roleIdsToAutoApprove'?: Array<string> | null;
    /**
     *  
     * @type {Array<string>}
     * @memberof GroupGallery
     */
    'roleIdsToManage'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof GroupGallery
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupGallery
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface GroupGalleryImage
 */
export interface GroupGalleryImage {
    /**
     * 
     * @type {string}
     * @memberof GroupGalleryImage
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupGalleryImage
     */
    'groupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupGalleryImage
     */
    'galleryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupGalleryImage
     */
    'fileId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupGalleryImage
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupGalleryImage
     */
    'createdAt'?: string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof GroupGalleryImage
     */
    'submittedByUserId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GroupGalleryImage
     */
    'approved'?: boolean;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof GroupGalleryImage
     */
    'approvedByUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupGalleryImage
     */
    'approvedAt'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const GroupJoinState = {
    Closed: 'closed',
    Invite: 'invite',
    Request: 'request',
    Open: 'open'
} as const;

export type GroupJoinState = typeof GroupJoinState[keyof typeof GroupJoinState];


/**
 * 
 * @export
 * @interface GroupLimitedMember
 */
export interface GroupLimitedMember {
    /**
     * 
     * @type {string}
     * @memberof GroupLimitedMember
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupLimitedMember
     */
    'groupId'?: string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof GroupLimitedMember
     */
    'userId'?: string;
    /**
     * Whether the user is representing the group. This makes the group show up above the name tag in-game.
     * @type {boolean}
     * @memberof GroupLimitedMember
     */
    'isRepresenting'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupLimitedMember
     */
    'roleIds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupLimitedMember
     */
    'mRoleIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GroupLimitedMember
     */
    'joinedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupLimitedMember
     */
    'membershipStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupLimitedMember
     */
    'visibility'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GroupLimitedMember
     */
    'isSubscribedToAnnouncements'?: boolean;
    /**
     * Only visible via the /groups/:groupId/members endpoint, **not** when fetching a specific user.
     * @type {string}
     * @memberof GroupLimitedMember
     */
    'createdAt'?: string | null;
    /**
     * Only visible via the /groups/:groupId/members endpoint, **not** when fetching a specific user.
     * @type {string}
     * @memberof GroupLimitedMember
     */
    'bannedAt'?: string | null;
    /**
     * Only visible via the /groups/:groupId/members endpoint, **not** when fetching a specific user.
     * @type {string}
     * @memberof GroupLimitedMember
     */
    'managerNotes'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupLimitedMember
     */
    'lastPostReadAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GroupLimitedMember
     */
    'hasJoinedFromPurchase'?: boolean;
}
/**
 * 
 * @export
 * @interface GroupMember
 */
export interface GroupMember {
    /**
     * 
     * @type {string}
     * @memberof GroupMember
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupMember
     */
    'groupId'?: string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof GroupMember
     */
    'userId'?: string;
    /**
     * Whether the user is representing the group. This makes the group show up above the name tag in-game.
     * @type {boolean}
     * @memberof GroupMember
     */
    'isRepresenting'?: boolean;
    /**
     * 
     * @type {GroupMemberLimitedUser}
     * @memberof GroupMember
     */
    'user'?: GroupMemberLimitedUser;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupMember
     */
    'roleIds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupMember
     */
    'mRoleIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GroupMember
     */
    'joinedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupMember
     */
    'membershipStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupMember
     */
    'visibility'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GroupMember
     */
    'isSubscribedToAnnouncements'?: boolean;
    /**
     * Only visible via the /groups/:groupId/members endpoint, **not** when fetching a specific user.
     * @type {string}
     * @memberof GroupMember
     */
    'createdAt'?: string | null;
    /**
     * Only visible via the /groups/:groupId/members endpoint, **not** when fetching a specific user.
     * @type {string}
     * @memberof GroupMember
     */
    'bannedAt'?: string | null;
    /**
     * Only visible via the /groups/:groupId/members endpoint, **not** when fetching a specific user.
     * @type {string}
     * @memberof GroupMember
     */
    'managerNotes'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupMember
     */
    'lastPostReadAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GroupMember
     */
    'hasJoinedFromPurchase'?: boolean;
}
/**
 * Only visible via the /groups/:groupId/members endpoint, **not** when fetching a specific user.
 * @export
 * @interface GroupMemberLimitedUser
 */
export interface GroupMemberLimitedUser {
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof GroupMemberLimitedUser
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupMemberLimitedUser
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupMemberLimitedUser
     */
    'thumbnailUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupMemberLimitedUser
     */
    'iconUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupMemberLimitedUser
     */
    'profilePicOverride'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupMemberLimitedUser
     */
    'currentAvatarThumbnailImageUrl'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupMemberLimitedUser
     */
    'currentAvatarTags'?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const GroupMemberStatus = {
    Inactive: 'inactive',
    Member: 'member',
    Requested: 'requested',
    Invited: 'invited'
} as const;

export type GroupMemberStatus = typeof GroupMemberStatus[keyof typeof GroupMemberStatus];


/**
 * 
 * @export
 * @interface GroupMyMember
 */
export interface GroupMyMember {
    /**
     * 
     * @type {string}
     * @memberof GroupMyMember
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupMyMember
     */
    'groupId'?: string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof GroupMyMember
     */
    'userId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupMyMember
     */
    'roleIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GroupMyMember
     */
    'managerNotes'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupMyMember
     */
    'membershipStatus'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GroupMyMember
     */
    'isSubscribedToAnnouncements'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GroupMyMember
     */
    'visibility'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GroupMyMember
     */
    'isRepresenting'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GroupMyMember
     */
    'joinedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupMyMember
     */
    'bannedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GroupMyMember
     */
    'has2FA'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupMyMember
     */
    'permissions'?: Array<string>;
}
/**
 * A permission that can be granted to a role in a group.
 * @export
 * @interface GroupPermission
 */
export interface GroupPermission {
    /**
     * The name of the permission.
     * @type {string}
     * @memberof GroupPermission
     */
    'name'?: string;
    /**
     * The display name of the permission.
     * @type {string}
     * @memberof GroupPermission
     */
    'displayName'?: string;
    /**
     * Human-readable description of the permission.
     * @type {string}
     * @memberof GroupPermission
     */
    'help'?: string;
    /**
     * Whether this permission is a \"management\" permission.
     * @type {boolean}
     * @memberof GroupPermission
     */
    'isManagementPermission'?: boolean;
    /**
     * Whether the user is allowed to add this permission to a role.
     * @type {boolean}
     * @memberof GroupPermission
     */
    'allowedToAdd'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const GroupPrivacy = {
    Default: 'default',
    Private: 'private'
} as const;

export type GroupPrivacy = typeof GroupPrivacy[keyof typeof GroupPrivacy];


/**
 * 
 * @export
 * @interface GroupRole
 */
export interface GroupRole {
    /**
     * 
     * @type {string}
     * @memberof GroupRole
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRole
     */
    'groupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRole
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRole
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GroupRole
     */
    'isSelfAssignable'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupRole
     */
    'permissions'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof GroupRole
     */
    'isManagementRole'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GroupRole
     */
    'requiresTwoFactor'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GroupRole
     */
    'requiresPurchase'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GroupRole
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof GroupRole
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRole
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const GroupRoleTemplate = {
    Default: 'default',
    ManagedFree: 'managedFree',
    ManagedInvite: 'managedInvite',
    ManagedRequest: 'managedRequest'
} as const;

export type GroupRoleTemplate = typeof GroupRoleTemplate[keyof typeof GroupRoleTemplate];


/**
 * 
 * @export
 * @enum {string}
 */

export const GroupSearchSort = {
    Asc: 'joinedAt:asc',
    Desc: 'joinedAt:desc'
} as const;

export type GroupSearchSort = typeof GroupSearchSort[keyof typeof GroupSearchSort];


/**
 * 
 * @export
 * @enum {string}
 */

export const GroupUserVisibility = {
    Visible: 'visible',
    Hidden: 'hidden',
    Friends: 'friends'
} as const;

export type GroupUserVisibility = typeof GroupUserVisibility[keyof typeof GroupUserVisibility];


/**
 * 
 * @export
 * @interface InfoPush
 */
export interface InfoPush {
    /**
     * 
     * @type {string}
     * @memberof InfoPush
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof InfoPush
     */
    'isEnabled': boolean;
    /**
     * 
     * @type {ReleaseStatus}
     * @memberof InfoPush
     */
    'releaseStatus': ReleaseStatus;
    /**
     * 
     * @type {number}
     * @memberof InfoPush
     */
    'priority': number;
    /**
     *  
     * @type {Array<string>}
     * @memberof InfoPush
     */
    'tags': Array<string>;
    /**
     * 
     * @type {InfoPushData}
     * @memberof InfoPush
     */
    'data': InfoPushData;
    /**
     * Unknown usage, MD5
     * @type {string}
     * @memberof InfoPush
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof InfoPush
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof InfoPush
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof InfoPush
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfoPush
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface InfoPushData
 */
export interface InfoPushData {
    /**
     * 
     * @type {DynamicContentRow}
     * @memberof InfoPushData
     */
    'contentList'?: DynamicContentRow;
    /**
     * 
     * @type {string}
     * @memberof InfoPushData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfoPushData
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfoPushData
     */
    'name'?: string;
    /**
     * 
     * @type {InfoPushDataClickable}
     * @memberof InfoPushData
     */
    'onPressed'?: InfoPushDataClickable;
    /**
     * 
     * @type {string}
     * @memberof InfoPushData
     */
    'template'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfoPushData
     */
    'version'?: string;
    /**
     * 
     * @type {InfoPushDataArticle}
     * @memberof InfoPushData
     */
    'article'?: InfoPushDataArticle;
}
/**
 * 
 * @export
 * @interface InfoPushDataArticle
 */
export interface InfoPushDataArticle {
    /**
     * 
     * @type {InfoPushDataArticleContent}
     * @memberof InfoPushDataArticle
     */
    'content'?: InfoPushDataArticleContent;
}
/**
 * 
 * @export
 * @interface InfoPushDataArticleContent
 */
export interface InfoPushDataArticleContent {
    /**
     * 
     * @type {string}
     * @memberof InfoPushDataArticleContent
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof InfoPushDataArticleContent
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {InfoPushDataClickable}
     * @memberof InfoPushDataArticleContent
     */
    'onPressed'?: InfoPushDataClickable;
}
/**
 * 
 * @export
 * @interface InfoPushDataClickable
 */
export interface InfoPushDataClickable {
    /**
     * 
     * @type {string}
     * @memberof InfoPushDataClickable
     */
    'command': InfoPushDataClickableCommandEnum;
    /**
     * In case of OpenURL, this would contain the link.
     * @type {Array<string>}
     * @memberof InfoPushDataClickable
     */
    'parameters'?: Array<string>;
}

export const InfoPushDataClickableCommandEnum = {
    OpenUrl: 'OpenURL',
    OpenVrcPlusMenu: 'OpenVRCPlusMenu',
    OpenSafetyMenu: 'OpenSafetyMenu',
    CannedWorldSearch: 'CannedWorldSearch'
} as const;

export type InfoPushDataClickableCommandEnum = typeof InfoPushDataClickableCommandEnum[keyof typeof InfoPushDataClickableCommandEnum];

/**
 * * `hidden` field is only present if InstanceType is `hidden` aka \"Friends+\", and is instance creator. * `friends` field is only present if InstanceType is `friends` aka \"Friends\", and is instance creator. * `private` field is only present if InstanceType is `private` aka \"Invite\" or \"Invite+\", and is instance creator.
 * @export
 * @interface Instance
 */
export interface Instance {
    /**
     * 
     * @type {boolean}
     * @memberof Instance
     */
    'active': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Instance
     */
    'canRequestInvite': boolean;
    /**
     * 
     * @type {number}
     * @memberof Instance
     */
    'capacity': number;
    /**
     * Always returns \"unknown\".
     * @type {string}
     * @memberof Instance
     * @deprecated
     */
    'clientNumber': string;
    /**
     * 
     * @type {boolean}
     * @memberof Instance
     */
    'full': boolean;
    /**
     * InstanceID can be \"offline\" on User profiles if you are not friends with that user and \"private\" if you are friends and user is in private instance.
     * @type {string}
     * @memberof Instance
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Instance
     */
    'instanceId': string;
    /**
     * InstanceID can be \"offline\" on User profiles if you are not friends with that user and \"private\" if you are friends and user is in private instance.
     * @type {string}
     * @memberof Instance
     */
    'location': string;
    /**
     * 
     * @type {number}
     * @memberof Instance
     */
    'n_users': number;
    /**
     * 
     * @type {string}
     * @memberof Instance
     */
    'name': string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof Instance
     */
    'ownerId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Instance
     */
    'permanent': boolean;
    /**
     * 
     * @type {Region}
     * @memberof Instance
     */
    'photonRegion': Region;
    /**
     * 
     * @type {InstancePlatforms}
     * @memberof Instance
     */
    'platforms': InstancePlatforms;
    /**
     * 
     * @type {Region}
     * @memberof Instance
     */
    'region': Region;
    /**
     * 
     * @type {string}
     * @memberof Instance
     */
    'secureName': string;
    /**
     * 
     * @type {string}
     * @memberof Instance
     */
    'shortName'?: string;
    /**
     * The tags array on Instances usually contain the language tags of the people in the instance. 
     * @type {Array<string>}
     * @memberof Instance
     */
    'tags': Array<string>;
    /**
     * 
     * @type {InstanceType}
     * @memberof Instance
     */
    'type': InstanceType;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof Instance
     */
    'worldId': string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof Instance
     */
    'hidden'?: string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof Instance
     */
    'friends'?: string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof Instance
     */
    'private'?: string;
}
/**
 * 
 * @export
 * @interface InstancePlatforms
 */
export interface InstancePlatforms {
    /**
     * 
     * @type {number}
     * @memberof InstancePlatforms
     */
    'android': number;
    /**
     * 
     * @type {number}
     * @memberof InstancePlatforms
     */
    'standalonewindows': number;
}
/**
 * 
 * @export
 * @interface InstanceShortNameResponse
 */
export interface InstanceShortNameResponse {
    /**
     * 
     * @type {string}
     * @memberof InstanceShortNameResponse
     */
    'secureName': string;
    /**
     * 
     * @type {string}
     * @memberof InstanceShortNameResponse
     */
    'shortName'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const InstanceType = {
    Public: 'public',
    Hidden: 'hidden',
    Friends: 'friends',
    Private: 'private',
    Group: 'group'
} as const;

export type InstanceType = typeof InstanceType[keyof typeof InstanceType];


/**
 * 
 * @export
 * @interface InviteMessage
 */
export interface InviteMessage {
    /**
     * 
     * @type {boolean}
     * @memberof InviteMessage
     */
    'canBeUpdated': boolean;
    /**
     * 
     * @type {string}
     * @memberof InviteMessage
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof InviteMessage
     */
    'message': string;
    /**
     * 
     * @type {InviteMessageType}
     * @memberof InviteMessage
     */
    'messageType': InviteMessageType;
    /**
     * Changes to 60 when updated, although probably server-side configurable.
     * @type {number}
     * @memberof InviteMessage
     */
    'remainingCooldownMinutes': number;
    /**
     * 
     * @type {number}
     * @memberof InviteMessage
     */
    'slot': number;
    /**
     * 
     * @type {string}
     * @memberof InviteMessage
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const InviteMessageType = {
    Message: 'message',
    Response: 'response',
    Request: 'request',
    RequestResponse: 'requestResponse'
} as const;

export type InviteMessageType = typeof InviteMessageType[keyof typeof InviteMessageType];


/**
 * 
 * @export
 * @interface InviteRequest
 */
export interface InviteRequest {
    /**
     * InstanceID can be \"offline\" on User profiles if you are not friends with that user and \"private\" if you are friends and user is in private instance.
     * @type {string}
     * @memberof InviteRequest
     */
    'instanceId': string;
    /**
     * 
     * @type {number}
     * @memberof InviteRequest
     */
    'messageSlot'?: number;
}
/**
 * 
 * @export
 * @interface InviteResponse
 */
export interface InviteResponse {
    /**
     * 
     * @type {number}
     * @memberof InviteResponse
     */
    'responseSlot': number;
}
/**
 * 
 * @export
 * @interface License
 */
export interface License {
    /**
     * Either a AvatarID, LicenseGroupID, PermissionID or ProductID. This depends on the `forType` field.
     * @type {string}
     * @memberof License
     */
    'forId': string;
    /**
     * 
     * @type {LicenseType}
     * @memberof License
     */
    'forType': LicenseType;
    /**
     * 
     * @type {string}
     * @memberof License
     */
    'forName': string;
    /**
     * 
     * @type {LicenseAction}
     * @memberof License
     */
    'forAction': LicenseAction;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const LicenseAction = {
    Wear: 'wear',
    Have: 'have'
} as const;

export type LicenseAction = typeof LicenseAction[keyof typeof LicenseAction];


/**
 * 
 * @export
 * @interface LicenseGroup
 */
export interface LicenseGroup {
    /**
     * 
     * @type {string}
     * @memberof LicenseGroup
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof LicenseGroup
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof LicenseGroup
     */
    'description': string;
    /**
     * 
     * @type {Array<License>}
     * @memberof LicenseGroup
     */
    'licenses': Array<License>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const LicenseType = {
    Avatar: 'avatar',
    LicenseGroup: 'licenseGroup',
    Permission: 'permission',
    Product: 'product'
} as const;

export type LicenseType = typeof LicenseType[keyof typeof LicenseType];


/**
 * 
 * @export
 * @interface LimitedGroup
 */
export interface LimitedGroup {
    /**
     * 
     * @type {string}
     * @memberof LimitedGroup
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedGroup
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedGroup
     */
    'shortCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedGroup
     */
    'discriminator'?: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedGroup
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedGroup
     */
    'iconUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LimitedGroup
     */
    'bannerUrl'?: string | null;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof LimitedGroup
     */
    'ownerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedGroup
     */
    'rules'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LimitedGroup
     */
    'iconId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LimitedGroup
     */
    'bannerId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LimitedGroup
     */
    'memberCount'?: number;
    /**
     *  
     * @type {Array<string>}
     * @memberof LimitedGroup
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof LimitedGroup
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GroupMemberStatus}
     * @memberof LimitedGroup
     */
    'membershipStatus'?: GroupMemberStatus;
    /**
     * 
     * @type {boolean}
     * @memberof LimitedGroup
     */
    'isSearchable'?: boolean;
    /**
     *  
     * @type {Array<GroupGallery>}
     * @memberof LimitedGroup
     */
    'galleries'?: Array<GroupGallery>;
}
/**
 * 
 * @export
 * @interface LimitedUnityPackage
 */
export interface LimitedUnityPackage {
    /**
     * This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.
     * @type {string}
     * @memberof LimitedUnityPackage
     */
    'platform': string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUnityPackage
     */
    'unityVersion': string;
}
/**
 * 
 * @export
 * @interface LimitedUser
 */
export interface LimitedUser {
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    'bio'?: string;
    /**
     * When profilePicOverride is not empty, use it instead.
     * @type {string}
     * @memberof LimitedUser
     */
    'currentAvatarImageUrl'?: string;
    /**
     * When profilePicOverride is not empty, use it instead.
     * @type {string}
     * @memberof LimitedUser
     */
    'currentAvatarThumbnailImageUrl'?: string;
    /**
     * 
     * @type {DeveloperType}
     * @memberof LimitedUser
     */
    'developerType': DeveloperType;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    'fallbackAvatar'?: string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof LimitedUser
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof LimitedUser
     */
    'isFriend': boolean;
    /**
     * This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.
     * @type {string}
     * @memberof LimitedUser
     */
    'last_platform': string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    'profilePicOverride'?: string;
    /**
     * 
     * @type {UserStatus}
     * @memberof LimitedUser
     */
    'status': UserStatus;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    'statusDescription': string;
    /**
     * <- Always empty.
     * @type {Array<string>}
     * @memberof LimitedUser
     */
    'tags': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    'userIcon'?: string;
    /**
     * -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
     * @type {string}
     * @memberof LimitedUser
     * @deprecated
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    'friendKey'?: string;
}
/**
 * 
 * @export
 * @interface LimitedWorld
 */
export interface LimitedWorld {
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof LimitedWorld
     */
    'authorId': string;
    /**
     * 
     * @type {string}
     * @memberof LimitedWorld
     */
    'authorName': string;
    /**
     * 
     * @type {number}
     * @memberof LimitedWorld
     */
    'capacity': number;
    /**
     * 
     * @type {number}
     * @memberof LimitedWorld
     */
    'recommendedCapacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof LimitedWorld
     */
    'created_at': string;
    /**
     * 
     * @type {number}
     * @memberof LimitedWorld
     */
    'favorites': number;
    /**
     * 
     * @type {number}
     * @memberof LimitedWorld
     */
    'heat': number;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof LimitedWorld
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof LimitedWorld
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof LimitedWorld
     */
    'labsPublicationDate': string;
    /**
     * 
     * @type {string}
     * @memberof LimitedWorld
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof LimitedWorld
     */
    'occupants': number;
    /**
     * 
     * @type {string}
     * @memberof LimitedWorld
     */
    'organization': string;
    /**
     * 
     * @type {number}
     * @memberof LimitedWorld
     */
    'popularity': number;
    /**
     * 
     * @type {string}
     * @memberof LimitedWorld
     */
    'publicationDate': string;
    /**
     * 
     * @type {ReleaseStatus}
     * @memberof LimitedWorld
     */
    'releaseStatus': ReleaseStatus;
    /**
     *  
     * @type {Array<string>}
     * @memberof LimitedWorld
     */
    'tags': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof LimitedWorld
     */
    'thumbnailImageUrl': string;
    /**
     *  
     * @type {Array<LimitedUnityPackage>}
     * @memberof LimitedWorld
     */
    'unityPackages': Array<LimitedUnityPackage>;
    /**
     * 
     * @type {string}
     * @memberof LimitedWorld
     */
    'updated_at': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LimitedWorld
     */
    'udonProducts'?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const MIMEType = {
    ImageJpeg: 'image/jpeg',
    ImageJpg: 'image/jpg',
    ImagePng: 'image/png',
    ImageWebp: 'image/webp',
    ImageGif: 'image/gif',
    ImageBmp: 'image/bmp',
    ImageSvgxml: 'image/svg＋xml',
    ImageTiff: 'image/tiff',
    ApplicationXAvatar: 'application/x-avatar',
    ApplicationXWorld: 'application/x-world',
    ApplicationGzip: 'application/gzip',
    ApplicationXRsyncSignature: 'application/x-rsync-signature',
    ApplicationXRsyncDelta: 'application/x-rsync-delta',
    ApplicationOctetStream: 'application/octet-stream'
} as const;

export type MIMEType = typeof MIMEType[keyof typeof MIMEType];


/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {Response}
     * @memberof ModelError
     */
    'error'?: Response;
}
/**
 * 
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    'extension': string;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    'id': string;
    /**
     * 
     * @type {MIMEType}
     * @memberof ModelFile
     */
    'mimeType': MIMEType;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    'name': string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof ModelFile
     */
    'ownerId': string;
    /**
     *  
     * @type {Array<string>}
     * @memberof ModelFile
     */
    'tags': Array<string>;
    /**
     *  
     * @type {Set<FileVersion>}
     * @memberof ModelFile
     */
    'versions': Set<FileVersion>;
}
/**
 * 
 * @export
 * @interface ModerateUserRequest
 */
export interface ModerateUserRequest {
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof ModerateUserRequest
     */
    'moderated': string;
    /**
     * 
     * @type {PlayerModerationType}
     * @memberof ModerateUserRequest
     */
    'type': PlayerModerationType;
}
/**
 * 
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'created_at': string;
    /**
     * **NOTICE:** This is not a JSON object when received from the REST API, but it is when received from the Websocket API. When received from the REST API, this is a json **encoded** object, meaning you have to json-de-encode to get the NotificationDetail object depending on the NotificationType.
     * @type {string}
     * @memberof Notification
     */
    'details': string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'message': string;
    /**
     * Not included in notification objects received from the Websocket API
     * @type {boolean}
     * @memberof Notification
     */
    'seen'?: boolean;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof Notification
     */
    'receiverUserId'?: string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof Notification
     */
    'senderUserId': string;
    /**
     * -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
     * @type {string}
     * @memberof Notification
     * @deprecated
     */
    'senderUsername'?: string;
    /**
     * 
     * @type {NotificationType}
     * @memberof Notification
     */
    'type': NotificationType;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const NotificationType = {
    FriendRequest: 'friendRequest',
    Invite: 'invite',
    InviteResponse: 'inviteResponse',
    Message: 'message',
    RequestInvite: 'requestInvite',
    RequestInviteResponse: 'requestInviteResponse',
    Votetokick: 'votetokick'
} as const;

export type NotificationType = typeof NotificationType[keyof typeof NotificationType];


/**
 * 
 * @export
 * @enum {string}
 */

export const OrderOption = {
    Ascending: 'ascending',
    Descending: 'descending'
} as const;

export type OrderOption = typeof OrderOption[keyof typeof OrderOption];


/**
 * 
 * @export
 * @interface PaginatedGroupAuditLogEntryList
 */
export interface PaginatedGroupAuditLogEntryList {
    /**
     *  
     * @type {Array<GroupAuditLogEntry>}
     * @memberof PaginatedGroupAuditLogEntryList
     */
    'results'?: Array<GroupAuditLogEntry>;
    /**
     * The total number of results that the query would return if there were no pagination.
     * @type {number}
     * @memberof PaginatedGroupAuditLogEntryList
     */
    'totalCount'?: number;
    /**
     * Whether there are more results after this page.
     * @type {boolean}
     * @memberof PaginatedGroupAuditLogEntryList
     */
    'hasNext'?: boolean;
}
/**
 * 
 * @export
 * @interface PastDisplayName
 */
export interface PastDisplayName {
    /**
     * 
     * @type {string}
     * @memberof PastDisplayName
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof PastDisplayName
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface Permission
 */
export interface Permission {
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    'name': string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof Permission
     */
    'ownerId': string;
    /**
     * 
     * @type {object}
     * @memberof Permission
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface PlayerModeration
 */
export interface PlayerModeration {
    /**
     * 
     * @type {string}
     * @memberof PlayerModeration
     */
    'created': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerModeration
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerModeration
     */
    'sourceDisplayName': string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof PlayerModeration
     */
    'sourceUserId': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerModeration
     */
    'targetDisplayName': string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof PlayerModeration
     */
    'targetUserId': string;
    /**
     * 
     * @type {PlayerModerationType}
     * @memberof PlayerModeration
     */
    'type': PlayerModerationType;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PlayerModerationType = {
    Mute: 'mute',
    Unmute: 'unmute',
    Block: 'block',
    Unblock: 'unblock',
    InteractOn: 'interactOn',
    InteractOff: 'interactOff'
} as const;

export type PlayerModerationType = typeof PlayerModerationType[keyof typeof PlayerModerationType];


/**
 * API/Photon region.
 * @export
 * @enum {string}
 */

export const Region = {
    Us: 'us',
    Use: 'use',
    Usw: 'usw',
    Eu: 'eu',
    Jp: 'jp',
    Unknown: 'unknown'
} as const;

export type Region = typeof Region[keyof typeof Region];


/**
 * 
 * @export
 * @enum {string}
 */

export const ReleaseStatus = {
    Public: 'public',
    Private: 'private',
    Hidden: 'hidden',
    All: 'all'
} as const;

export type ReleaseStatus = typeof ReleaseStatus[keyof typeof ReleaseStatus];


/**
 * 
 * @export
 * @interface RequestInviteRequest
 */
export interface RequestInviteRequest {
    /**
     * 
     * @type {number}
     * @memberof RequestInviteRequest
     */
    'messageSlot'?: number;
}
/**
 * 
 * @export
 * @interface RespondGroupJoinRequest
 */
export interface RespondGroupJoinRequest {
    /**
     * 
     * @type {string}
     * @memberof RespondGroupJoinRequest
     */
    'action'?: string;
}
/**
 * 
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof Response
     */
    'status_code': number;
}
/**
 * 
 * @export
 * @interface SentNotification
 */
export interface SentNotification {
    /**
     * 
     * @type {string}
     * @memberof SentNotification
     */
    'created_at': string;
    /**
     * **NOTICE:** This is not a JSON object, this is a json **encoded** object, meaning you have to json-de-encode to get the NotificationDetail object depending on the NotificationType.
     * @type {string}
     * @memberof SentNotification
     */
    'details': string;
    /**
     * 
     * @type {string}
     * @memberof SentNotification
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SentNotification
     */
    'message': string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof SentNotification
     */
    'recieverUserId': string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof SentNotification
     */
    'senderUserId': string;
    /**
     * -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
     * @type {string}
     * @memberof SentNotification
     * @deprecated
     */
    'senderUsername'?: string;
    /**
     * 
     * @type {NotificationType}
     * @memberof SentNotification
     */
    'type': NotificationType;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SortOption = {
    Popularity: 'popularity',
    Heat: 'heat',
    Trust: 'trust',
    Shuffle: 'shuffle',
    Random: 'random',
    Favorites: 'favorites',
    ReportScore: 'reportScore',
    ReportCount: 'reportCount',
    PublicationDate: 'publicationDate',
    LabsPublicationDate: 'labsPublicationDate',
    Created: 'created',
    CreatedAt: '_created_at',
    Updated: 'updated',
    UpdatedAt: '_updated_at',
    Order: 'order',
    Relevance: 'relevance',
    Magic: 'magic',
    Name: 'name'
} as const;

export type SortOption = typeof SortOption[keyof typeof SortOption];


/**
 * 
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'steamItemId': string;
    /**
     * 
     * @type {number}
     * @memberof Subscription
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'description': string;
    /**
     * 
     * @type {SubscriptionPeriod}
     * @memberof Subscription
     */
    'period': SubscriptionPeriod;
    /**
     * 
     * @type {number}
     * @memberof Subscription
     */
    'tier': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SubscriptionPeriod = {
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Year: 'year'
} as const;

export type SubscriptionPeriod = typeof SubscriptionPeriod[keyof typeof SubscriptionPeriod];


/**
 * 
 * @export
 * @interface Success
 */
export interface Success {
    /**
     * 
     * @type {Response}
     * @memberof Success
     */
    'success'?: Response;
}
/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'id': string;
    /**
     * 
     * @type {TransactionStatus}
     * @memberof Transaction
     */
    'status': TransactionStatus;
    /**
     * 
     * @type {Subscription}
     * @memberof Transaction
     */
    'subscription': Subscription;
    /**
     * 
     * @type {boolean}
     * @memberof Transaction
     */
    'sandbox': boolean;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'updated_at': string;
    /**
     * 
     * @type {TransactionSteamInfo}
     * @memberof Transaction
     */
    'steam'?: TransactionSteamInfo;
    /**
     * 
     * @type {TransactionAgreement}
     * @memberof Transaction
     */
    'agreement'?: TransactionAgreement;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface TransactionAgreement
 */
export interface TransactionAgreement {
    /**
     * 
     * @type {string}
     * @memberof TransactionAgreement
     */
    'agreementId': string;
    /**
     * 
     * @type {number}
     * @memberof TransactionAgreement
     */
    'itemId': number;
    /**
     * This is NOT TransactionStatus, but whatever Steam return.
     * @type {string}
     * @memberof TransactionAgreement
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionAgreement
     */
    'period': string;
    /**
     * 
     * @type {number}
     * @memberof TransactionAgreement
     */
    'frequency': number;
    /**
     * 
     * @type {string}
     * @memberof TransactionAgreement
     */
    'billingType': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionAgreement
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionAgreement
     */
    'endDate': string;
    /**
     * 
     * @type {number}
     * @memberof TransactionAgreement
     */
    'recurringAmt': number;
    /**
     * 
     * @type {string}
     * @memberof TransactionAgreement
     */
    'currency': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionAgreement
     */
    'timeCreated': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionAgreement
     */
    'nextPayment': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionAgreement
     */
    'lastPayment': string;
    /**
     * 
     * @type {number}
     * @memberof TransactionAgreement
     */
    'lastAmount': number;
    /**
     * 
     * @type {number}
     * @memberof TransactionAgreement
     */
    'lastAmountVat': number;
    /**
     * 
     * @type {number}
     * @memberof TransactionAgreement
     */
    'outstanding': number;
    /**
     * 
     * @type {number}
     * @memberof TransactionAgreement
     */
    'failedAttempts': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TransactionStatus = {
    Active: 'active',
    Failed: 'failed',
    Expired: 'expired',
    Chargeback: 'chargeback'
} as const;

export type TransactionStatus = typeof TransactionStatus[keyof typeof TransactionStatus];


/**
 * 
 * @export
 * @interface TransactionSteamInfo
 */
export interface TransactionSteamInfo {
    /**
     * 
     * @type {TransactionSteamWalletInfo}
     * @memberof TransactionSteamInfo
     */
    'walletInfo': TransactionSteamWalletInfo;
    /**
     * Steam User ID
     * @type {string}
     * @memberof TransactionSteamInfo
     */
    'steamId': string;
    /**
     * Steam Order ID
     * @type {string}
     * @memberof TransactionSteamInfo
     */
    'orderId': string;
    /**
     * Empty
     * @type {string}
     * @memberof TransactionSteamInfo
     */
    'steamUrl': string;
    /**
     * Steam Transaction ID, NOT the same as VRChat TransactionID
     * @type {string}
     * @memberof TransactionSteamInfo
     */
    'transId': string;
}
/**
 * 
 * @export
 * @interface TransactionSteamWalletInfo
 */
export interface TransactionSteamWalletInfo {
    /**
     * 
     * @type {string}
     * @memberof TransactionSteamWalletInfo
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionSteamWalletInfo
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionSteamWalletInfo
     */
    'currency': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionSteamWalletInfo
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface TwoFactorAuthCode
 */
export interface TwoFactorAuthCode {
    /**
     * 
     * @type {string}
     * @memberof TwoFactorAuthCode
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface TwoFactorEmailCode
 */
export interface TwoFactorEmailCode {
    /**
     * 
     * @type {string}
     * @memberof TwoFactorEmailCode
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface UnityPackage
 */
export interface UnityPackage {
    /**
     * 
     * @type {string}
     * @memberof UnityPackage
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UnityPackage
     */
    'assetUrl'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof UnityPackage
     */
    'assetUrlObject'?: object;
    /**
     * 
     * @type {number}
     * @memberof UnityPackage
     */
    'assetVersion': number;
    /**
     * 
     * @type {string}
     * @memberof UnityPackage
     */
    'created_at'?: string;
    /**
     * This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.
     * @type {string}
     * @memberof UnityPackage
     */
    'platform': string;
    /**
     * 
     * @type {string}
     * @memberof UnityPackage
     */
    'pluginUrl'?: string;
    /**
     * 
     * @type {object}
     * @memberof UnityPackage
     */
    'pluginUrlObject'?: object;
    /**
     * 
     * @type {number}
     * @memberof UnityPackage
     */
    'unitySortNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof UnityPackage
     */
    'unityVersion': string;
    /**
     * 
     * @type {string}
     * @memberof UnityPackage
     */
    'impostorUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UnityPackage
     */
    'scanStatus'?: string;
}
/**
 * 
 * @export
 * @interface UpdateAvatarRequest
 */
export interface UpdateAvatarRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateAvatarRequest
     */
    'assetUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAvatarRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAvatarRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAvatarRequest
     */
    'description'?: string;
    /**
     *  
     * @type {Array<string>}
     * @memberof UpdateAvatarRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateAvatarRequest
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {ReleaseStatus}
     * @memberof UpdateAvatarRequest
     */
    'releaseStatus'?: ReleaseStatus;
    /**
     * 
     * @type {number}
     * @memberof UpdateAvatarRequest
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateAvatarRequest
     */
    'unityPackageUrl'?: string;
}
/**
 * 
 * @export
 * @interface UpdateFavoriteGroupRequest
 */
export interface UpdateFavoriteGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateFavoriteGroupRequest
     */
    'displayName'?: string;
    /**
     * 
     * @type {FavoriteGroupVisibility}
     * @memberof UpdateFavoriteGroupRequest
     */
    'visibility'?: FavoriteGroupVisibility;
    /**
     * Tags on FavoriteGroups are believed to do nothing.
     * @type {Array<string>}
     * @memberof UpdateFavoriteGroupRequest
     */
    'tags'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateGroupGalleryRequest
 */
export interface UpdateGroupGalleryRequest {
    /**
     * Name of the gallery.
     * @type {string}
     * @memberof UpdateGroupGalleryRequest
     */
    'name'?: string;
    /**
     * Description of the gallery.
     * @type {string}
     * @memberof UpdateGroupGalleryRequest
     */
    'description'?: string;
    /**
     * Whether the gallery is members only.
     * @type {boolean}
     * @memberof UpdateGroupGalleryRequest
     */
    'membersOnly'?: boolean;
    /**
     *  
     * @type {Array<string>}
     * @memberof UpdateGroupGalleryRequest
     */
    'roleIdsToView'?: Array<string> | null;
    /**
     *  
     * @type {Array<string>}
     * @memberof UpdateGroupGalleryRequest
     */
    'roleIdsToSubmit'?: Array<string> | null;
    /**
     *  
     * @type {Array<string>}
     * @memberof UpdateGroupGalleryRequest
     */
    'roleIdsToAutoApprove'?: Array<string> | null;
    /**
     *  
     * @type {Array<string>}
     * @memberof UpdateGroupGalleryRequest
     */
    'roleIdsToManage'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface UpdateGroupMemberRequest
 */
export interface UpdateGroupMemberRequest {
    /**
     * 
     * @type {GroupUserVisibility}
     * @memberof UpdateGroupMemberRequest
     */
    'visibility'?: GroupUserVisibility;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateGroupMemberRequest
     */
    'isSubscribedToAnnouncements'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupMemberRequest
     */
    'managerNotes'?: string;
}
/**
 * 
 * @export
 * @interface UpdateGroupRequest
 */
export interface UpdateGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRequest
     */
    'shortCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRequest
     */
    'description'?: string;
    /**
     * 
     * @type {GroupJoinState}
     * @memberof UpdateGroupRequest
     */
    'joinState'?: GroupJoinState;
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRequest
     */
    'iconId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRequest
     */
    'bannerId'?: string | null;
    /**
     * 3 letter language code
     * @type {Array<string>}
     * @memberof UpdateGroupRequest
     */
    'languages'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateGroupRequest
     */
    'links'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRequest
     */
    'rules'?: string;
    /**
     *  
     * @type {Array<string>}
     * @memberof UpdateGroupRequest
     */
    'tags'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateGroupRoleRequest
 */
export interface UpdateGroupRoleRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRoleRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRoleRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateGroupRoleRequest
     */
    'isSelfAssignable'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateGroupRoleRequest
     */
    'permissions'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof UpdateGroupRoleRequest
     */
    'order'?: number;
}
/**
 * 
 * @export
 * @interface UpdateInviteMessageRequest
 */
export interface UpdateInviteMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateInviteMessageRequest
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'birthday'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserRequest
     */
    'acceptedTOSVersion'?: number;
    /**
     *  
     * @type {Array<string>}
     * @memberof UpdateUserRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {UserStatus}
     * @memberof UpdateUserRequest
     */
    'status'?: UserStatus;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'statusDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'bio'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateUserRequest
     */
    'bioLinks'?: Array<string>;
    /**
     * MUST be a valid VRChat /file/ url.
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'userIcon'?: string;
}
/**
 * 
 * @export
 * @interface UpdateWorldRequest
 */
export interface UpdateWorldRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateWorldRequest
     */
    'assetUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorldRequest
     */
    'assetVersion'?: string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof UpdateWorldRequest
     */
    'authorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorldRequest
     */
    'authorName'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateWorldRequest
     */
    'capacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorldRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorldRequest
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorldRequest
     */
    'name'?: string;
    /**
     * This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.
     * @type {string}
     * @memberof UpdateWorldRequest
     */
    'platform'?: string;
    /**
     * 
     * @type {ReleaseStatus}
     * @memberof UpdateWorldRequest
     */
    'releaseStatus'?: ReleaseStatus;
    /**
     *  
     * @type {Array<string>}
     * @memberof UpdateWorldRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorldRequest
     */
    'unityPackageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorldRequest
     */
    'unityVersion'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'allowAvatarCopying': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'bio': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof User
     */
    'bioLinks': Array<string>;
    /**
     * When profilePicOverride is not empty, use it instead.
     * @type {string}
     * @memberof User
     */
    'currentAvatarImageUrl': string;
    /**
     * When profilePicOverride is not empty, use it instead.
     * @type {string}
     * @memberof User
     */
    'currentAvatarThumbnailImageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'date_joined': string;
    /**
     * 
     * @type {DeveloperType}
     * @memberof User
     */
    'developerType': DeveloperType;
    /**
     * A users visual display name. This is what shows up in-game, and can different from their `username`. Changing display name is restricted to a cooldown period.
     * @type {string}
     * @memberof User
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'friendKey': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'friendRequestStatus'?: string;
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * InstanceID can be \"offline\" on User profiles if you are not friends with that user and \"private\" if you are friends and user is in private instance.
     * @type {string}
     * @memberof User
     */
    'instanceId'?: string;
    /**
     * Either their `friendKey`, or empty string if you are not friends. Unknown usage.
     * @type {boolean}
     * @memberof User
     */
    'isFriend': boolean;
    /**
     * Either a date-time or empty string.
     * @type {string}
     * @memberof User
     */
    'last_activity': string;
    /**
     * Either a date-time or empty string.
     * @type {string}
     * @memberof User
     */
    'last_login': string;
    /**
     * This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.
     * @type {string}
     * @memberof User
     */
    'last_platform': string;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof User
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'profilePicOverride': string;
    /**
     * 
     * @type {UserState}
     * @memberof User
     */
    'state': UserState;
    /**
     * 
     * @type {UserStatus}
     * @memberof User
     */
    'status': UserStatus;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'statusDescription': string;
    /**
     *  
     * @type {Array<string>}
     * @memberof User
     */
    'tags': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'travelingToInstance'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'travelingToLocation'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'travelingToWorld'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userIcon': string;
    /**
     * -| A users unique name, used during login. This is different from `displayName` which is what shows up in-game. A users `username` can never be changed.\' **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
     * @type {string}
     * @memberof User
     * @deprecated
     */
    'username'?: string;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof User
     */
    'worldId'?: string;
}
/**
 * Status object representing if a queried user by username or userId exists or not. This model is primarily used by the `/auth/exists` endpoint, which in turn is used during registration. Please see the documentation on that endpoint for more information on usage.
 * @export
 * @interface UserExists
 */
export interface UserExists {
    /**
     * Status if a user exist with that username or userId.
     * @type {boolean}
     * @memberof UserExists
     */
    'userExists': boolean;
}
/**
 * * \"online\" User is online in VRChat * \"active\" User is online, but not in VRChat * \"offline\" User is offline  Always offline when returned through `getCurrentUser` (/auth/user).
 * @export
 * @enum {string}
 */

export const UserState = {
    Offline: 'offline',
    Active: 'active',
    Online: 'online'
} as const;

export type UserState = typeof UserState[keyof typeof UserState];


/**
 * Defines the User\'s current status, for example \"ask me\", \"join me\" or \"offline. This status is a combined indicator of their online activity and privacy preference.
 * @export
 * @enum {string}
 */

export const UserStatus = {
    Active: 'active',
    JoinMe: 'join me',
    AskMe: 'ask me',
    Busy: 'busy',
    Offline: 'offline'
} as const;

export type UserStatus = typeof UserStatus[keyof typeof UserStatus];


/**
 * 
 * @export
 * @interface UserSubscription
 */
export interface UserSubscription {
    /**
     * 
     * @type {string}
     * @memberof UserSubscription
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserSubscription
     */
    'transactionId': string;
    /**
     * Which \"Store\" it came from. Right now only Stores are \"Steam\" and \"Admin\".
     * @type {string}
     * @memberof UserSubscription
     */
    'store': string;
    /**
     * 
     * @type {string}
     * @memberof UserSubscription
     */
    'steamItemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserSubscription
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof UserSubscription
     */
    'description': string;
    /**
     * 
     * @type {SubscriptionPeriod}
     * @memberof UserSubscription
     */
    'period': SubscriptionPeriod;
    /**
     * 
     * @type {number}
     * @memberof UserSubscription
     */
    'tier': number;
    /**
     * 
     * @type {boolean}
     * @memberof UserSubscription
     */
    'active': boolean;
    /**
     * 
     * @type {TransactionStatus}
     * @memberof UserSubscription
     */
    'status': TransactionStatus;
    /**
     * 
     * @type {string}
     * @memberof UserSubscription
     */
    'expires': string;
    /**
     * 
     * @type {string}
     * @memberof UserSubscription
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof UserSubscription
     */
    'updated_at': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserSubscription
     */
    'licenseGroups': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UserSubscription
     */
    'isGift': boolean;
}
/**
 * 
 * @export
 * @interface Verify2FAEmailCodeResult
 */
export interface Verify2FAEmailCodeResult {
    /**
     * 
     * @type {boolean}
     * @memberof Verify2FAEmailCodeResult
     */
    'verified': boolean;
}
/**
 * 
 * @export
 * @interface Verify2FAResult
 */
export interface Verify2FAResult {
    /**
     * 
     * @type {boolean}
     * @memberof Verify2FAResult
     */
    'verified': boolean;
}
/**
 * 
 * @export
 * @interface VerifyAuthTokenResult
 */
export interface VerifyAuthTokenResult {
    /**
     * 
     * @type {boolean}
     * @memberof VerifyAuthTokenResult
     */
    'ok': boolean;
    /**
     * 
     * @type {string}
     * @memberof VerifyAuthTokenResult
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface World
 */
export interface World {
    /**
     * A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
     * @type {string}
     * @memberof World
     */
    'authorId': string;
    /**
     * 
     * @type {string}
     * @memberof World
     */
    'authorName': string;
    /**
     * 
     * @type {number}
     * @memberof World
     */
    'capacity': number;
    /**
     * 
     * @type {number}
     * @memberof World
     */
    'recommendedCapacity': number;
    /**
     * 
     * @type {string}
     * @memberof World
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof World
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof World
     */
    'favorites'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof World
     */
    'featured': boolean;
    /**
     * 
     * @type {number}
     * @memberof World
     */
    'heat': number;
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof World
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof World
     */
    'imageUrl': string;
    /**
     * Will always be an empty list when unauthenticated.
     * @type {Array<Array<any>>}
     * @memberof World
     */
    'instances'?: Array<Array<any>>;
    /**
     * 
     * @type {string}
     * @memberof World
     */
    'labsPublicationDate': string;
    /**
     * 
     * @type {string}
     * @memberof World
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof World
     */
    'namespace': string;
    /**
     * Will always be `0` when unauthenticated.
     * @type {number}
     * @memberof World
     */
    'occupants'?: number;
    /**
     * 
     * @type {string}
     * @memberof World
     */
    'organization': string;
    /**
     * 
     * @type {number}
     * @memberof World
     */
    'popularity': number;
    /**
     * 
     * @type {string}
     * @memberof World
     */
    'previewYoutubeId'?: string | null;
    /**
     * Will always be `0` when unauthenticated.
     * @type {number}
     * @memberof World
     */
    'privateOccupants'?: number;
    /**
     * Will always be `0` when unauthenticated.
     * @type {number}
     * @memberof World
     */
    'publicOccupants'?: number;
    /**
     * 
     * @type {string}
     * @memberof World
     */
    'publicationDate': string;
    /**
     * 
     * @type {ReleaseStatus}
     * @memberof World
     */
    'releaseStatus': ReleaseStatus;
    /**
     *  
     * @type {Array<string>}
     * @memberof World
     */
    'tags': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof World
     */
    'thumbnailImageUrl': string;
    /**
     * Empty if unauthenticated.
     * @type {Array<UnityPackage>}
     * @memberof World
     */
    'unityPackages'?: Array<UnityPackage>;
    /**
     * 
     * @type {string}
     * @memberof World
     */
    'updated_at': string;
    /**
     * 
     * @type {number}
     * @memberof World
     */
    'version': number;
    /**
     * 
     * @type {number}
     * @memberof World
     */
    'visits': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof World
     */
    'udonProducts'?: Array<string>;
}
/**
 * 
 * @export
 * @interface WorldMetadata
 */
export interface WorldMetadata {
    /**
     * WorldID be \"offline\" on User profiles if you are not friends with that user.
     * @type {string}
     * @memberof WorldMetadata
     */
    'id': string;
    /**
     * 
     * @type {object}
     * @memberof WorldMetadata
     */
    'metadata': object;
}
/**
 * 
 * @export
 * @interface WorldPublishStatus
 */
export interface WorldPublishStatus {
    /**
     * 
     * @type {boolean}
     * @memberof WorldPublishStatus
     */
    'canPubilsh': boolean;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Checks if a user by a given `username`, `displayName` or `email` exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the `excludeUserId` is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** `username`, `displayName` **or** `email` query parameter. Although they can be combined - in addition with `excludeUserId` (generally to exclude yourself) - to further fine-tune the search.
         * @summary Check User Exists
         * @param {string} [email] Filter by email.
         * @param {string} [displayName] Filter by displayName.
         * @param {string} [userId] Filter by UserID.
         * @param {string} [excludeUserId] Exclude by UserID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserExists: async (email?: string, displayName?: string, userId?: string, excludeUserId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/exists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (displayName !== undefined) {
                localVarQueryParameter['displayName'] = displayName;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (excludeUserId !== undefined) {
                localVarQueryParameter['excludeUserId'] = excludeUserId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
         * @summary Delete User
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/users/{userId}/delete`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid `auth` cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the `Authorization` header and set the `auth` cookie. The `auth` cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  The auth string after `Authorization: Basic {string}` is a base64-encoded string of the username and password, both individually url-encoded, and then joined with a colon.    > base64(urlencode(username):urlencode(password))  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the `auth` cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
         * @summary Login and/or Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            // authentication authHeader required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication twoFactorAuthCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalidates the login session.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
         * @summary Verify 2FA code
         * @param {TwoFactorAuthCode} [twoFactorAuthCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify2FA: async (twoFactorAuthCode?: TwoFactorAuthCode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/twofactorauth/totp/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(twoFactorAuthCode, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finishes the login sequence with an 2FA email code.
         * @summary Verify 2FA email code
         * @param {TwoFactorEmailCode} [twoFactorEmailCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify2FAEmailCode: async (twoFactorEmailCode?: TwoFactorEmailCode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/twofactorauth/emailotp/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(twoFactorEmailCode, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify whether the currently provided Auth Token is valid.
         * @summary Verify Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
         * @summary Verify 2FA code with Recovery code
         * @param {TwoFactorAuthCode} [twoFactorAuthCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyRecoveryCode: async (twoFactorAuthCode?: TwoFactorAuthCode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/twofactorauth/otp/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(twoFactorAuthCode, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Checks if a user by a given `username`, `displayName` or `email` exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the `excludeUserId` is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** `username`, `displayName` **or** `email` query parameter. Although they can be combined - in addition with `excludeUserId` (generally to exclude yourself) - to further fine-tune the search.
         * @summary Check User Exists
         * @param {string} [email] Filter by email.
         * @param {string} [displayName] Filter by displayName.
         * @param {string} [userId] Filter by UserID.
         * @param {string} [excludeUserId] Exclude by UserID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUserExists(email?: string, displayName?: string, userId?: string, excludeUserId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserExists>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUserExists(email, displayName, userId, excludeUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
         * @summary Delete User
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid `auth` cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the `Authorization` header and set the `auth` cookie. The `auth` cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  The auth string after `Authorization: Basic {string}` is a base64-encoded string of the username and password, both individually url-encoded, and then joined with a colon.    > base64(urlencode(username):urlencode(password))  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the `auth` cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
         * @summary Login and/or Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Invalidates the login session.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
         * @summary Verify 2FA code
         * @param {TwoFactorAuthCode} [twoFactorAuthCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verify2FA(twoFactorAuthCode?: TwoFactorAuthCode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Verify2FAResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verify2FA(twoFactorAuthCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finishes the login sequence with an 2FA email code.
         * @summary Verify 2FA email code
         * @param {TwoFactorEmailCode} [twoFactorEmailCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verify2FAEmailCode(twoFactorEmailCode?: TwoFactorEmailCode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Verify2FAEmailCodeResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verify2FAEmailCode(twoFactorEmailCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify whether the currently provided Auth Token is valid.
         * @summary Verify Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyAuthToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyAuthTokenResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyAuthToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
         * @summary Verify 2FA code with Recovery code
         * @param {TwoFactorAuthCode} [twoFactorAuthCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyRecoveryCode(twoFactorAuthCode?: TwoFactorAuthCode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Verify2FAResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyRecoveryCode(twoFactorAuthCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Checks if a user by a given `username`, `displayName` or `email` exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the `excludeUserId` is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** `username`, `displayName` **or** `email` query parameter. Although they can be combined - in addition with `excludeUserId` (generally to exclude yourself) - to further fine-tune the search.
         * @summary Check User Exists
         * @param {string} [email] Filter by email.
         * @param {string} [displayName] Filter by displayName.
         * @param {string} [userId] Filter by UserID.
         * @param {string} [excludeUserId] Exclude by UserID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserExists(email?: string, displayName?: string, userId?: string, excludeUserId?: string, options?: any): AxiosPromise<UserExists> {
            return localVarFp.checkUserExists(email, displayName, userId, excludeUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
         * @summary Delete User
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options?: any): AxiosPromise<CurrentUser> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid `auth` cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the `Authorization` header and set the `auth` cookie. The `auth` cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  The auth string after `Authorization: Basic {string}` is a base64-encoded string of the username and password, both individually url-encoded, and then joined with a colon.    > base64(urlencode(username):urlencode(password))  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the `auth` cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
         * @summary Login and/or Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): AxiosPromise<CurrentUser> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalidates the login session.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<Success> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
         * @summary Verify 2FA code
         * @param {TwoFactorAuthCode} [twoFactorAuthCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify2FA(twoFactorAuthCode?: TwoFactorAuthCode, options?: any): AxiosPromise<Verify2FAResult> {
            return localVarFp.verify2FA(twoFactorAuthCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Finishes the login sequence with an 2FA email code.
         * @summary Verify 2FA email code
         * @param {TwoFactorEmailCode} [twoFactorEmailCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify2FAEmailCode(twoFactorEmailCode?: TwoFactorEmailCode, options?: any): AxiosPromise<Verify2FAEmailCodeResult> {
            return localVarFp.verify2FAEmailCode(twoFactorEmailCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify whether the currently provided Auth Token is valid.
         * @summary Verify Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthToken(options?: any): AxiosPromise<VerifyAuthTokenResult> {
            return localVarFp.verifyAuthToken(options).then((request) => request(axios, basePath));
        },
        /**
         * Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
         * @summary Verify 2FA code with Recovery code
         * @param {TwoFactorAuthCode} [twoFactorAuthCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyRecoveryCode(twoFactorAuthCode?: TwoFactorAuthCode, options?: any): AxiosPromise<Verify2FAResult> {
            return localVarFp.verifyRecoveryCode(twoFactorAuthCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Checks if a user by a given `username`, `displayName` or `email` exist. This is used during registration to check if a username has already been taken, during change of displayName to check if a displayName is available, and during change of email to check if the email is already used. In the later two cases the `excludeUserId` is used to exclude oneself, otherwise the result would always be true.  It is **REQUIRED** to include **AT LEAST** `username`, `displayName` **or** `email` query parameter. Although they can be combined - in addition with `excludeUserId` (generally to exclude yourself) - to further fine-tune the search.
     * @summary Check User Exists
     * @param {string} [email] Filter by email.
     * @param {string} [displayName] Filter by displayName.
     * @param {string} [userId] Filter by UserID.
     * @param {string} [excludeUserId] Exclude by UserID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public checkUserExists(email?: string, displayName?: string, userId?: string, excludeUserId?: string, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).checkUserExists(email, displayName, userId, excludeUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
     * @summary Delete User
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public deleteUser(userId: string, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint does the following two operations:   1) Checks if you are already logged in by looking for a valid `auth` cookie. If you are have a valid auth cookie then no additional auth-related actions are taken. If you are **not** logged in then it will log you in with the `Authorization` header and set the `auth` cookie. The `auth` cookie will only be sent once.   2) If logged in, this function will also return the CurrentUser object containing detailed information about the currently logged in user.  The auth string after `Authorization: Basic {string}` is a base64-encoded string of the username and password, both individually url-encoded, and then joined with a colon.    > base64(urlencode(username):urlencode(password))  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the `auth` cookie if you are often restarting the program. The provided API libraries automatically save cookies during runtime, but does not persist during restart. While it can be fine to use username/password during development, expect in production to very fast run into the rate-limit and be temporarily blocked from making new sessions until older ones expire. The exact number of simultaneous sessions is unknown/undisclosed.
     * @summary Login and/or Get Current User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getCurrentUser(options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalidates the login session.
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public logout(options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
     * @summary Verify 2FA code
     * @param {TwoFactorAuthCode} [twoFactorAuthCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verify2FA(twoFactorAuthCode?: TwoFactorAuthCode, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).verify2FA(twoFactorAuthCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finishes the login sequence with an 2FA email code.
     * @summary Verify 2FA email code
     * @param {TwoFactorEmailCode} [twoFactorEmailCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verify2FAEmailCode(twoFactorEmailCode?: TwoFactorEmailCode, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).verify2FAEmailCode(twoFactorEmailCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify whether the currently provided Auth Token is valid.
     * @summary Verify Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verifyAuthToken(options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).verifyAuthToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
     * @summary Verify 2FA code with Recovery code
     * @param {TwoFactorAuthCode} [twoFactorAuthCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verifyRecoveryCode(twoFactorAuthCode?: TwoFactorAuthCode, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).verifyRecoveryCode(twoFactorAuthCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AvatarsApi - axios parameter creator
 * @export
 */
export const AvatarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an avatar. It\'s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
         * @summary Create Avatar
         * @param {CreateAvatarRequest} [createAvatarRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAvatar: async (createAvatarRequest?: CreateAvatarRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/avatars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAvatarRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an avatar. Notice an avatar is never fully \"deleted\", only its ReleaseStatus is set to \"hidden\" and the linked Files are deleted. The AvatarID is permanently reserved.
         * @summary Delete Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAvatar: async (avatarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'avatarId' is not null or undefined
            assertParamExists('deleteAvatar', 'avatarId', avatarId)
            const localVarPath = `/avatars/{avatarId}`
                .replace(`{${"avatarId"}}`, encodeURIComponent(String(avatarId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific Avatar.
         * @summary Get Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatar: async (avatarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'avatarId' is not null or undefined
            assertParamExists('getAvatar', 'avatarId', avatarId)
            const localVarPath = `/avatars/{avatarId}`
                .replace(`{${"avatarId"}}`, encodeURIComponent(String(avatarId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search and list favorited avatars by query filters.
         * @summary List Favorited Avatars
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {string} [userId] Target user to see information on, admin-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavoritedAvatars: async (featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/avatars/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (featured !== undefined) {
                localVarQueryParameter['featured'] = featured;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (notag !== undefined) {
                localVarQueryParameter['notag'] = notag;
            }

            if (releaseStatus !== undefined) {
                localVarQueryParameter['releaseStatus'] = releaseStatus;
            }

            if (maxUnityVersion !== undefined) {
                localVarQueryParameter['maxUnityVersion'] = maxUnityVersion;
            }

            if (minUnityVersion !== undefined) {
                localVarQueryParameter['minUnityVersion'] = minUnityVersion;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current avatar for the user. This will return an error for any other user than the one logged in.
         * @summary Get Own Avatar
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnAvatar: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getOwnAvatar', 'userId', userId)
            const localVarPath = `/users/{userId}/avatar`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
         * @summary Search Avatars
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {'me'} [user] Set to &#x60;me&#x60; for searching own avatars.
         * @param {string} [userId] Filter by UserID.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAvatars: async (featured?: boolean, sort?: SortOption, user?: 'me', userId?: string, n?: number, order?: OrderOption, offset?: number, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/avatars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (featured !== undefined) {
                localVarQueryParameter['featured'] = featured;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (notag !== undefined) {
                localVarQueryParameter['notag'] = notag;
            }

            if (releaseStatus !== undefined) {
                localVarQueryParameter['releaseStatus'] = releaseStatus;
            }

            if (maxUnityVersion !== undefined) {
                localVarQueryParameter['maxUnityVersion'] = maxUnityVersion;
            }

            if (minUnityVersion !== undefined) {
                localVarQueryParameter['minUnityVersion'] = minUnityVersion;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Switches into that avatar.
         * @summary Select Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAvatar: async (avatarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'avatarId' is not null or undefined
            assertParamExists('selectAvatar', 'avatarId', avatarId)
            const localVarPath = `/avatars/{avatarId}/select`
                .replace(`{${"avatarId"}}`, encodeURIComponent(String(avatarId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Switches into that avatar as your fallback avatar.
         * @summary Select Fallback Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectFallbackAvatar: async (avatarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'avatarId' is not null or undefined
            assertParamExists('selectFallbackAvatar', 'avatarId', avatarId)
            const localVarPath = `/avatars/{avatarId}/selectFallback`
                .replace(`{${"avatarId"}}`, encodeURIComponent(String(avatarId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update information about a specific avatar.
         * @summary Update Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {UpdateAvatarRequest} [updateAvatarRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAvatar: async (avatarId: string, updateAvatarRequest?: UpdateAvatarRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'avatarId' is not null or undefined
            assertParamExists('updateAvatar', 'avatarId', avatarId)
            const localVarPath = `/avatars/{avatarId}`
                .replace(`{${"avatarId"}}`, encodeURIComponent(String(avatarId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAvatarRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvatarsApi - functional programming interface
 * @export
 */
export const AvatarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AvatarsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an avatar. It\'s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
         * @summary Create Avatar
         * @param {CreateAvatarRequest} [createAvatarRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAvatar(createAvatarRequest?: CreateAvatarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Avatar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAvatar(createAvatarRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an avatar. Notice an avatar is never fully \"deleted\", only its ReleaseStatus is set to \"hidden\" and the linked Files are deleted. The AvatarID is permanently reserved.
         * @summary Delete Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAvatar(avatarId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Avatar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAvatar(avatarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific Avatar.
         * @summary Get Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvatar(avatarId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Avatar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvatar(avatarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search and list favorited avatars by query filters.
         * @summary List Favorited Avatars
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {string} [userId] Target user to see information on, admin-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFavoritedAvatars(featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Avatar>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFavoritedAvatars(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current avatar for the user. This will return an error for any other user than the one logged in.
         * @summary Get Own Avatar
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOwnAvatar(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Avatar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOwnAvatar(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
         * @summary Search Avatars
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {'me'} [user] Set to &#x60;me&#x60; for searching own avatars.
         * @param {string} [userId] Filter by UserID.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAvatars(featured?: boolean, sort?: SortOption, user?: 'me', userId?: string, n?: number, order?: OrderOption, offset?: number, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Avatar>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAvatars(featured, sort, user, userId, n, order, offset, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Switches into that avatar.
         * @summary Select Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectAvatar(avatarId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectAvatar(avatarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Switches into that avatar as your fallback avatar.
         * @summary Select Fallback Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selectFallbackAvatar(avatarId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selectFallbackAvatar(avatarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update information about a specific avatar.
         * @summary Update Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {UpdateAvatarRequest} [updateAvatarRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAvatar(avatarId: string, updateAvatarRequest?: UpdateAvatarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Avatar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAvatar(avatarId, updateAvatarRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AvatarsApi - factory interface
 * @export
 */
export const AvatarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AvatarsApiFp(configuration)
    return {
        /**
         * Create an avatar. It\'s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
         * @summary Create Avatar
         * @param {CreateAvatarRequest} [createAvatarRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAvatar(createAvatarRequest?: CreateAvatarRequest, options?: any): AxiosPromise<Avatar> {
            return localVarFp.createAvatar(createAvatarRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an avatar. Notice an avatar is never fully \"deleted\", only its ReleaseStatus is set to \"hidden\" and the linked Files are deleted. The AvatarID is permanently reserved.
         * @summary Delete Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAvatar(avatarId: string, options?: any): AxiosPromise<Avatar> {
            return localVarFp.deleteAvatar(avatarId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific Avatar.
         * @summary Get Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatar(avatarId: string, options?: any): AxiosPromise<Avatar> {
            return localVarFp.getAvatar(avatarId, options).then((request) => request(axios, basePath));
        },
        /**
         * Search and list favorited avatars by query filters.
         * @summary List Favorited Avatars
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {string} [userId] Target user to see information on, admin-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavoritedAvatars(featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, userId?: string, options?: any): AxiosPromise<Array<Avatar>> {
            return localVarFp.getFavoritedAvatars(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current avatar for the user. This will return an error for any other user than the one logged in.
         * @summary Get Own Avatar
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnAvatar(userId: string, options?: any): AxiosPromise<Avatar> {
            return localVarFp.getOwnAvatar(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
         * @summary Search Avatars
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {'me'} [user] Set to &#x60;me&#x60; for searching own avatars.
         * @param {string} [userId] Filter by UserID.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAvatars(featured?: boolean, sort?: SortOption, user?: 'me', userId?: string, n?: number, order?: OrderOption, offset?: number, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, options?: any): AxiosPromise<Array<Avatar>> {
            return localVarFp.searchAvatars(featured, sort, user, userId, n, order, offset, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, options).then((request) => request(axios, basePath));
        },
        /**
         * Switches into that avatar.
         * @summary Select Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectAvatar(avatarId: string, options?: any): AxiosPromise<CurrentUser> {
            return localVarFp.selectAvatar(avatarId, options).then((request) => request(axios, basePath));
        },
        /**
         * Switches into that avatar as your fallback avatar.
         * @summary Select Fallback Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectFallbackAvatar(avatarId: string, options?: any): AxiosPromise<CurrentUser> {
            return localVarFp.selectFallbackAvatar(avatarId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update information about a specific avatar.
         * @summary Update Avatar
         * @param {string} avatarId Must be a valid avatar ID.
         * @param {UpdateAvatarRequest} [updateAvatarRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAvatar(avatarId: string, updateAvatarRequest?: UpdateAvatarRequest, options?: any): AxiosPromise<Avatar> {
            return localVarFp.updateAvatar(avatarId, updateAvatarRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AvatarsApi - object-oriented interface
 * @export
 * @class AvatarsApi
 * @extends {BaseAPI}
 */
export class AvatarsApi extends BaseAPI {
    /**
     * Create an avatar. It\'s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
     * @summary Create Avatar
     * @param {CreateAvatarRequest} [createAvatarRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    public createAvatar(createAvatarRequest?: CreateAvatarRequest, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).createAvatar(createAvatarRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an avatar. Notice an avatar is never fully \"deleted\", only its ReleaseStatus is set to \"hidden\" and the linked Files are deleted. The AvatarID is permanently reserved.
     * @summary Delete Avatar
     * @param {string} avatarId Must be a valid avatar ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    public deleteAvatar(avatarId: string, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).deleteAvatar(avatarId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific Avatar.
     * @summary Get Avatar
     * @param {string} avatarId Must be a valid avatar ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    public getAvatar(avatarId: string, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).getAvatar(avatarId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search and list favorited avatars by query filters.
     * @summary List Favorited Avatars
     * @param {boolean} [featured] Filters on featured results.
     * @param {SortOption} [sort] The sort order of the results.
     * @param {number} [n] The number of objects to return.
     * @param {OrderOption} [order] Result ordering
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {string} [search] Filters by world name.
     * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
     * @param {string} [notag] Tags to exclude (comma-separated).
     * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
     * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
     * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
     * @param {string} [platform] The platform the asset supports.
     * @param {string} [userId] Target user to see information on, admin-only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    public getFavoritedAvatars(featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, userId?: string, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).getFavoritedAvatars(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current avatar for the user. This will return an error for any other user than the one logged in.
     * @summary Get Own Avatar
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    public getOwnAvatar(userId: string, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).getOwnAvatar(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
     * @summary Search Avatars
     * @param {boolean} [featured] Filters on featured results.
     * @param {SortOption} [sort] The sort order of the results.
     * @param {'me'} [user] Set to &#x60;me&#x60; for searching own avatars.
     * @param {string} [userId] Filter by UserID.
     * @param {number} [n] The number of objects to return.
     * @param {OrderOption} [order] Result ordering
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
     * @param {string} [notag] Tags to exclude (comma-separated).
     * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
     * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
     * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
     * @param {string} [platform] The platform the asset supports.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    public searchAvatars(featured?: boolean, sort?: SortOption, user?: 'me', userId?: string, n?: number, order?: OrderOption, offset?: number, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).searchAvatars(featured, sort, user, userId, n, order, offset, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Switches into that avatar.
     * @summary Select Avatar
     * @param {string} avatarId Must be a valid avatar ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    public selectAvatar(avatarId: string, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).selectAvatar(avatarId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Switches into that avatar as your fallback avatar.
     * @summary Select Fallback Avatar
     * @param {string} avatarId Must be a valid avatar ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    public selectFallbackAvatar(avatarId: string, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).selectFallbackAvatar(avatarId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update information about a specific avatar.
     * @summary Update Avatar
     * @param {string} avatarId Must be a valid avatar ID.
     * @param {UpdateAvatarRequest} [updateAvatarRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarsApi
     */
    public updateAvatar(avatarId: string, updateAvatarRequest?: UpdateAvatarRequest, options?: AxiosRequestConfig) {
        return AvatarsApiFp(this.configuration).updateAvatar(avatarId, updateAvatarRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EconomyApi - axios parameter creator
 * @export
 */
export const EconomyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of all current user subscriptions.
         * @summary Get Current Subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentSubscriptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single License Group by given ID.
         * @summary Get License Group
         * @param {string} licenseGroupId Must be a valid license group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenseGroup: async (licenseGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licenseGroupId' is not null or undefined
            assertParamExists('getLicenseGroup', 'licenseGroupId', licenseGroupId)
            const localVarPath = `/licenseGroups/{licenseGroupId}`
                .replace(`{${"licenseGroupId"}}`, encodeURIComponent(String(licenseGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single Steam transactions by ID. This returns the exact same information as `getSteamTransactions`, so no point in using this endpoint.
         * @summary Get Steam Transaction
         * @param {string} transactionId Must be a valid transaction ID.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSteamTransaction: async (transactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('getSteamTransaction', 'transactionId', transactionId)
            const localVarPath = `/Steam/transactions/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all own Steam transactions.
         * @summary List Steam Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSteamTransactions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Steam/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all existing Subscriptions. For example, \"vrchatplus-monthly\" and \"vrchatplus-yearly\".
         * @summary List Subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EconomyApi - functional programming interface
 * @export
 */
export const EconomyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EconomyApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of all current user subscriptions.
         * @summary Get Current Subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentSubscriptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserSubscription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentSubscriptions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single License Group by given ID.
         * @summary Get License Group
         * @param {string} licenseGroupId Must be a valid license group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLicenseGroup(licenseGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLicenseGroup(licenseGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single Steam transactions by ID. This returns the exact same information as `getSteamTransactions`, so no point in using this endpoint.
         * @summary Get Steam Transaction
         * @param {string} transactionId Must be a valid transaction ID.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getSteamTransaction(transactionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSteamTransaction(transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all own Steam transactions.
         * @summary List Steam Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSteamTransactions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSteamTransactions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all existing Subscriptions. For example, \"vrchatplus-monthly\" and \"vrchatplus-yearly\".
         * @summary List Subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Subscription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EconomyApi - factory interface
 * @export
 */
export const EconomyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EconomyApiFp(configuration)
    return {
        /**
         * Get a list of all current user subscriptions.
         * @summary Get Current Subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentSubscriptions(options?: any): AxiosPromise<Array<UserSubscription>> {
            return localVarFp.getCurrentSubscriptions(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single License Group by given ID.
         * @summary Get License Group
         * @param {string} licenseGroupId Must be a valid license group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenseGroup(licenseGroupId: string, options?: any): AxiosPromise<LicenseGroup> {
            return localVarFp.getLicenseGroup(licenseGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single Steam transactions by ID. This returns the exact same information as `getSteamTransactions`, so no point in using this endpoint.
         * @summary Get Steam Transaction
         * @param {string} transactionId Must be a valid transaction ID.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSteamTransaction(transactionId: string, options?: any): AxiosPromise<Transaction> {
            return localVarFp.getSteamTransaction(transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all own Steam transactions.
         * @summary List Steam Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSteamTransactions(options?: any): AxiosPromise<Array<Transaction>> {
            return localVarFp.getSteamTransactions(options).then((request) => request(axios, basePath));
        },
        /**
         * List all existing Subscriptions. For example, \"vrchatplus-monthly\" and \"vrchatplus-yearly\".
         * @summary List Subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptions(options?: any): AxiosPromise<Array<Subscription>> {
            return localVarFp.getSubscriptions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EconomyApi - object-oriented interface
 * @export
 * @class EconomyApi
 * @extends {BaseAPI}
 */
export class EconomyApi extends BaseAPI {
    /**
     * Get a list of all current user subscriptions.
     * @summary Get Current Subscriptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyApi
     */
    public getCurrentSubscriptions(options?: AxiosRequestConfig) {
        return EconomyApiFp(this.configuration).getCurrentSubscriptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single License Group by given ID.
     * @summary Get License Group
     * @param {string} licenseGroupId Must be a valid license group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyApi
     */
    public getLicenseGroup(licenseGroupId: string, options?: AxiosRequestConfig) {
        return EconomyApiFp(this.configuration).getLicenseGroup(licenseGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single Steam transactions by ID. This returns the exact same information as `getSteamTransactions`, so no point in using this endpoint.
     * @summary Get Steam Transaction
     * @param {string} transactionId Must be a valid transaction ID.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EconomyApi
     */
    public getSteamTransaction(transactionId: string, options?: AxiosRequestConfig) {
        return EconomyApiFp(this.configuration).getSteamTransaction(transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all own Steam transactions.
     * @summary List Steam Transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyApi
     */
    public getSteamTransactions(options?: AxiosRequestConfig) {
        return EconomyApiFp(this.configuration).getSteamTransactions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all existing Subscriptions. For example, \"vrchatplus-monthly\" and \"vrchatplus-yearly\".
     * @summary List Subscriptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EconomyApi
     */
    public getSubscriptions(options?: AxiosRequestConfig) {
        return EconomyApiFp(this.configuration).getSubscriptions(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FavoritesApi - axios parameter creator
 * @export
 */
export const FavoritesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new favorite.  Friend groups are named `group_0` through `group_3`. Avatar and World groups are named `avatars1` to `avatars4` and `worlds1` to `worlds4`.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
         * @summary Add Favorite
         * @param {AddFavoriteRequest} [addFavoriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFavorite: async (addFavoriteRequest?: AddFavoriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addFavoriteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clear ALL contents of a specific favorite group.
         * @summary Clear Favorite Group
         * @param {'world' | 'friend' | 'avatar'} favoriteGroupType The type of group to fetch, must be a valid FavoriteType.
         * @param {string} favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearFavoriteGroup: async (favoriteGroupType: 'world' | 'friend' | 'avatar', favoriteGroupName: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'favoriteGroupType' is not null or undefined
            assertParamExists('clearFavoriteGroup', 'favoriteGroupType', favoriteGroupType)
            // verify required parameter 'favoriteGroupName' is not null or undefined
            assertParamExists('clearFavoriteGroup', 'favoriteGroupName', favoriteGroupName)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('clearFavoriteGroup', 'userId', userId)
            const localVarPath = `/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}`
                .replace(`{${"favoriteGroupType"}}`, encodeURIComponent(String(favoriteGroupType)))
                .replace(`{${"favoriteGroupName"}}`, encodeURIComponent(String(favoriteGroupName)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return information about a specific Favorite.
         * @summary Show Favorite
         * @param {string} favoriteId Must be a valid favorite ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavorite: async (favoriteId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'favoriteId' is not null or undefined
            assertParamExists('getFavorite', 'favoriteId', favoriteId)
            const localVarPath = `/favorites/{favoriteId}`
                .replace(`{${"favoriteId"}}`, encodeURIComponent(String(favoriteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch information about a specific favorite group.
         * @summary Show Favorite Group
         * @param {'world' | 'friend' | 'avatar'} favoriteGroupType The type of group to fetch, must be a valid FavoriteType.
         * @param {string} favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavoriteGroup: async (favoriteGroupType: 'world' | 'friend' | 'avatar', favoriteGroupName: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'favoriteGroupType' is not null or undefined
            assertParamExists('getFavoriteGroup', 'favoriteGroupType', favoriteGroupType)
            // verify required parameter 'favoriteGroupName' is not null or undefined
            assertParamExists('getFavoriteGroup', 'favoriteGroupName', favoriteGroupName)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getFavoriteGroup', 'userId', userId)
            const localVarPath = `/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}`
                .replace(`{${"favoriteGroupType"}}`, encodeURIComponent(String(favoriteGroupType)))
                .replace(`{${"favoriteGroupName"}}`, encodeURIComponent(String(favoriteGroupName)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of favorite groups owned by a user. Returns the same information as `getFavoriteGroups`.
         * @summary List Favorite Groups
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [ownerId] The owner of whoms favorite groups to return. Must be a UserID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavoriteGroups: async (n?: number, offset?: number, ownerId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/favorite/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (ownerId !== undefined) {
                localVarQueryParameter['ownerId'] = ownerId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of favorites.
         * @summary List Favorites
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [type] The type of favorites to return, FavoriteType.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavorites: async (n?: number, offset?: number, type?: string, tag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a favorite from your favorites list.
         * @summary Remove Favorite
         * @param {string} favoriteId Must be a valid favorite ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFavorite: async (favoriteId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'favoriteId' is not null or undefined
            assertParamExists('removeFavorite', 'favoriteId', favoriteId)
            const localVarPath = `/favorites/{favoriteId}`
                .replace(`{${"favoriteId"}}`, encodeURIComponent(String(favoriteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update information about a specific favorite group.
         * @summary Update Favorite Group
         * @param {'world' | 'friend' | 'avatar'} favoriteGroupType The type of group to fetch, must be a valid FavoriteType.
         * @param {string} favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup.
         * @param {string} userId Must be a valid user ID.
         * @param {UpdateFavoriteGroupRequest} [updateFavoriteGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFavoriteGroup: async (favoriteGroupType: 'world' | 'friend' | 'avatar', favoriteGroupName: string, userId: string, updateFavoriteGroupRequest?: UpdateFavoriteGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'favoriteGroupType' is not null or undefined
            assertParamExists('updateFavoriteGroup', 'favoriteGroupType', favoriteGroupType)
            // verify required parameter 'favoriteGroupName' is not null or undefined
            assertParamExists('updateFavoriteGroup', 'favoriteGroupName', favoriteGroupName)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateFavoriteGroup', 'userId', userId)
            const localVarPath = `/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}`
                .replace(`{${"favoriteGroupType"}}`, encodeURIComponent(String(favoriteGroupType)))
                .replace(`{${"favoriteGroupName"}}`, encodeURIComponent(String(favoriteGroupName)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFavoriteGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FavoritesApi - functional programming interface
 * @export
 */
export const FavoritesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FavoritesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new favorite.  Friend groups are named `group_0` through `group_3`. Avatar and World groups are named `avatars1` to `avatars4` and `worlds1` to `worlds4`.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
         * @summary Add Favorite
         * @param {AddFavoriteRequest} [addFavoriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFavorite(addFavoriteRequest?: AddFavoriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Favorite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFavorite(addFavoriteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Clear ALL contents of a specific favorite group.
         * @summary Clear Favorite Group
         * @param {'world' | 'friend' | 'avatar'} favoriteGroupType The type of group to fetch, must be a valid FavoriteType.
         * @param {string} favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearFavoriteGroup(favoriteGroupType: 'world' | 'friend' | 'avatar', favoriteGroupName: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearFavoriteGroup(favoriteGroupType, favoriteGroupName, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return information about a specific Favorite.
         * @summary Show Favorite
         * @param {string} favoriteId Must be a valid favorite ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFavorite(favoriteId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Favorite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFavorite(favoriteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch information about a specific favorite group.
         * @summary Show Favorite Group
         * @param {'world' | 'friend' | 'avatar'} favoriteGroupType The type of group to fetch, must be a valid FavoriteType.
         * @param {string} favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFavoriteGroup(favoriteGroupType: 'world' | 'friend' | 'avatar', favoriteGroupName: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FavoriteGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFavoriteGroup(favoriteGroupType, favoriteGroupName, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a list of favorite groups owned by a user. Returns the same information as `getFavoriteGroups`.
         * @summary List Favorite Groups
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [ownerId] The owner of whoms favorite groups to return. Must be a UserID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFavoriteGroups(n?: number, offset?: number, ownerId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FavoriteGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFavoriteGroups(n, offset, ownerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of favorites.
         * @summary List Favorites
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [type] The type of favorites to return, FavoriteType.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFavorites(n?: number, offset?: number, type?: string, tag?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Favorite>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFavorites(n, offset, type, tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a favorite from your favorites list.
         * @summary Remove Favorite
         * @param {string} favoriteId Must be a valid favorite ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFavorite(favoriteId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFavorite(favoriteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update information about a specific favorite group.
         * @summary Update Favorite Group
         * @param {'world' | 'friend' | 'avatar'} favoriteGroupType The type of group to fetch, must be a valid FavoriteType.
         * @param {string} favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup.
         * @param {string} userId Must be a valid user ID.
         * @param {UpdateFavoriteGroupRequest} [updateFavoriteGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFavoriteGroup(favoriteGroupType: 'world' | 'friend' | 'avatar', favoriteGroupName: string, userId: string, updateFavoriteGroupRequest?: UpdateFavoriteGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFavoriteGroup(favoriteGroupType, favoriteGroupName, userId, updateFavoriteGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FavoritesApi - factory interface
 * @export
 */
export const FavoritesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FavoritesApiFp(configuration)
    return {
        /**
         * Add a new favorite.  Friend groups are named `group_0` through `group_3`. Avatar and World groups are named `avatars1` to `avatars4` and `worlds1` to `worlds4`.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
         * @summary Add Favorite
         * @param {AddFavoriteRequest} [addFavoriteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFavorite(addFavoriteRequest?: AddFavoriteRequest, options?: any): AxiosPromise<Favorite> {
            return localVarFp.addFavorite(addFavoriteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Clear ALL contents of a specific favorite group.
         * @summary Clear Favorite Group
         * @param {'world' | 'friend' | 'avatar'} favoriteGroupType The type of group to fetch, must be a valid FavoriteType.
         * @param {string} favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearFavoriteGroup(favoriteGroupType: 'world' | 'friend' | 'avatar', favoriteGroupName: string, userId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.clearFavoriteGroup(favoriteGroupType, favoriteGroupName, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return information about a specific Favorite.
         * @summary Show Favorite
         * @param {string} favoriteId Must be a valid favorite ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavorite(favoriteId: string, options?: any): AxiosPromise<Favorite> {
            return localVarFp.getFavorite(favoriteId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch information about a specific favorite group.
         * @summary Show Favorite Group
         * @param {'world' | 'friend' | 'avatar'} favoriteGroupType The type of group to fetch, must be a valid FavoriteType.
         * @param {string} favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavoriteGroup(favoriteGroupType: 'world' | 'friend' | 'avatar', favoriteGroupName: string, userId: string, options?: any): AxiosPromise<FavoriteGroup> {
            return localVarFp.getFavoriteGroup(favoriteGroupType, favoriteGroupName, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of favorite groups owned by a user. Returns the same information as `getFavoriteGroups`.
         * @summary List Favorite Groups
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [ownerId] The owner of whoms favorite groups to return. Must be a UserID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavoriteGroups(n?: number, offset?: number, ownerId?: string, options?: any): AxiosPromise<Array<FavoriteGroup>> {
            return localVarFp.getFavoriteGroups(n, offset, ownerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of favorites.
         * @summary List Favorites
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [type] The type of favorites to return, FavoriteType.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavorites(n?: number, offset?: number, type?: string, tag?: string, options?: any): AxiosPromise<Array<Favorite>> {
            return localVarFp.getFavorites(n, offset, type, tag, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a favorite from your favorites list.
         * @summary Remove Favorite
         * @param {string} favoriteId Must be a valid favorite ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFavorite(favoriteId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.removeFavorite(favoriteId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update information about a specific favorite group.
         * @summary Update Favorite Group
         * @param {'world' | 'friend' | 'avatar'} favoriteGroupType The type of group to fetch, must be a valid FavoriteType.
         * @param {string} favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup.
         * @param {string} userId Must be a valid user ID.
         * @param {UpdateFavoriteGroupRequest} [updateFavoriteGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFavoriteGroup(favoriteGroupType: 'world' | 'friend' | 'avatar', favoriteGroupName: string, userId: string, updateFavoriteGroupRequest?: UpdateFavoriteGroupRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateFavoriteGroup(favoriteGroupType, favoriteGroupName, userId, updateFavoriteGroupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FavoritesApi - object-oriented interface
 * @export
 * @class FavoritesApi
 * @extends {BaseAPI}
 */
export class FavoritesApi extends BaseAPI {
    /**
     * Add a new favorite.  Friend groups are named `group_0` through `group_3`. Avatar and World groups are named `avatars1` to `avatars4` and `worlds1` to `worlds4`.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
     * @summary Add Favorite
     * @param {AddFavoriteRequest} [addFavoriteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public addFavorite(addFavoriteRequest?: AddFavoriteRequest, options?: AxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).addFavorite(addFavoriteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clear ALL contents of a specific favorite group.
     * @summary Clear Favorite Group
     * @param {'world' | 'friend' | 'avatar'} favoriteGroupType The type of group to fetch, must be a valid FavoriteType.
     * @param {string} favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup.
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public clearFavoriteGroup(favoriteGroupType: 'world' | 'friend' | 'avatar', favoriteGroupName: string, userId: string, options?: AxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).clearFavoriteGroup(favoriteGroupType, favoriteGroupName, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return information about a specific Favorite.
     * @summary Show Favorite
     * @param {string} favoriteId Must be a valid favorite ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public getFavorite(favoriteId: string, options?: AxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).getFavorite(favoriteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch information about a specific favorite group.
     * @summary Show Favorite Group
     * @param {'world' | 'friend' | 'avatar'} favoriteGroupType The type of group to fetch, must be a valid FavoriteType.
     * @param {string} favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup.
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public getFavoriteGroup(favoriteGroupType: 'world' | 'friend' | 'avatar', favoriteGroupName: string, userId: string, options?: AxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).getFavoriteGroup(favoriteGroupType, favoriteGroupName, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of favorite groups owned by a user. Returns the same information as `getFavoriteGroups`.
     * @summary List Favorite Groups
     * @param {number} [n] The number of objects to return.
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {string} [ownerId] The owner of whoms favorite groups to return. Must be a UserID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public getFavoriteGroups(n?: number, offset?: number, ownerId?: string, options?: AxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).getFavoriteGroups(n, offset, ownerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of favorites.
     * @summary List Favorites
     * @param {number} [n] The number of objects to return.
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {string} [type] The type of favorites to return, FavoriteType.
     * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public getFavorites(n?: number, offset?: number, type?: string, tag?: string, options?: AxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).getFavorites(n, offset, type, tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a favorite from your favorites list.
     * @summary Remove Favorite
     * @param {string} favoriteId Must be a valid favorite ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public removeFavorite(favoriteId: string, options?: AxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).removeFavorite(favoriteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update information about a specific favorite group.
     * @summary Update Favorite Group
     * @param {'world' | 'friend' | 'avatar'} favoriteGroupType The type of group to fetch, must be a valid FavoriteType.
     * @param {string} favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup.
     * @param {string} userId Must be a valid user ID.
     * @param {UpdateFavoriteGroupRequest} [updateFavoriteGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public updateFavoriteGroup(favoriteGroupType: 'world' | 'friend' | 'avatar', favoriteGroupName: string, userId: string, updateFavoriteGroupRequest?: UpdateFavoriteGroupRequest, options?: AxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).updateFavoriteGroup(favoriteGroupType, favoriteGroupName, userId, updateFavoriteGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new File object
         * @summary Create File
         * @param {CreateFileRequest} [createFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile: async (createFileRequest?: CreateFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new FileVersion. Once a Version has been created, proceed to the `/file/{fileId}/{versionId}/file/start` endpoint to start a file upload.
         * @summary Create File Version
         * @param {string} fileId Must be a valid file ID.
         * @param {CreateFileVersionRequest} [createFileVersionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFileVersion: async (fileId: string, createFileVersionRequest?: CreateFileVersionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('createFileVersion', 'fileId', fileId)
            const localVarPath = `/file/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFileVersionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a File object.
         * @summary Delete File
         * @param {string} fileId Must be a valid file ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteFile', 'fileId', fileId)
            const localVarPath = `/file/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific version of a file. You can only delete the latest version.
         * @summary Delete File Version
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileVersion: async (fileId: string, versionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteFileVersion', 'fileId', fileId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('deleteFileVersion', 'versionId', versionId)
            const localVarPath = `/file/{fileId}/{versionId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the `extension` field when neccesary.
         * @summary Download File Version
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileVersion: async (fileId: string, versionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('downloadFileVersion', 'fileId', fileId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('downloadFileVersion', 'versionId', versionId)
            const localVarPath = `/file/{fileId}/{versionId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finish an upload of a FileData. This will mark it as \"complete\". After uploading the `file` for Avatars and Worlds you then have to upload a `signature` file.
         * @summary Finish FileData Upload
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {'file' | 'signature' | 'delta'} fileType Type of file.
         * @param {FinishFileDataUploadRequest} [finishFileDataUploadRequest] Please see documentation on ETag\&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag\&#39;s should NOT be present when uploading a &#x60;signature&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishFileDataUpload: async (fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', finishFileDataUploadRequest?: FinishFileDataUploadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('finishFileDataUpload', 'fileId', fileId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('finishFileDataUpload', 'versionId', versionId)
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('finishFileDataUpload', 'fileType', fileType)
            const localVarPath = `/file/{fileId}/{versionId}/{fileType}/finish`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)))
                .replace(`{${"fileType"}}`, encodeURIComponent(String(fileType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(finishFileDataUploadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows general information about the \"File\" object. Each File can have several \"Version\"\'s, and each Version can have multiple real files or \"Data\" blobs.
         * @summary Show File
         * @param {string} fileId Must be a valid file ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFile', 'fileId', fileId)
            const localVarPath = `/file/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the upload status for file upload. Can currently only be accessed when `status` is `waiting`. Trying to access it on a file version already uploaded currently times out.
         * @summary Check FileData Upload Status
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {'file' | 'signature' | 'delta'} fileType Type of file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileDataUploadStatus: async (fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFileDataUploadStatus', 'fileId', fileId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('getFileDataUploadStatus', 'versionId', versionId)
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('getFileDataUploadStatus', 'fileType', fileType)
            const localVarPath = `/file/{fileId}/{versionId}/{fileType}/status`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)))
                .replace(`{${"fileType"}}`, encodeURIComponent(String(fileType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of files
         * @summary List Files
         * @param {string} [tag] Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default.
         * @param {string} [userId] UserID, will always generate a 500 permission error.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles: async (tag?: string, userId?: string, n?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each `partNumber`. Please see AWS\'s REST documentation on \"PUT Object to S3\" on how to upload. Once all parts has been uploaded, proceed to `/finish` endpoint.  **Note:** `nextPartNumber` seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
         * @summary Start FileData Upload
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {'file' | 'signature' | 'delta'} fileType Type of file.
         * @param {number} [partNumber] The part number to start uploading. If not provided, the first part will be started.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startFileDataUpload: async (fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', partNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('startFileDataUpload', 'fileId', fileId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('startFileDataUpload', 'versionId', versionId)
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('startFileDataUpload', 'fileType', fileType)
            const localVarPath = `/file/{fileId}/{versionId}/{fileType}/start`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)))
                .replace(`{${"fileType"}}`, encodeURIComponent(String(fileType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (partNumber !== undefined) {
                localVarQueryParameter['partNumber'] = partNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new File object
         * @summary Create File
         * @param {CreateFileRequest} [createFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFile(createFileRequest?: CreateFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFile(createFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new FileVersion. Once a Version has been created, proceed to the `/file/{fileId}/{versionId}/file/start` endpoint to start a file upload.
         * @summary Create File Version
         * @param {string} fileId Must be a valid file ID.
         * @param {CreateFileVersionRequest} [createFileVersionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFileVersion(fileId: string, createFileVersionRequest?: CreateFileVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFileVersion(fileId, createFileVersionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a File object.
         * @summary Delete File
         * @param {string} fileId Must be a valid file ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific version of a file. You can only delete the latest version.
         * @summary Delete File Version
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFileVersion(fileId: string, versionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFileVersion(fileId, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the `extension` field when neccesary.
         * @summary Download File Version
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFileVersion(fileId: string, versionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileVersion(fileId, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finish an upload of a FileData. This will mark it as \"complete\". After uploading the `file` for Avatars and Worlds you then have to upload a `signature` file.
         * @summary Finish FileData Upload
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {'file' | 'signature' | 'delta'} fileType Type of file.
         * @param {FinishFileDataUploadRequest} [finishFileDataUploadRequest] Please see documentation on ETag\&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag\&#39;s should NOT be present when uploading a &#x60;signature&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async finishFileDataUpload(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', finishFileDataUploadRequest?: FinishFileDataUploadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.finishFileDataUpload(fileId, versionId, fileType, finishFileDataUploadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Shows general information about the \"File\" object. Each File can have several \"Version\"\'s, and each Version can have multiple real files or \"Data\" blobs.
         * @summary Show File
         * @param {string} fileId Must be a valid file ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFile(fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the upload status for file upload. Can currently only be accessed when `status` is `waiting`. Trying to access it on a file version already uploaded currently times out.
         * @summary Check FileData Upload Status
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {'file' | 'signature' | 'delta'} fileType Type of file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileDataUploadStatus(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileVersionUploadStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileDataUploadStatus(fileId, versionId, fileType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of files
         * @summary List Files
         * @param {string} [tag] Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default.
         * @param {string} [userId] UserID, will always generate a 500 permission error.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFiles(tag?: string, userId?: string, n?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFiles(tag, userId, n, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each `partNumber`. Please see AWS\'s REST documentation on \"PUT Object to S3\" on how to upload. Once all parts has been uploaded, proceed to `/finish` endpoint.  **Note:** `nextPartNumber` seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
         * @summary Start FileData Upload
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {'file' | 'signature' | 'delta'} fileType Type of file.
         * @param {number} [partNumber] The part number to start uploading. If not provided, the first part will be started.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startFileDataUpload(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', partNumber?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileUploadURL>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startFileDataUpload(fileId, versionId, fileType, partNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * Creates a new File object
         * @summary Create File
         * @param {CreateFileRequest} [createFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile(createFileRequest?: CreateFileRequest, options?: any): AxiosPromise<any> {
            return localVarFp.createFile(createFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new FileVersion. Once a Version has been created, proceed to the `/file/{fileId}/{versionId}/file/start` endpoint to start a file upload.
         * @summary Create File Version
         * @param {string} fileId Must be a valid file ID.
         * @param {CreateFileVersionRequest} [createFileVersionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFileVersion(fileId: string, createFileVersionRequest?: CreateFileVersionRequest, options?: any): AxiosPromise<any> {
            return localVarFp.createFileVersion(fileId, createFileVersionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a File object.
         * @summary Delete File
         * @param {string} fileId Must be a valid file ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(fileId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.deleteFile(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific version of a file. You can only delete the latest version.
         * @summary Delete File Version
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileVersion(fileId: string, versionId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteFileVersion(fileId, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the `extension` field when neccesary.
         * @summary Download File Version
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileVersion(fileId: string, versionId: number, options?: any): AxiosPromise<void> {
            return localVarFp.downloadFileVersion(fileId, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Finish an upload of a FileData. This will mark it as \"complete\". After uploading the `file` for Avatars and Worlds you then have to upload a `signature` file.
         * @summary Finish FileData Upload
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {'file' | 'signature' | 'delta'} fileType Type of file.
         * @param {FinishFileDataUploadRequest} [finishFileDataUploadRequest] Please see documentation on ETag\&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag\&#39;s should NOT be present when uploading a &#x60;signature&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishFileDataUpload(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', finishFileDataUploadRequest?: FinishFileDataUploadRequest, options?: any): AxiosPromise<any> {
            return localVarFp.finishFileDataUpload(fileId, versionId, fileType, finishFileDataUploadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Shows general information about the \"File\" object. Each File can have several \"Version\"\'s, and each Version can have multiple real files or \"Data\" blobs.
         * @summary Show File
         * @param {string} fileId Must be a valid file ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile(fileId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getFile(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the upload status for file upload. Can currently only be accessed when `status` is `waiting`. Trying to access it on a file version already uploaded currently times out.
         * @summary Check FileData Upload Status
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {'file' | 'signature' | 'delta'} fileType Type of file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileDataUploadStatus(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', options?: any): AxiosPromise<FileVersionUploadStatus> {
            return localVarFp.getFileDataUploadStatus(fileId, versionId, fileType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of files
         * @summary List Files
         * @param {string} [tag] Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default.
         * @param {string} [userId] UserID, will always generate a 500 permission error.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles(tag?: string, userId?: string, n?: number, offset?: number, options?: any): AxiosPromise<Array<any>> {
            return localVarFp.getFiles(tag, userId, n, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each `partNumber`. Please see AWS\'s REST documentation on \"PUT Object to S3\" on how to upload. Once all parts has been uploaded, proceed to `/finish` endpoint.  **Note:** `nextPartNumber` seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
         * @summary Start FileData Upload
         * @param {string} fileId Must be a valid file ID.
         * @param {number} versionId Version ID of the asset.
         * @param {'file' | 'signature' | 'delta'} fileType Type of file.
         * @param {number} [partNumber] The part number to start uploading. If not provided, the first part will be started.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startFileDataUpload(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', partNumber?: number, options?: any): AxiosPromise<FileUploadURL> {
            return localVarFp.startFileDataUpload(fileId, versionId, fileType, partNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * Creates a new File object
     * @summary Create File
     * @param {CreateFileRequest} [createFileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public createFile(createFileRequest?: CreateFileRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).createFile(createFileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new FileVersion. Once a Version has been created, proceed to the `/file/{fileId}/{versionId}/file/start` endpoint to start a file upload.
     * @summary Create File Version
     * @param {string} fileId Must be a valid file ID.
     * @param {CreateFileVersionRequest} [createFileVersionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public createFileVersion(fileId: string, createFileVersionRequest?: CreateFileVersionRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).createFileVersion(fileId, createFileVersionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a File object.
     * @summary Delete File
     * @param {string} fileId Must be a valid file ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public deleteFile(fileId: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).deleteFile(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific version of a file. You can only delete the latest version.
     * @summary Delete File Version
     * @param {string} fileId Must be a valid file ID.
     * @param {number} versionId Version ID of the asset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public deleteFileVersion(fileId: string, versionId: number, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).deleteFileVersion(fileId, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the `extension` field when neccesary.
     * @summary Download File Version
     * @param {string} fileId Must be a valid file ID.
     * @param {number} versionId Version ID of the asset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public downloadFileVersion(fileId: string, versionId: number, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).downloadFileVersion(fileId, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finish an upload of a FileData. This will mark it as \"complete\". After uploading the `file` for Avatars and Worlds you then have to upload a `signature` file.
     * @summary Finish FileData Upload
     * @param {string} fileId Must be a valid file ID.
     * @param {number} versionId Version ID of the asset.
     * @param {'file' | 'signature' | 'delta'} fileType Type of file.
     * @param {FinishFileDataUploadRequest} [finishFileDataUploadRequest] Please see documentation on ETag\&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag\&#39;s should NOT be present when uploading a &#x60;signature&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public finishFileDataUpload(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', finishFileDataUploadRequest?: FinishFileDataUploadRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).finishFileDataUpload(fileId, versionId, fileType, finishFileDataUploadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shows general information about the \"File\" object. Each File can have several \"Version\"\'s, and each Version can have multiple real files or \"Data\" blobs.
     * @summary Show File
     * @param {string} fileId Must be a valid file ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public getFile(fileId: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).getFile(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the upload status for file upload. Can currently only be accessed when `status` is `waiting`. Trying to access it on a file version already uploaded currently times out.
     * @summary Check FileData Upload Status
     * @param {string} fileId Must be a valid file ID.
     * @param {number} versionId Version ID of the asset.
     * @param {'file' | 'signature' | 'delta'} fileType Type of file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public getFileDataUploadStatus(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).getFileDataUploadStatus(fileId, versionId, fileType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of files
     * @summary List Files
     * @param {string} [tag] Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default.
     * @param {string} [userId] UserID, will always generate a 500 permission error.
     * @param {number} [n] The number of objects to return.
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public getFiles(tag?: string, userId?: string, n?: number, offset?: number, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).getFiles(tag, userId, n, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each `partNumber`. Please see AWS\'s REST documentation on \"PUT Object to S3\" on how to upload. Once all parts has been uploaded, proceed to `/finish` endpoint.  **Note:** `nextPartNumber` seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
     * @summary Start FileData Upload
     * @param {string} fileId Must be a valid file ID.
     * @param {number} versionId Version ID of the asset.
     * @param {'file' | 'signature' | 'delta'} fileType Type of file.
     * @param {number} [partNumber] The part number to start uploading. If not provided, the first part will be started.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public startFileDataUpload(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', partNumber?: number, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).startFileDataUpload(fileId, versionId, fileType, partNumber, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FriendsApi - axios parameter creator
 * @export
 */
export const FriendsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the `deleteNotification` endpoint instead.
         * @summary Delete Friend Request
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriendRequest: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteFriendRequest', 'userId', userId)
            const localVarPath = `/user/{userId}/friendRequest`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a friend request to another user.
         * @summary Send Friend Request
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friend: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('friend', 'userId', userId)
            const localVarPath = `/user/{userId}/friendRequest`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming `Notification` of type `friendRequest`, and then accepting that notification.
         * @summary Check Friend Status
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriendStatus: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getFriendStatus', 'userId', userId)
            const localVarPath = `/user/{userId}/friendStatus`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List information about friends.
         * @summary List Friends
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {number} [n] The number of objects to return.
         * @param {boolean} [offline] Returns *only* offline users if true, returns only online and active users if false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriends: async (offset?: number, n?: number, offline?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/friends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offline !== undefined) {
                localVarQueryParameter['offline'] = offline;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unfriend a user by ID.
         * @summary Unfriend
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfriend: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('unfriend', 'userId', userId)
            const localVarPath = `/auth/user/friends/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FriendsApi - functional programming interface
 * @export
 */
export const FriendsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FriendsApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the `deleteNotification` endpoint instead.
         * @summary Delete Friend Request
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFriendRequest(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFriendRequest(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send a friend request to another user.
         * @summary Send Friend Request
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async friend(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.friend(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming `Notification` of type `friendRequest`, and then accepting that notification.
         * @summary Check Friend Status
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFriendStatus(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FriendStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFriendStatus(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List information about friends.
         * @summary List Friends
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {number} [n] The number of objects to return.
         * @param {boolean} [offline] Returns *only* offline users if true, returns only online and active users if false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFriends(offset?: number, n?: number, offline?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LimitedUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFriends(offset, n, offline, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unfriend a user by ID.
         * @summary Unfriend
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfriend(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfriend(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FriendsApi - factory interface
 * @export
 */
export const FriendsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FriendsApiFp(configuration)
    return {
        /**
         * Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the `deleteNotification` endpoint instead.
         * @summary Delete Friend Request
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriendRequest(userId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.deleteFriendRequest(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a friend request to another user.
         * @summary Send Friend Request
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friend(userId: string, options?: any): AxiosPromise<Notification> {
            return localVarFp.friend(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming `Notification` of type `friendRequest`, and then accepting that notification.
         * @summary Check Friend Status
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriendStatus(userId: string, options?: any): AxiosPromise<FriendStatus> {
            return localVarFp.getFriendStatus(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * List information about friends.
         * @summary List Friends
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {number} [n] The number of objects to return.
         * @param {boolean} [offline] Returns *only* offline users if true, returns only online and active users if false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriends(offset?: number, n?: number, offline?: boolean, options?: any): AxiosPromise<Array<LimitedUser>> {
            return localVarFp.getFriends(offset, n, offline, options).then((request) => request(axios, basePath));
        },
        /**
         * Unfriend a user by ID.
         * @summary Unfriend
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfriend(userId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.unfriend(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FriendsApi - object-oriented interface
 * @export
 * @class FriendsApi
 * @extends {BaseAPI}
 */
export class FriendsApi extends BaseAPI {
    /**
     * Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the `deleteNotification` endpoint instead.
     * @summary Delete Friend Request
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public deleteFriendRequest(userId: string, options?: AxiosRequestConfig) {
        return FriendsApiFp(this.configuration).deleteFriendRequest(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send a friend request to another user.
     * @summary Send Friend Request
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public friend(userId: string, options?: AxiosRequestConfig) {
        return FriendsApiFp(this.configuration).friend(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming `Notification` of type `friendRequest`, and then accepting that notification.
     * @summary Check Friend Status
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public getFriendStatus(userId: string, options?: AxiosRequestConfig) {
        return FriendsApiFp(this.configuration).getFriendStatus(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List information about friends.
     * @summary List Friends
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {number} [n] The number of objects to return.
     * @param {boolean} [offline] Returns *only* offline users if true, returns only online and active users if false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public getFriends(offset?: number, n?: number, offline?: boolean, options?: AxiosRequestConfig) {
        return FriendsApiFp(this.configuration).getFriends(offset, n, offline, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unfriend a user by ID.
     * @summary Unfriend
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public unfriend(userId: string, options?: AxiosRequestConfig) {
        return FriendsApiFp(this.configuration).unfriend(userId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds an image to a Group gallery.
         * @summary Add Group Gallery Image
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {AddGroupGalleryImageRequest} [addGroupGalleryImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGroupGalleryImage: async (groupId: string, groupGalleryId: string, addGroupGalleryImageRequest?: AddGroupGalleryImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('addGroupGalleryImage', 'groupId', groupId)
            // verify required parameter 'groupGalleryId' is not null or undefined
            assertParamExists('addGroupGalleryImage', 'groupGalleryId', groupGalleryId)
            const localVarPath = `/groups/{groupId}/galleries/{groupGalleryId}/images`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"groupGalleryId"}}`, encodeURIComponent(String(groupGalleryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addGroupGalleryImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a Role to a Group Member
         * @summary Add Role to GroupMember
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {string} groupRoleId Must be a valid group role ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGroupMemberRole: async (groupId: string, userId: string, groupRoleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('addGroupMemberRole', 'groupId', groupId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addGroupMemberRole', 'userId', userId)
            // verify required parameter 'groupRoleId' is not null or undefined
            assertParamExists('addGroupMemberRole', 'groupRoleId', groupRoleId)
            const localVarPath = `/groups/{groupId}/members/{userId}/roles/{groupRoleId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"groupRoleId"}}`, encodeURIComponent(String(groupRoleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bans a user from a Group.
         * @summary Ban Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {BanGroupMemberRequest} [banGroupMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banGroupMember: async (groupId: string, banGroupMemberRequest?: BanGroupMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('banGroupMember', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/bans`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(banGroupMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels a request sent to join the group.
         * @summary Cancel Group Join Request
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelGroupRequest: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('cancelGroupRequest', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/requests`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
         * @summary Create Group
         * @param {CreateGroupRequest} [createGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (createGroupRequest?: CreateGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an Announcement for a Group.
         * @summary Create Group Announcement
         * @param {string} groupId Must be a valid group ID.
         * @param {CreateGroupAnnouncementRequest} [createGroupAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupAnnouncement: async (groupId: string, createGroupAnnouncementRequest?: CreateGroupAnnouncementRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('createGroupAnnouncement', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/announcement`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupAnnouncementRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a gallery for a Group.
         * @summary Create Group Gallery
         * @param {string} groupId Must be a valid group ID.
         * @param {CreateGroupGalleryRequest} [createGroupGalleryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupGallery: async (groupId: string, createGroupGalleryRequest?: CreateGroupGalleryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('createGroupGallery', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/galleries`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupGalleryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends an invite to a user to join the group.
         * @summary Invite User to Group
         * @param {string} groupId Must be a valid group ID.
         * @param {CreateGroupInviteRequest} [createGroupInviteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupInvite: async (groupId: string, createGroupInviteRequest?: CreateGroupInviteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('createGroupInvite', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/invites`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupInviteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Group role.
         * @summary Create GroupRole
         * @param {string} groupId Must be a valid group ID.
         * @param {CreateGroupRoleRequest} [createGroupRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupRole: async (groupId: string, createGroupRoleRequest?: CreateGroupRoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('createGroupRole', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/roles`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Group.
         * @summary Delete Group
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroup', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the announcement for a Group.
         * @summary Delete Group Announcement
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupAnnouncement: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroupAnnouncement', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/announcement`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a gallery for a Group.
         * @summary Delete Group Gallery
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupGallery: async (groupId: string, groupGalleryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroupGallery', 'groupId', groupId)
            // verify required parameter 'groupGalleryId' is not null or undefined
            assertParamExists('deleteGroupGallery', 'groupGalleryId', groupGalleryId)
            const localVarPath = `/groups/{groupId}/galleries/{groupGalleryId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"groupGalleryId"}}`, encodeURIComponent(String(groupGalleryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an image from a Group gallery.
         * @summary Delete Group Gallery Image
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {string} groupGalleryImageId Must be a valid group gallery image ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupGalleryImage: async (groupId: string, groupGalleryId: string, groupGalleryImageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroupGalleryImage', 'groupId', groupId)
            // verify required parameter 'groupGalleryId' is not null or undefined
            assertParamExists('deleteGroupGalleryImage', 'groupGalleryId', groupGalleryId)
            // verify required parameter 'groupGalleryImageId' is not null or undefined
            assertParamExists('deleteGroupGalleryImage', 'groupGalleryImageId', groupGalleryImageId)
            const localVarPath = `/groups/{groupId}/galleries/{groupGalleryId}/images/{groupGalleryImageId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"groupGalleryId"}}`, encodeURIComponent(String(groupGalleryId)))
                .replace(`{${"groupGalleryImageId"}}`, encodeURIComponent(String(groupGalleryImageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an Group invite sent to a User
         * @summary Delete User Invite
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupInvite: async (groupId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroupInvite', 'groupId', groupId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteGroupInvite', 'userId', userId)
            const localVarPath = `/groups/{groupId}/invites/{userId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Group Role by ID and returns the remaining roles.
         * @summary Delete Group Role
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupRoleId Must be a valid group role ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupRole: async (groupId: string, groupRoleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroupRole', 'groupId', groupId)
            // verify required parameter 'groupRoleId' is not null or undefined
            assertParamExists('deleteGroupRole', 'groupRoleId', groupRoleId)
            const localVarPath = `/groups/{groupId}/roles/{groupRoleId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"groupRoleId"}}`, encodeURIComponent(String(groupRoleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single Group by ID.
         * @summary Get Group by ID
         * @param {string} groupId Must be a valid group ID.
         * @param {boolean} [includeRoles] Include roles for the Group object. Defaults to false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: async (groupId: string, includeRoles?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroup', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (includeRoles !== undefined) {
                localVarQueryParameter['includeRoles'] = includeRoles;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except `imageId` and `imageUrl` which may be null.
         * @summary Get Group Announcement
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupAnnouncements: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupAnnouncements', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/announcement`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of audit logs for a Group.
         * @summary Get Group Audit Logs
         * @param {string} groupId Must be a valid group ID.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [startDate] The start date of the search range.
         * @param {string} [endDate] The end date of the search range.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupAuditLogs: async (groupId: string, n?: number, offset?: number, startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupAuditLogs', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/auditLogs`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of banned users for a Group.
         * @summary Get Group Bans
         * @param {string} groupId Must be a valid group ID.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupBans: async (groupId: string, n?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupBans', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/bans`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of images for a Group gallery.
         * @summary Get Group Gallery Images
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {boolean} [approved] If specified, only returns images that have been approved or not approved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupGalleryImages: async (groupId: string, groupGalleryId: string, n?: number, offset?: number, approved?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupGalleryImages', 'groupId', groupId)
            // verify required parameter 'groupGalleryId' is not null or undefined
            assertParamExists('getGroupGalleryImages', 'groupGalleryId', groupGalleryId)
            const localVarPath = `/groups/{groupId}/galleries/{groupGalleryId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"groupGalleryId"}}`, encodeURIComponent(String(groupGalleryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (approved !== undefined) {
                localVarQueryParameter['approved'] = approved;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of members that have been invited to the Group.
         * @summary Get Group Invites Sent
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupInvites: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupInvites', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/invites`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a LimitedGroup Member.
         * @summary Get Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMember: async (groupId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupMember', 'groupId', groupId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getGroupMember', 'userId', userId)
            const localVarPath = `/groups/{groupId}/members/{userId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the `myMember` field of the Group object.
         * @summary List Group Members
         * @param {string} groupId Must be a valid group ID.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {GroupSearchSort} [sort] The sort order of Group Member results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMembers: async (groupId: string, n?: number, offset?: number, sort?: GroupSearchSort, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupMembers', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/members`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a List of all possible/available permissions for a Group.
         * @summary List Group Permissions
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPermissions: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupPermissions', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/permissions`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of members that have requested to join the Group.
         * @summary Get Group Join Requests
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupRequests: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupRequests', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/requests`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Group Role by ID.
         * @summary Get Group Roles
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupRoles: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupRoles', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/roles`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Join a Group by ID and returns the member object.
         * @summary Join Group
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinGroup: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('joinGroup', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/join`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Kicks a Group Member from the Group. The current user must have the \"Remove Group Members\" permission.
         * @summary Kick Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kickGroupMember: async (groupId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('kickGroupMember', 'groupId', groupId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('kickGroupMember', 'userId', userId)
            const localVarPath = `/groups/{groupId}/members/{userId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Leave a group by ID.
         * @summary Leave Group
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGroup: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('leaveGroup', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}/leave`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a Role from a Group Member
         * @summary Remove Role from GroupMember
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {string} groupRoleId Must be a valid group role ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGroupMemberRole: async (groupId: string, userId: string, groupRoleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('removeGroupMemberRole', 'groupId', groupId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeGroupMemberRole', 'userId', userId)
            // verify required parameter 'groupRoleId' is not null or undefined
            assertParamExists('removeGroupMemberRole', 'groupRoleId', groupRoleId)
            const localVarPath = `/groups/{groupId}/members/{userId}/roles/{groupRoleId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"groupRoleId"}}`, encodeURIComponent(String(groupRoleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Responds to a Group Join Request with Accept/Deny
         * @summary Respond Group Join request
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {RespondGroupJoinRequest} [respondGroupJoinRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        respondGroupJoinRequest: async (groupId: string, userId: string, respondGroupJoinRequest?: RespondGroupJoinRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('respondGroupJoinRequest', 'groupId', groupId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('respondGroupJoinRequest', 'userId', userId)
            const localVarPath = `/groups/{groupId}/requests/{userId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(respondGroupJoinRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches Groups by name or shortCode
         * @summary Search Group
         * @param {string} [query] Query to search for, can be either Group Name or Group shortCode
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {number} [n] The number of objects to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGroups: async (query?: string, offset?: number, n?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unbans a user from a Group.
         * @summary Unban Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbanGroupMember: async (groupId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('unbanGroupMember', 'groupId', groupId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('unbanGroupMember', 'userId', userId)
            const localVarPath = `/groups/{groupId}/bans/{userId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Group and returns it.
         * @summary Update Group
         * @param {string} groupId Must be a valid group ID.
         * @param {UpdateGroupRequest} [updateGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (groupId: string, updateGroupRequest?: UpdateGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateGroup', 'groupId', groupId)
            const localVarPath = `/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a gallery for a Group.
         * @summary Update Group Gallery
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {UpdateGroupGalleryRequest} [updateGroupGalleryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupGallery: async (groupId: string, groupGalleryId: string, updateGroupGalleryRequest?: UpdateGroupGalleryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateGroupGallery', 'groupId', groupId)
            // verify required parameter 'groupGalleryId' is not null or undefined
            assertParamExists('updateGroupGallery', 'groupGalleryId', groupGalleryId)
            const localVarPath = `/groups/{groupId}/galleries/{groupGalleryId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"groupGalleryId"}}`, encodeURIComponent(String(groupGalleryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroupGalleryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Group Member
         * @summary Update Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {UpdateGroupMemberRequest} [updateGroupMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupMember: async (groupId: string, userId: string, updateGroupMemberRequest?: UpdateGroupMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateGroupMember', 'groupId', groupId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateGroupMember', 'userId', userId)
            const localVarPath = `/groups/{groupId}/members/{userId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroupMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a group role by ID.
         * @summary Update Group Role
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupRoleId Must be a valid group role ID.
         * @param {UpdateGroupRoleRequest} [updateGroupRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupRole: async (groupId: string, groupRoleId: string, updateGroupRoleRequest?: UpdateGroupRoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateGroupRole', 'groupId', groupId)
            // verify required parameter 'groupRoleId' is not null or undefined
            assertParamExists('updateGroupRole', 'groupRoleId', groupRoleId)
            const localVarPath = `/groups/{groupId}/roles/{groupRoleId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"groupRoleId"}}`, encodeURIComponent(String(groupRoleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroupRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds an image to a Group gallery.
         * @summary Add Group Gallery Image
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {AddGroupGalleryImageRequest} [addGroupGalleryImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addGroupGalleryImage(groupId: string, groupGalleryId: string, addGroupGalleryImageRequest?: AddGroupGalleryImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupGalleryImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addGroupGalleryImage(groupId, groupGalleryId, addGroupGalleryImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a Role to a Group Member
         * @summary Add Role to GroupMember
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {string} groupRoleId Must be a valid group role ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addGroupMemberRole(groupId: string, userId: string, groupRoleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addGroupMemberRole(groupId, userId, groupRoleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Bans a user from a Group.
         * @summary Ban Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {BanGroupMemberRequest} [banGroupMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async banGroupMember(groupId: string, banGroupMemberRequest?: BanGroupMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.banGroupMember(groupId, banGroupMemberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancels a request sent to join the group.
         * @summary Cancel Group Join Request
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelGroupRequest(groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelGroupRequest(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
         * @summary Create Group
         * @param {CreateGroupRequest} [createGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(createGroupRequest?: CreateGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(createGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates an Announcement for a Group.
         * @summary Create Group Announcement
         * @param {string} groupId Must be a valid group ID.
         * @param {CreateGroupAnnouncementRequest} [createGroupAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupAnnouncement(groupId: string, createGroupAnnouncementRequest?: CreateGroupAnnouncementRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupAnnouncement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroupAnnouncement(groupId, createGroupAnnouncementRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a gallery for a Group.
         * @summary Create Group Gallery
         * @param {string} groupId Must be a valid group ID.
         * @param {CreateGroupGalleryRequest} [createGroupGalleryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupGallery(groupId: string, createGroupGalleryRequest?: CreateGroupGalleryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupGallery>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroupGallery(groupId, createGroupGalleryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends an invite to a user to join the group.
         * @summary Invite User to Group
         * @param {string} groupId Must be a valid group ID.
         * @param {CreateGroupInviteRequest} [createGroupInviteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupInvite(groupId: string, createGroupInviteRequest?: CreateGroupInviteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroupInvite(groupId, createGroupInviteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Group role.
         * @summary Create GroupRole
         * @param {string} groupId Must be a valid group ID.
         * @param {CreateGroupRoleRequest} [createGroupRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupRole(groupId: string, createGroupRoleRequest?: CreateGroupRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupRole>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroupRole(groupId, createGroupRoleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a Group.
         * @summary Delete Group
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the announcement for a Group.
         * @summary Delete Group Announcement
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupAnnouncement(groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupAnnouncement(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a gallery for a Group.
         * @summary Delete Group Gallery
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupGallery(groupId: string, groupGalleryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupGallery(groupId, groupGalleryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an image from a Group gallery.
         * @summary Delete Group Gallery Image
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {string} groupGalleryImageId Must be a valid group gallery image ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupGalleryImage(groupId: string, groupGalleryId: string, groupGalleryImageId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupGalleryImage(groupId, groupGalleryId, groupGalleryImageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an Group invite sent to a User
         * @summary Delete User Invite
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupInvite(groupId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupInvite(groupId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a Group Role by ID and returns the remaining roles.
         * @summary Delete Group Role
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupRoleId Must be a valid group role ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupRole(groupId: string, groupRoleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupRole>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupRole(groupId, groupRoleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single Group by ID.
         * @summary Get Group by ID
         * @param {string} groupId Must be a valid group ID.
         * @param {boolean} [includeRoles] Include roles for the Group object. Defaults to false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroup(groupId: string, includeRoles?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroup(groupId, includeRoles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except `imageId` and `imageUrl` which may be null.
         * @summary Get Group Announcement
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupAnnouncements(groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupAnnouncement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupAnnouncements(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of audit logs for a Group.
         * @summary Get Group Audit Logs
         * @param {string} groupId Must be a valid group ID.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [startDate] The start date of the search range.
         * @param {string} [endDate] The end date of the search range.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupAuditLogs(groupId: string, n?: number, offset?: number, startDate?: string, endDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedGroupAuditLogEntryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupAuditLogs(groupId, n, offset, startDate, endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of banned users for a Group.
         * @summary Get Group Bans
         * @param {string} groupId Must be a valid group ID.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupBans(groupId: string, n?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupMember>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupBans(groupId, n, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of images for a Group gallery.
         * @summary Get Group Gallery Images
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {boolean} [approved] If specified, only returns images that have been approved or not approved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupGalleryImages(groupId: string, groupGalleryId: string, n?: number, offset?: number, approved?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupGalleryImage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupGalleryImages(groupId, groupGalleryId, n, offset, approved, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of members that have been invited to the Group.
         * @summary Get Group Invites Sent
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupInvites(groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupMember>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupInvites(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a LimitedGroup Member.
         * @summary Get Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupMember(groupId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupLimitedMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupMember(groupId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the `myMember` field of the Group object.
         * @summary List Group Members
         * @param {string} groupId Must be a valid group ID.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {GroupSearchSort} [sort] The sort order of Group Member results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupMembers(groupId: string, n?: number, offset?: number, sort?: GroupSearchSort, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupMember>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupMembers(groupId, n, offset, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a List of all possible/available permissions for a Group.
         * @summary List Group Permissions
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupPermissions(groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupPermission>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupPermissions(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of members that have requested to join the Group.
         * @summary Get Group Join Requests
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupRequests(groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupMember>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupRequests(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a Group Role by ID.
         * @summary Get Group Roles
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupRoles(groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupRole>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupRoles(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Join a Group by ID and returns the member object.
         * @summary Join Group
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinGroup(groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinGroup(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Kicks a Group Member from the Group. The current user must have the \"Remove Group Members\" permission.
         * @summary Kick Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kickGroupMember(groupId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kickGroupMember(groupId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Leave a group by ID.
         * @summary Leave Group
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaveGroup(groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaveGroup(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a Role from a Group Member
         * @summary Remove Role from GroupMember
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {string} groupRoleId Must be a valid group role ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeGroupMemberRole(groupId: string, userId: string, groupRoleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeGroupMemberRole(groupId, userId, groupRoleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Responds to a Group Join Request with Accept/Deny
         * @summary Respond Group Join request
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {RespondGroupJoinRequest} [respondGroupJoinRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async respondGroupJoinRequest(groupId: string, userId: string, respondGroupJoinRequest?: RespondGroupJoinRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.respondGroupJoinRequest(groupId, userId, respondGroupJoinRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches Groups by name or shortCode
         * @summary Search Group
         * @param {string} [query] Query to search for, can be either Group Name or Group shortCode
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {number} [n] The number of objects to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchGroups(query?: string, offset?: number, n?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LimitedGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchGroups(query, offset, n, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unbans a user from a Group.
         * @summary Unban Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unbanGroupMember(groupId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unbanGroupMember(groupId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a Group and returns it.
         * @summary Update Group
         * @param {string} groupId Must be a valid group ID.
         * @param {UpdateGroupRequest} [updateGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(groupId: string, updateGroupRequest?: UpdateGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(groupId, updateGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a gallery for a Group.
         * @summary Update Group Gallery
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {UpdateGroupGalleryRequest} [updateGroupGalleryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroupGallery(groupId: string, groupGalleryId: string, updateGroupGalleryRequest?: UpdateGroupGalleryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupGallery>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroupGallery(groupId, groupGalleryId, updateGroupGalleryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a Group Member
         * @summary Update Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {UpdateGroupMemberRequest} [updateGroupMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroupMember(groupId: string, userId: string, updateGroupMemberRequest?: UpdateGroupMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupLimitedMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroupMember(groupId, userId, updateGroupMemberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a group role by ID.
         * @summary Update Group Role
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupRoleId Must be a valid group role ID.
         * @param {UpdateGroupRoleRequest} [updateGroupRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroupRole(groupId: string, groupRoleId: string, updateGroupRoleRequest?: UpdateGroupRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupRole>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroupRole(groupId, groupRoleId, updateGroupRoleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * Adds an image to a Group gallery.
         * @summary Add Group Gallery Image
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {AddGroupGalleryImageRequest} [addGroupGalleryImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGroupGalleryImage(groupId: string, groupGalleryId: string, addGroupGalleryImageRequest?: AddGroupGalleryImageRequest, options?: any): AxiosPromise<GroupGalleryImage> {
            return localVarFp.addGroupGalleryImage(groupId, groupGalleryId, addGroupGalleryImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a Role to a Group Member
         * @summary Add Role to GroupMember
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {string} groupRoleId Must be a valid group role ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGroupMemberRole(groupId: string, userId: string, groupRoleId: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.addGroupMemberRole(groupId, userId, groupRoleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Bans a user from a Group.
         * @summary Ban Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {BanGroupMemberRequest} [banGroupMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banGroupMember(groupId: string, banGroupMemberRequest?: BanGroupMemberRequest, options?: any): AxiosPromise<GroupMember> {
            return localVarFp.banGroupMember(groupId, banGroupMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels a request sent to join the group.
         * @summary Cancel Group Join Request
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelGroupRequest(groupId: string, options?: any): AxiosPromise<void> {
            return localVarFp.cancelGroupRequest(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
         * @summary Create Group
         * @param {CreateGroupRequest} [createGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(createGroupRequest?: CreateGroupRequest, options?: any): AxiosPromise<Group> {
            return localVarFp.createGroup(createGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an Announcement for a Group.
         * @summary Create Group Announcement
         * @param {string} groupId Must be a valid group ID.
         * @param {CreateGroupAnnouncementRequest} [createGroupAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupAnnouncement(groupId: string, createGroupAnnouncementRequest?: CreateGroupAnnouncementRequest, options?: any): AxiosPromise<GroupAnnouncement> {
            return localVarFp.createGroupAnnouncement(groupId, createGroupAnnouncementRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a gallery for a Group.
         * @summary Create Group Gallery
         * @param {string} groupId Must be a valid group ID.
         * @param {CreateGroupGalleryRequest} [createGroupGalleryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupGallery(groupId: string, createGroupGalleryRequest?: CreateGroupGalleryRequest, options?: any): AxiosPromise<GroupGallery> {
            return localVarFp.createGroupGallery(groupId, createGroupGalleryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends an invite to a user to join the group.
         * @summary Invite User to Group
         * @param {string} groupId Must be a valid group ID.
         * @param {CreateGroupInviteRequest} [createGroupInviteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupInvite(groupId: string, createGroupInviteRequest?: CreateGroupInviteRequest, options?: any): AxiosPromise<void> {
            return localVarFp.createGroupInvite(groupId, createGroupInviteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Group role.
         * @summary Create GroupRole
         * @param {string} groupId Must be a valid group ID.
         * @param {CreateGroupRoleRequest} [createGroupRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupRole(groupId: string, createGroupRoleRequest?: CreateGroupRoleRequest, options?: any): AxiosPromise<GroupRole> {
            return localVarFp.createGroupRole(groupId, createGroupRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Group.
         * @summary Delete Group
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(groupId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.deleteGroup(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the announcement for a Group.
         * @summary Delete Group Announcement
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupAnnouncement(groupId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.deleteGroupAnnouncement(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a gallery for a Group.
         * @summary Delete Group Gallery
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupGallery(groupId: string, groupGalleryId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.deleteGroupGallery(groupId, groupGalleryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an image from a Group gallery.
         * @summary Delete Group Gallery Image
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {string} groupGalleryImageId Must be a valid group gallery image ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupGalleryImage(groupId: string, groupGalleryId: string, groupGalleryImageId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.deleteGroupGalleryImage(groupId, groupGalleryId, groupGalleryImageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an Group invite sent to a User
         * @summary Delete User Invite
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupInvite(groupId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGroupInvite(groupId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Group Role by ID and returns the remaining roles.
         * @summary Delete Group Role
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupRoleId Must be a valid group role ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupRole(groupId: string, groupRoleId: string, options?: any): AxiosPromise<Array<GroupRole>> {
            return localVarFp.deleteGroupRole(groupId, groupRoleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single Group by ID.
         * @summary Get Group by ID
         * @param {string} groupId Must be a valid group ID.
         * @param {boolean} [includeRoles] Include roles for the Group object. Defaults to false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup(groupId: string, includeRoles?: boolean, options?: any): AxiosPromise<Group> {
            return localVarFp.getGroup(groupId, includeRoles, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except `imageId` and `imageUrl` which may be null.
         * @summary Get Group Announcement
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupAnnouncements(groupId: string, options?: any): AxiosPromise<GroupAnnouncement> {
            return localVarFp.getGroupAnnouncements(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of audit logs for a Group.
         * @summary Get Group Audit Logs
         * @param {string} groupId Must be a valid group ID.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [startDate] The start date of the search range.
         * @param {string} [endDate] The end date of the search range.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupAuditLogs(groupId: string, n?: number, offset?: number, startDate?: string, endDate?: string, options?: any): AxiosPromise<PaginatedGroupAuditLogEntryList> {
            return localVarFp.getGroupAuditLogs(groupId, n, offset, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of banned users for a Group.
         * @summary Get Group Bans
         * @param {string} groupId Must be a valid group ID.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupBans(groupId: string, n?: number, offset?: number, options?: any): AxiosPromise<Array<GroupMember>> {
            return localVarFp.getGroupBans(groupId, n, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of images for a Group gallery.
         * @summary Get Group Gallery Images
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {boolean} [approved] If specified, only returns images that have been approved or not approved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupGalleryImages(groupId: string, groupGalleryId: string, n?: number, offset?: number, approved?: boolean, options?: any): AxiosPromise<Array<GroupGalleryImage>> {
            return localVarFp.getGroupGalleryImages(groupId, groupGalleryId, n, offset, approved, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of members that have been invited to the Group.
         * @summary Get Group Invites Sent
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupInvites(groupId: string, options?: any): AxiosPromise<Array<GroupMember>> {
            return localVarFp.getGroupInvites(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a LimitedGroup Member.
         * @summary Get Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMember(groupId: string, userId: string, options?: any): AxiosPromise<GroupLimitedMember> {
            return localVarFp.getGroupMember(groupId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the `myMember` field of the Group object.
         * @summary List Group Members
         * @param {string} groupId Must be a valid group ID.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {GroupSearchSort} [sort] The sort order of Group Member results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMembers(groupId: string, n?: number, offset?: number, sort?: GroupSearchSort, options?: any): AxiosPromise<Array<GroupMember>> {
            return localVarFp.getGroupMembers(groupId, n, offset, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a List of all possible/available permissions for a Group.
         * @summary List Group Permissions
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPermissions(groupId: string, options?: any): AxiosPromise<Array<GroupPermission>> {
            return localVarFp.getGroupPermissions(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of members that have requested to join the Group.
         * @summary Get Group Join Requests
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupRequests(groupId: string, options?: any): AxiosPromise<Array<GroupMember>> {
            return localVarFp.getGroupRequests(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a Group Role by ID.
         * @summary Get Group Roles
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupRoles(groupId: string, options?: any): AxiosPromise<Array<GroupRole>> {
            return localVarFp.getGroupRoles(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Join a Group by ID and returns the member object.
         * @summary Join Group
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinGroup(groupId: string, options?: any): AxiosPromise<GroupMember> {
            return localVarFp.joinGroup(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Kicks a Group Member from the Group. The current user must have the \"Remove Group Members\" permission.
         * @summary Kick Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kickGroupMember(groupId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.kickGroupMember(groupId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Leave a group by ID.
         * @summary Leave Group
         * @param {string} groupId Must be a valid group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGroup(groupId: string, options?: any): AxiosPromise<void> {
            return localVarFp.leaveGroup(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a Role from a Group Member
         * @summary Remove Role from GroupMember
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {string} groupRoleId Must be a valid group role ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeGroupMemberRole(groupId: string, userId: string, groupRoleId: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.removeGroupMemberRole(groupId, userId, groupRoleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Responds to a Group Join Request with Accept/Deny
         * @summary Respond Group Join request
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {RespondGroupJoinRequest} [respondGroupJoinRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        respondGroupJoinRequest(groupId: string, userId: string, respondGroupJoinRequest?: RespondGroupJoinRequest, options?: any): AxiosPromise<void> {
            return localVarFp.respondGroupJoinRequest(groupId, userId, respondGroupJoinRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches Groups by name or shortCode
         * @summary Search Group
         * @param {string} [query] Query to search for, can be either Group Name or Group shortCode
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {number} [n] The number of objects to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGroups(query?: string, offset?: number, n?: number, options?: any): AxiosPromise<Array<LimitedGroup>> {
            return localVarFp.searchGroups(query, offset, n, options).then((request) => request(axios, basePath));
        },
        /**
         * Unbans a user from a Group.
         * @summary Unban Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbanGroupMember(groupId: string, userId: string, options?: any): AxiosPromise<GroupMember> {
            return localVarFp.unbanGroupMember(groupId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Group and returns it.
         * @summary Update Group
         * @param {string} groupId Must be a valid group ID.
         * @param {UpdateGroupRequest} [updateGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(groupId: string, updateGroupRequest?: UpdateGroupRequest, options?: any): AxiosPromise<Group> {
            return localVarFp.updateGroup(groupId, updateGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a gallery for a Group.
         * @summary Update Group Gallery
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupGalleryId Must be a valid group gallery ID.
         * @param {UpdateGroupGalleryRequest} [updateGroupGalleryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupGallery(groupId: string, groupGalleryId: string, updateGroupGalleryRequest?: UpdateGroupGalleryRequest, options?: any): AxiosPromise<GroupGallery> {
            return localVarFp.updateGroupGallery(groupId, groupGalleryId, updateGroupGalleryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Group Member
         * @summary Update Group Member
         * @param {string} groupId Must be a valid group ID.
         * @param {string} userId Must be a valid user ID.
         * @param {UpdateGroupMemberRequest} [updateGroupMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupMember(groupId: string, userId: string, updateGroupMemberRequest?: UpdateGroupMemberRequest, options?: any): AxiosPromise<GroupLimitedMember> {
            return localVarFp.updateGroupMember(groupId, userId, updateGroupMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a group role by ID.
         * @summary Update Group Role
         * @param {string} groupId Must be a valid group ID.
         * @param {string} groupRoleId Must be a valid group role ID.
         * @param {UpdateGroupRoleRequest} [updateGroupRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupRole(groupId: string, groupRoleId: string, updateGroupRoleRequest?: UpdateGroupRoleRequest, options?: any): AxiosPromise<Array<GroupRole>> {
            return localVarFp.updateGroupRole(groupId, groupRoleId, updateGroupRoleRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     * Adds an image to a Group gallery.
     * @summary Add Group Gallery Image
     * @param {string} groupId Must be a valid group ID.
     * @param {string} groupGalleryId Must be a valid group gallery ID.
     * @param {AddGroupGalleryImageRequest} [addGroupGalleryImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public addGroupGalleryImage(groupId: string, groupGalleryId: string, addGroupGalleryImageRequest?: AddGroupGalleryImageRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).addGroupGalleryImage(groupId, groupGalleryId, addGroupGalleryImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a Role to a Group Member
     * @summary Add Role to GroupMember
     * @param {string} groupId Must be a valid group ID.
     * @param {string} userId Must be a valid user ID.
     * @param {string} groupRoleId Must be a valid group role ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public addGroupMemberRole(groupId: string, userId: string, groupRoleId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).addGroupMemberRole(groupId, userId, groupRoleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Bans a user from a Group.
     * @summary Ban Group Member
     * @param {string} groupId Must be a valid group ID.
     * @param {BanGroupMemberRequest} [banGroupMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public banGroupMember(groupId: string, banGroupMemberRequest?: BanGroupMemberRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).banGroupMember(groupId, banGroupMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels a request sent to join the group.
     * @summary Cancel Group Join Request
     * @param {string} groupId Must be a valid group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public cancelGroupRequest(groupId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).cancelGroupRequest(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
     * @summary Create Group
     * @param {CreateGroupRequest} [createGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public createGroup(createGroupRequest?: CreateGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createGroup(createGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an Announcement for a Group.
     * @summary Create Group Announcement
     * @param {string} groupId Must be a valid group ID.
     * @param {CreateGroupAnnouncementRequest} [createGroupAnnouncementRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public createGroupAnnouncement(groupId: string, createGroupAnnouncementRequest?: CreateGroupAnnouncementRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createGroupAnnouncement(groupId, createGroupAnnouncementRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a gallery for a Group.
     * @summary Create Group Gallery
     * @param {string} groupId Must be a valid group ID.
     * @param {CreateGroupGalleryRequest} [createGroupGalleryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public createGroupGallery(groupId: string, createGroupGalleryRequest?: CreateGroupGalleryRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createGroupGallery(groupId, createGroupGalleryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends an invite to a user to join the group.
     * @summary Invite User to Group
     * @param {string} groupId Must be a valid group ID.
     * @param {CreateGroupInviteRequest} [createGroupInviteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public createGroupInvite(groupId: string, createGroupInviteRequest?: CreateGroupInviteRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createGroupInvite(groupId, createGroupInviteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Group role.
     * @summary Create GroupRole
     * @param {string} groupId Must be a valid group ID.
     * @param {CreateGroupRoleRequest} [createGroupRoleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public createGroupRole(groupId: string, createGroupRoleRequest?: CreateGroupRoleRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createGroupRole(groupId, createGroupRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Group.
     * @summary Delete Group
     * @param {string} groupId Must be a valid group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroup(groupId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroup(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the announcement for a Group.
     * @summary Delete Group Announcement
     * @param {string} groupId Must be a valid group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroupAnnouncement(groupId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupAnnouncement(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a gallery for a Group.
     * @summary Delete Group Gallery
     * @param {string} groupId Must be a valid group ID.
     * @param {string} groupGalleryId Must be a valid group gallery ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroupGallery(groupId: string, groupGalleryId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupGallery(groupId, groupGalleryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an image from a Group gallery.
     * @summary Delete Group Gallery Image
     * @param {string} groupId Must be a valid group ID.
     * @param {string} groupGalleryId Must be a valid group gallery ID.
     * @param {string} groupGalleryImageId Must be a valid group gallery image ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroupGalleryImage(groupId: string, groupGalleryId: string, groupGalleryImageId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupGalleryImage(groupId, groupGalleryId, groupGalleryImageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an Group invite sent to a User
     * @summary Delete User Invite
     * @param {string} groupId Must be a valid group ID.
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroupInvite(groupId: string, userId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupInvite(groupId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Group Role by ID and returns the remaining roles.
     * @summary Delete Group Role
     * @param {string} groupId Must be a valid group ID.
     * @param {string} groupRoleId Must be a valid group role ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroupRole(groupId: string, groupRoleId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupRole(groupId, groupRoleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single Group by ID.
     * @summary Get Group by ID
     * @param {string} groupId Must be a valid group ID.
     * @param {boolean} [includeRoles] Include roles for the Group object. Defaults to false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroup(groupId: string, includeRoles?: boolean, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroup(groupId, includeRoles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except `imageId` and `imageUrl` which may be null.
     * @summary Get Group Announcement
     * @param {string} groupId Must be a valid group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupAnnouncements(groupId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupAnnouncements(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of audit logs for a Group.
     * @summary Get Group Audit Logs
     * @param {string} groupId Must be a valid group ID.
     * @param {number} [n] The number of objects to return.
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {string} [startDate] The start date of the search range.
     * @param {string} [endDate] The end date of the search range.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupAuditLogs(groupId: string, n?: number, offset?: number, startDate?: string, endDate?: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupAuditLogs(groupId, n, offset, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of banned users for a Group.
     * @summary Get Group Bans
     * @param {string} groupId Must be a valid group ID.
     * @param {number} [n] The number of objects to return.
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupBans(groupId: string, n?: number, offset?: number, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupBans(groupId, n, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of images for a Group gallery.
     * @summary Get Group Gallery Images
     * @param {string} groupId Must be a valid group ID.
     * @param {string} groupGalleryId Must be a valid group gallery ID.
     * @param {number} [n] The number of objects to return.
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {boolean} [approved] If specified, only returns images that have been approved or not approved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupGalleryImages(groupId: string, groupGalleryId: string, n?: number, offset?: number, approved?: boolean, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupGalleryImages(groupId, groupGalleryId, n, offset, approved, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of members that have been invited to the Group.
     * @summary Get Group Invites Sent
     * @param {string} groupId Must be a valid group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupInvites(groupId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupInvites(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a LimitedGroup Member.
     * @summary Get Group Member
     * @param {string} groupId Must be a valid group ID.
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupMember(groupId: string, userId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupMember(groupId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the `myMember` field of the Group object.
     * @summary List Group Members
     * @param {string} groupId Must be a valid group ID.
     * @param {number} [n] The number of objects to return.
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {GroupSearchSort} [sort] The sort order of Group Member results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupMembers(groupId: string, n?: number, offset?: number, sort?: GroupSearchSort, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupMembers(groupId, n, offset, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a List of all possible/available permissions for a Group.
     * @summary List Group Permissions
     * @param {string} groupId Must be a valid group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupPermissions(groupId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupPermissions(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of members that have requested to join the Group.
     * @summary Get Group Join Requests
     * @param {string} groupId Must be a valid group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupRequests(groupId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupRequests(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a Group Role by ID.
     * @summary Get Group Roles
     * @param {string} groupId Must be a valid group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupRoles(groupId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupRoles(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Join a Group by ID and returns the member object.
     * @summary Join Group
     * @param {string} groupId Must be a valid group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public joinGroup(groupId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).joinGroup(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Kicks a Group Member from the Group. The current user must have the \"Remove Group Members\" permission.
     * @summary Kick Group Member
     * @param {string} groupId Must be a valid group ID.
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public kickGroupMember(groupId: string, userId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).kickGroupMember(groupId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Leave a group by ID.
     * @summary Leave Group
     * @param {string} groupId Must be a valid group ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public leaveGroup(groupId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).leaveGroup(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a Role from a Group Member
     * @summary Remove Role from GroupMember
     * @param {string} groupId Must be a valid group ID.
     * @param {string} userId Must be a valid user ID.
     * @param {string} groupRoleId Must be a valid group role ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public removeGroupMemberRole(groupId: string, userId: string, groupRoleId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).removeGroupMemberRole(groupId, userId, groupRoleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Responds to a Group Join Request with Accept/Deny
     * @summary Respond Group Join request
     * @param {string} groupId Must be a valid group ID.
     * @param {string} userId Must be a valid user ID.
     * @param {RespondGroupJoinRequest} [respondGroupJoinRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public respondGroupJoinRequest(groupId: string, userId: string, respondGroupJoinRequest?: RespondGroupJoinRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).respondGroupJoinRequest(groupId, userId, respondGroupJoinRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches Groups by name or shortCode
     * @summary Search Group
     * @param {string} [query] Query to search for, can be either Group Name or Group shortCode
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {number} [n] The number of objects to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public searchGroups(query?: string, offset?: number, n?: number, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).searchGroups(query, offset, n, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unbans a user from a Group.
     * @summary Unban Group Member
     * @param {string} groupId Must be a valid group ID.
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public unbanGroupMember(groupId: string, userId: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).unbanGroupMember(groupId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Group and returns it.
     * @summary Update Group
     * @param {string} groupId Must be a valid group ID.
     * @param {UpdateGroupRequest} [updateGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public updateGroup(groupId: string, updateGroupRequest?: UpdateGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateGroup(groupId, updateGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a gallery for a Group.
     * @summary Update Group Gallery
     * @param {string} groupId Must be a valid group ID.
     * @param {string} groupGalleryId Must be a valid group gallery ID.
     * @param {UpdateGroupGalleryRequest} [updateGroupGalleryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public updateGroupGallery(groupId: string, groupGalleryId: string, updateGroupGalleryRequest?: UpdateGroupGalleryRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateGroupGallery(groupId, groupGalleryId, updateGroupGalleryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Group Member
     * @summary Update Group Member
     * @param {string} groupId Must be a valid group ID.
     * @param {string} userId Must be a valid user ID.
     * @param {UpdateGroupMemberRequest} [updateGroupMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public updateGroupMember(groupId: string, userId: string, updateGroupMemberRequest?: UpdateGroupMemberRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateGroupMember(groupId, userId, updateGroupMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a group role by ID.
     * @summary Update Group Role
     * @param {string} groupId Must be a valid group ID.
     * @param {string} groupRoleId Must be a valid group role ID.
     * @param {UpdateGroupRoleRequest} [updateGroupRoleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public updateGroupRole(groupId: string, groupRoleId: string, updateGroupRoleRequest?: UpdateGroupRoleRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateGroupRole(groupId, groupRoleId, updateGroupRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InstancesApi - axios parameter creator
 * @export
 */
export const InstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \"null\"!
         * @summary Get Instance
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: async (worldId: string, instanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worldId' is not null or undefined
            assertParamExists('getInstance', 'worldId', worldId)
            // verify required parameter 'instanceId' is not null or undefined
            assertParamExists('getInstance', 'instanceId', instanceId)
            const localVarPath = `/instances/{worldId}:{instanceId}`
                .replace(`{${"worldId"}}`, encodeURIComponent(String(worldId)))
                .replace(`{${"instanceId"}}`, encodeURIComponent(String(instanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.
         * @summary Get Instance By Short Name
         * @param {string} shortName Must be a valid instance short name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceByShortName: async (shortName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('getInstanceByShortName', 'shortName', shortName)
            const localVarPath = `/instances/s/{shortName}`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an instance short name.
         * @summary Get Instance Short Name
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShortName: async (worldId: string, instanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worldId' is not null or undefined
            assertParamExists('getShortName', 'worldId', worldId)
            // verify required parameter 'instanceId' is not null or undefined
            assertParamExists('getShortName', 'instanceId', instanceId)
            const localVarPath = `/instances/{worldId}:{instanceId}/shortName`
                .replace(`{${"worldId"}}`, encodeURIComponent(String(worldId)))
                .replace(`{${"instanceId"}}`, encodeURIComponent(String(instanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends an invite to the instance to yourself.
         * @summary Send Self Invite
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSelfInvite: async (worldId: string, instanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worldId' is not null or undefined
            assertParamExists('sendSelfInvite', 'worldId', worldId)
            // verify required parameter 'instanceId' is not null or undefined
            assertParamExists('sendSelfInvite', 'instanceId', instanceId)
            const localVarPath = `/instances/{worldId}:{instanceId}/invite`
                .replace(`{${"worldId"}}`, encodeURIComponent(String(worldId)))
                .replace(`{${"instanceId"}}`, encodeURIComponent(String(instanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstancesApi - functional programming interface
 * @export
 */
export const InstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \"null\"!
         * @summary Get Instance
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstance(worldId: string, instanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Instance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstance(worldId, instanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.
         * @summary Get Instance By Short Name
         * @param {string} shortName Must be a valid instance short name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstanceByShortName(shortName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Instance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstanceByShortName(shortName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns an instance short name.
         * @summary Get Instance Short Name
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShortName(worldId: string, instanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceShortNameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShortName(worldId, instanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends an invite to the instance to yourself.
         * @summary Send Self Invite
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendSelfInvite(worldId: string, instanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendSelfInvite(worldId, instanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstancesApi - factory interface
 * @export
 */
export const InstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstancesApiFp(configuration)
    return {
        /**
         * Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \"null\"!
         * @summary Get Instance
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance(worldId: string, instanceId: string, options?: any): AxiosPromise<Instance> {
            return localVarFp.getInstance(worldId, instanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.
         * @summary Get Instance By Short Name
         * @param {string} shortName Must be a valid instance short name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceByShortName(shortName: string, options?: any): AxiosPromise<Instance> {
            return localVarFp.getInstanceByShortName(shortName, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an instance short name.
         * @summary Get Instance Short Name
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShortName(worldId: string, instanceId: string, options?: any): AxiosPromise<InstanceShortNameResponse> {
            return localVarFp.getShortName(worldId, instanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends an invite to the instance to yourself.
         * @summary Send Self Invite
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSelfInvite(worldId: string, instanceId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.sendSelfInvite(worldId, instanceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InstancesApi - object-oriented interface
 * @export
 * @class InstancesApi
 * @extends {BaseAPI}
 */
export class InstancesApi extends BaseAPI {
    /**
     * Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.  If an invalid instanceId is provided, this endpoint will simply return \"null\"!
     * @summary Get Instance
     * @param {string} worldId Must be a valid world ID.
     * @param {string} instanceId Must be a valid instance ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public getInstance(worldId: string, instanceId: string, options?: AxiosRequestConfig) {
        return InstancesApiFp(this.configuration).getInstance(worldId, instanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.
     * @summary Get Instance By Short Name
     * @param {string} shortName Must be a valid instance short name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public getInstanceByShortName(shortName: string, options?: AxiosRequestConfig) {
        return InstancesApiFp(this.configuration).getInstanceByShortName(shortName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an instance short name.
     * @summary Get Instance Short Name
     * @param {string} worldId Must be a valid world ID.
     * @param {string} instanceId Must be a valid instance ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public getShortName(worldId: string, instanceId: string, options?: AxiosRequestConfig) {
        return InstancesApiFp(this.configuration).getShortName(worldId, instanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends an invite to the instance to yourself.
     * @summary Send Self Invite
     * @param {string} worldId Must be a valid world ID.
     * @param {string} instanceId Must be a valid instance ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    public sendSelfInvite(worldId: string, instanceId: string, options?: AxiosRequestConfig) {
        return InstancesApiFp(this.configuration).sendSelfInvite(worldId, instanceId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InviteApi - axios parameter creator
 * @export
 */
export const InviteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single Invite Message. This returns the exact same information but less than `getInviteMessages`. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite
         * @summary Get Invite Message
         * @param {string} userId Must be a valid user ID.
         * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
         * @param {number} slot The message slot to fetch of a given message type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInviteMessage: async (userId: string, messageType: InviteMessageType, slot: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getInviteMessage', 'userId', userId)
            // verify required parameter 'messageType' is not null or undefined
            assertParamExists('getInviteMessage', 'messageType', messageType)
            // verify required parameter 'slot' is not null or undefined
            assertParamExists('getInviteMessage', 'slot', slot)
            const localVarPath = `/message/{userId}/{messageType}/{slot}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"messageType"}}`, encodeURIComponent(String(messageType)))
                .replace(`{${"slot"}}`, encodeURIComponent(String(slot)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite
         * @summary List Invite Messages
         * @param {string} userId Must be a valid user ID.
         * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInviteMessages: async (userId: string, messageType: InviteMessageType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getInviteMessages', 'userId', userId)
            // verify required parameter 'messageType' is not null or undefined
            assertParamExists('getInviteMessages', 'messageType', messageType)
            const localVarPath = `/message/{userId}/{messageType}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"messageType"}}`, encodeURIComponent(String(messageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends self an invite to an instance
         * @summary Invite Myself To Instance
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMyselfTo: async (worldId: string, instanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worldId' is not null or undefined
            assertParamExists('inviteMyselfTo', 'worldId', worldId)
            // verify required parameter 'instanceId' is not null or undefined
            assertParamExists('inviteMyselfTo', 'instanceId', instanceId)
            const localVarPath = `/invite/myself/to/{worldId}:{instanceId}`
                .replace(`{${"worldId"}}`, encodeURIComponent(String(worldId)))
                .replace(`{${"instanceId"}}`, encodeURIComponent(String(instanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends an invite to a user. Returns the Notification of type `invite` that was sent.
         * @summary Invite User
         * @param {string} userId Must be a valid user ID.
         * @param {InviteRequest} [inviteRequest] Slot number of the Invite Message to use when inviting a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser: async (userId: string, inviteRequest?: InviteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('inviteUser', 'userId', userId)
            const localVarPath = `/invite/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inviteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requests an invite from a user. Returns the Notification of type `requestInvite` that was sent.
         * @summary Request Invite
         * @param {string} userId Must be a valid user ID.
         * @param {RequestInviteRequest} [requestInviteRequest] Slot number of the Request Message to use when request an invite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestInvite: async (userId: string, requestInviteRequest?: RequestInviteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('requestInvite', 'userId', userId)
            const localVarPath = `/requestInvite/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestInviteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \"Too Fast Error\".  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
         * @summary Reset Invite Message
         * @param {string} userId Must be a valid user ID.
         * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
         * @param {number} slot The message slot to fetch of a given message type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetInviteMessage: async (userId: string, messageType: InviteMessageType, slot: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('resetInviteMessage', 'userId', userId)
            // verify required parameter 'messageType' is not null or undefined
            assertParamExists('resetInviteMessage', 'messageType', messageType)
            // verify required parameter 'slot' is not null or undefined
            assertParamExists('resetInviteMessage', 'slot', slot)
            const localVarPath = `/message/{userId}/{messageType}/{slot}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"messageType"}}`, encodeURIComponent(String(messageType)))
                .replace(`{${"slot"}}`, encodeURIComponent(String(slot)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Respond to an invite request by sending a world invite to the requesting user. `:notificationId` is the ID of the requesting notification.
         * @summary Respond Invite
         * @param {string} notificationId Must be a valid notification ID.
         * @param {InviteResponse} [inviteResponse] Slot number of the Response Message to use when responding to a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        respondInvite: async (notificationId: string, inviteResponse?: InviteResponse, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('respondInvite', 'notificationId', notificationId)
            const localVarPath = `/invite/{notificationId}/response`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inviteResponse, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \"Too Fast Error\".  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite
         * @summary Update Invite Message
         * @param {string} userId Must be a valid user ID.
         * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
         * @param {number} slot The message slot to fetch of a given message type.
         * @param {UpdateInviteMessageRequest} [updateInviteMessageRequest] Message of what to set the invite message to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInviteMessage: async (userId: string, messageType: InviteMessageType, slot: number, updateInviteMessageRequest?: UpdateInviteMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateInviteMessage', 'userId', userId)
            // verify required parameter 'messageType' is not null or undefined
            assertParamExists('updateInviteMessage', 'messageType', messageType)
            // verify required parameter 'slot' is not null or undefined
            assertParamExists('updateInviteMessage', 'slot', slot)
            const localVarPath = `/message/{userId}/{messageType}/{slot}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"messageType"}}`, encodeURIComponent(String(messageType)))
                .replace(`{${"slot"}}`, encodeURIComponent(String(slot)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateInviteMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InviteApi - functional programming interface
 * @export
 */
export const InviteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InviteApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single Invite Message. This returns the exact same information but less than `getInviteMessages`. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite
         * @summary Get Invite Message
         * @param {string} userId Must be a valid user ID.
         * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
         * @param {number} slot The message slot to fetch of a given message type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInviteMessage(userId: string, messageType: InviteMessageType, slot: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InviteMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInviteMessage(userId, messageType, slot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite
         * @summary List Invite Messages
         * @param {string} userId Must be a valid user ID.
         * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInviteMessages(userId: string, messageType: InviteMessageType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InviteMessage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInviteMessages(userId, messageType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends self an invite to an instance
         * @summary Invite Myself To Instance
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteMyselfTo(worldId: string, instanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SentNotification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteMyselfTo(worldId, instanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends an invite to a user. Returns the Notification of type `invite` that was sent.
         * @summary Invite User
         * @param {string} userId Must be a valid user ID.
         * @param {InviteRequest} [inviteRequest] Slot number of the Invite Message to use when inviting a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteUser(userId: string, inviteRequest?: InviteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SentNotification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteUser(userId, inviteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requests an invite from a user. Returns the Notification of type `requestInvite` that was sent.
         * @summary Request Invite
         * @param {string} userId Must be a valid user ID.
         * @param {RequestInviteRequest} [requestInviteRequest] Slot number of the Request Message to use when request an invite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestInvite(userId: string, requestInviteRequest?: RequestInviteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestInvite(userId, requestInviteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \"Too Fast Error\".  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
         * @summary Reset Invite Message
         * @param {string} userId Must be a valid user ID.
         * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
         * @param {number} slot The message slot to fetch of a given message type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetInviteMessage(userId: string, messageType: InviteMessageType, slot: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InviteMessage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetInviteMessage(userId, messageType, slot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Respond to an invite request by sending a world invite to the requesting user. `:notificationId` is the ID of the requesting notification.
         * @summary Respond Invite
         * @param {string} notificationId Must be a valid notification ID.
         * @param {InviteResponse} [inviteResponse] Slot number of the Response Message to use when responding to a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async respondInvite(notificationId: string, inviteResponse?: InviteResponse, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.respondInvite(notificationId, inviteResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \"Too Fast Error\".  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite
         * @summary Update Invite Message
         * @param {string} userId Must be a valid user ID.
         * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
         * @param {number} slot The message slot to fetch of a given message type.
         * @param {UpdateInviteMessageRequest} [updateInviteMessageRequest] Message of what to set the invite message to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInviteMessage(userId: string, messageType: InviteMessageType, slot: number, updateInviteMessageRequest?: UpdateInviteMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InviteMessage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInviteMessage(userId, messageType, slot, updateInviteMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InviteApi - factory interface
 * @export
 */
export const InviteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InviteApiFp(configuration)
    return {
        /**
         * Returns a single Invite Message. This returns the exact same information but less than `getInviteMessages`. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite
         * @summary Get Invite Message
         * @param {string} userId Must be a valid user ID.
         * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
         * @param {number} slot The message slot to fetch of a given message type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInviteMessage(userId: string, messageType: InviteMessageType, slot: number, options?: any): AxiosPromise<InviteMessage> {
            return localVarFp.getInviteMessage(userId, messageType, slot, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite
         * @summary List Invite Messages
         * @param {string} userId Must be a valid user ID.
         * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInviteMessages(userId: string, messageType: InviteMessageType, options?: any): AxiosPromise<Array<InviteMessage>> {
            return localVarFp.getInviteMessages(userId, messageType, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends self an invite to an instance
         * @summary Invite Myself To Instance
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMyselfTo(worldId: string, instanceId: string, options?: any): AxiosPromise<SentNotification> {
            return localVarFp.inviteMyselfTo(worldId, instanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends an invite to a user. Returns the Notification of type `invite` that was sent.
         * @summary Invite User
         * @param {string} userId Must be a valid user ID.
         * @param {InviteRequest} [inviteRequest] Slot number of the Invite Message to use when inviting a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser(userId: string, inviteRequest?: InviteRequest, options?: any): AxiosPromise<SentNotification> {
            return localVarFp.inviteUser(userId, inviteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Requests an invite from a user. Returns the Notification of type `requestInvite` that was sent.
         * @summary Request Invite
         * @param {string} userId Must be a valid user ID.
         * @param {RequestInviteRequest} [requestInviteRequest] Slot number of the Request Message to use when request an invite.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestInvite(userId: string, requestInviteRequest?: RequestInviteRequest, options?: any): AxiosPromise<Notification> {
            return localVarFp.requestInvite(userId, requestInviteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \"Too Fast Error\".  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
         * @summary Reset Invite Message
         * @param {string} userId Must be a valid user ID.
         * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
         * @param {number} slot The message slot to fetch of a given message type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetInviteMessage(userId: string, messageType: InviteMessageType, slot: number, options?: any): AxiosPromise<Array<InviteMessage>> {
            return localVarFp.resetInviteMessage(userId, messageType, slot, options).then((request) => request(axios, basePath));
        },
        /**
         * Respond to an invite request by sending a world invite to the requesting user. `:notificationId` is the ID of the requesting notification.
         * @summary Respond Invite
         * @param {string} notificationId Must be a valid notification ID.
         * @param {InviteResponse} [inviteResponse] Slot number of the Response Message to use when responding to a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        respondInvite(notificationId: string, inviteResponse?: InviteResponse, options?: any): AxiosPromise<Notification> {
            return localVarFp.respondInvite(notificationId, inviteResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \"Too Fast Error\".  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite
         * @summary Update Invite Message
         * @param {string} userId Must be a valid user ID.
         * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
         * @param {number} slot The message slot to fetch of a given message type.
         * @param {UpdateInviteMessageRequest} [updateInviteMessageRequest] Message of what to set the invite message to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInviteMessage(userId: string, messageType: InviteMessageType, slot: number, updateInviteMessageRequest?: UpdateInviteMessageRequest, options?: any): AxiosPromise<Array<InviteMessage>> {
            return localVarFp.updateInviteMessage(userId, messageType, slot, updateInviteMessageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InviteApi - object-oriented interface
 * @export
 * @class InviteApi
 * @extends {BaseAPI}
 */
export class InviteApi extends BaseAPI {
    /**
     * Returns a single Invite Message. This returns the exact same information but less than `getInviteMessages`. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite
     * @summary Get Invite Message
     * @param {string} userId Must be a valid user ID.
     * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
     * @param {number} slot The message slot to fetch of a given message type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    public getInviteMessage(userId: string, messageType: InviteMessageType, slot: number, options?: AxiosRequestConfig) {
        return InviteApiFp(this.configuration).getInviteMessage(userId, messageType, slot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the users Invite Messages. Admin Credentials are required to view messages of other users!  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite
     * @summary List Invite Messages
     * @param {string} userId Must be a valid user ID.
     * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    public getInviteMessages(userId: string, messageType: InviteMessageType, options?: AxiosRequestConfig) {
        return InviteApiFp(this.configuration).getInviteMessages(userId, messageType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends self an invite to an instance
     * @summary Invite Myself To Instance
     * @param {string} worldId Must be a valid world ID.
     * @param {string} instanceId Must be a valid instance ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    public inviteMyselfTo(worldId: string, instanceId: string, options?: AxiosRequestConfig) {
        return InviteApiFp(this.configuration).inviteMyselfTo(worldId, instanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends an invite to a user. Returns the Notification of type `invite` that was sent.
     * @summary Invite User
     * @param {string} userId Must be a valid user ID.
     * @param {InviteRequest} [inviteRequest] Slot number of the Invite Message to use when inviting a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    public inviteUser(userId: string, inviteRequest?: InviteRequest, options?: AxiosRequestConfig) {
        return InviteApiFp(this.configuration).inviteUser(userId, inviteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requests an invite from a user. Returns the Notification of type `requestInvite` that was sent.
     * @summary Request Invite
     * @param {string} userId Must be a valid user ID.
     * @param {RequestInviteRequest} [requestInviteRequest] Slot number of the Request Message to use when request an invite.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    public requestInvite(userId: string, requestInviteRequest?: RequestInviteRequest, options?: AxiosRequestConfig) {
        return InviteApiFp(this.configuration).requestInvite(userId, requestInviteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resets a single Invite Message back to its original message, and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Resetting a message respects the rate-limit, so it is not possible to reset within the 60 minutes countdown. Resetting it does however not set the rate-limit to 60 like when editing it. It is possible to edit it right after resetting it. Trying to edit a message before the cooldown timer expires results in a 429 \"Too Fast Error\".  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite  The DELETE endpoint does not have/require any request body.
     * @summary Reset Invite Message
     * @param {string} userId Must be a valid user ID.
     * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
     * @param {number} slot The message slot to fetch of a given message type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    public resetInviteMessage(userId: string, messageType: InviteMessageType, slot: number, options?: AxiosRequestConfig) {
        return InviteApiFp(this.configuration).resetInviteMessage(userId, messageType, slot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Respond to an invite request by sending a world invite to the requesting user. `:notificationId` is the ID of the requesting notification.
     * @summary Respond Invite
     * @param {string} notificationId Must be a valid notification ID.
     * @param {InviteResponse} [inviteResponse] Slot number of the Response Message to use when responding to a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    public respondInvite(notificationId: string, inviteResponse?: InviteResponse, options?: AxiosRequestConfig) {
        return InviteApiFp(this.configuration).respondInvite(notificationId, inviteResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a single Invite Message and then returns a list of all of them. Admin Credentials are required to update messages of other users!  Updating a message automatically sets the cooldown timer to 60 minutes. Trying to edit a message before the cooldown timer expires results in a 429 \"Too Fast Error\".  Message type refers to a different collection of messages, used during different types of responses.  * `message` = Message during a normal invite * `response` = Message when replying to a message * `request` = Message when requesting an invite * `requestResponse` = Message when replying to a request for invite
     * @summary Update Invite Message
     * @param {string} userId Must be a valid user ID.
     * @param {InviteMessageType} messageType The type of message to fetch, must be a valid InviteMessageType.
     * @param {number} slot The message slot to fetch of a given message type.
     * @param {UpdateInviteMessageRequest} [updateInviteMessageRequest] Message of what to set the invite message to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    public updateInviteMessage(userId: string, messageType: InviteMessageType, slot: number, updateInviteMessageRequest?: UpdateInviteMessageRequest, options?: AxiosRequestConfig) {
        return InviteApiFp(this.configuration).updateInviteMessage(userId, messageType, slot, updateInviteMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept a friend request by notification `frq_` ID. Friend requests can be found using the NotificationsAPI `getNotifications` by filtering of type `friendRequest`.
         * @summary Accept Friend Request
         * @param {string} notificationId Must be a valid notification ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptFriendRequest: async (notificationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('acceptFriendRequest', 'notificationId', notificationId)
            const localVarPath = `/auth/user/notifications/{notificationId}/accept`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clear **all** notifications.
         * @summary Clear All Notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearNotifications: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/notifications/clear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a notification.
         * @summary Delete Notification
         * @param {string} notificationId Must be a valid notification ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification: async (notificationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('deleteNotification', 'notificationId', notificationId)
            const localVarPath = `/auth/user/notifications/{notificationId}/hide`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all of the current user\'s notifications.
         * @summary List Notifications
         * @param {string} [type] Only send notifications of this type (can use &#x60;all&#x60; for all). This parameter no longer does anything, and is deprecated.
         * @param {boolean} [sent] Return notifications sent by the user. Must be false or omitted.
         * @param {boolean} [hidden] Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;.
         * @param {string} [after] Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotifications: async (type?: string, sent?: boolean, hidden?: boolean, after?: string, n?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (sent !== undefined) {
                localVarQueryParameter['sent'] = sent;
            }

            if (hidden !== undefined) {
                localVarQueryParameter['hidden'] = hidden;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark a notification as seen.
         * @summary Mark Notification As Read
         * @param {string} notificationId Must be a valid notification ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markNotificationAsRead: async (notificationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('markNotificationAsRead', 'notificationId', notificationId)
            const localVarPath = `/auth/user/notifications/{notificationId}/see`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Accept a friend request by notification `frq_` ID. Friend requests can be found using the NotificationsAPI `getNotifications` by filtering of type `friendRequest`.
         * @summary Accept Friend Request
         * @param {string} notificationId Must be a valid notification ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptFriendRequest(notificationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptFriendRequest(notificationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Clear **all** notifications.
         * @summary Clear All Notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearNotifications(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearNotifications(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a notification.
         * @summary Delete Notification
         * @param {string} notificationId Must be a valid notification ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNotification(notificationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNotification(notificationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all of the current user\'s notifications.
         * @summary List Notifications
         * @param {string} [type] Only send notifications of this type (can use &#x60;all&#x60; for all). This parameter no longer does anything, and is deprecated.
         * @param {boolean} [sent] Return notifications sent by the user. Must be false or omitted.
         * @param {boolean} [hidden] Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;.
         * @param {string} [after] Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotifications(type?: string, sent?: boolean, hidden?: boolean, after?: string, n?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Notification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotifications(type, sent, hidden, after, n, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mark a notification as seen.
         * @summary Mark Notification As Read
         * @param {string} notificationId Must be a valid notification ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markNotificationAsRead(notificationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markNotificationAsRead(notificationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationsApiFp(configuration)
    return {
        /**
         * Accept a friend request by notification `frq_` ID. Friend requests can be found using the NotificationsAPI `getNotifications` by filtering of type `friendRequest`.
         * @summary Accept Friend Request
         * @param {string} notificationId Must be a valid notification ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptFriendRequest(notificationId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.acceptFriendRequest(notificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Clear **all** notifications.
         * @summary Clear All Notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearNotifications(options?: any): AxiosPromise<Success> {
            return localVarFp.clearNotifications(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a notification.
         * @summary Delete Notification
         * @param {string} notificationId Must be a valid notification ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification(notificationId: string, options?: any): AxiosPromise<Notification> {
            return localVarFp.deleteNotification(notificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all of the current user\'s notifications.
         * @summary List Notifications
         * @param {string} [type] Only send notifications of this type (can use &#x60;all&#x60; for all). This parameter no longer does anything, and is deprecated.
         * @param {boolean} [sent] Return notifications sent by the user. Must be false or omitted.
         * @param {boolean} [hidden] Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;.
         * @param {string} [after] Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotifications(type?: string, sent?: boolean, hidden?: boolean, after?: string, n?: number, offset?: number, options?: any): AxiosPromise<Array<Notification>> {
            return localVarFp.getNotifications(type, sent, hidden, after, n, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark a notification as seen.
         * @summary Mark Notification As Read
         * @param {string} notificationId Must be a valid notification ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markNotificationAsRead(notificationId: string, options?: any): AxiosPromise<Notification> {
            return localVarFp.markNotificationAsRead(notificationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * Accept a friend request by notification `frq_` ID. Friend requests can be found using the NotificationsAPI `getNotifications` by filtering of type `friendRequest`.
     * @summary Accept Friend Request
     * @param {string} notificationId Must be a valid notification ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public acceptFriendRequest(notificationId: string, options?: AxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).acceptFriendRequest(notificationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clear **all** notifications.
     * @summary Clear All Notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public clearNotifications(options?: AxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).clearNotifications(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a notification.
     * @summary Delete Notification
     * @param {string} notificationId Must be a valid notification ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public deleteNotification(notificationId: string, options?: AxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).deleteNotification(notificationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all of the current user\'s notifications.
     * @summary List Notifications
     * @param {string} [type] Only send notifications of this type (can use &#x60;all&#x60; for all). This parameter no longer does anything, and is deprecated.
     * @param {boolean} [sent] Return notifications sent by the user. Must be false or omitted.
     * @param {boolean} [hidden] Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;.
     * @param {string} [after] Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;.
     * @param {number} [n] The number of objects to return.
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public getNotifications(type?: string, sent?: boolean, hidden?: boolean, after?: string, n?: number, offset?: number, options?: AxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).getNotifications(type, sent, hidden, after, n, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark a notification as seen.
     * @summary Mark Notification As Read
     * @param {string} notificationId Must be a valid notification ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public markNotificationAsRead(notificationId: string, options?: AxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).markNotificationAsRead(notificationId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export const PermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.
         * @summary Get Assigned Permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignedPermissions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as `/auth/permissions`.
         * @summary Get Permission
         * @param {string} permissionId Must be a valid permission ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermission: async (permissionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionId' is not null or undefined
            assertParamExists('getPermission', 'permissionId', permissionId)
            const localVarPath = `/permissions/{permissionId}`
                .replace(`{${"permissionId"}}`, encodeURIComponent(String(permissionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionsApi - functional programming interface
 * @export
 */
export const PermissionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.
         * @summary Get Assigned Permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignedPermissions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Permission>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignedPermissions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as `/auth/permissions`.
         * @summary Get Permission
         * @param {string} permissionId Must be a valid permission ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermission(permissionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermission(permissionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermissionsApi - factory interface
 * @export
 */
export const PermissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionsApiFp(configuration)
    return {
        /**
         * Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.
         * @summary Get Assigned Permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignedPermissions(options?: any): AxiosPromise<Array<Permission>> {
            return localVarFp.getAssignedPermissions(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as `/auth/permissions`.
         * @summary Get Permission
         * @param {string} permissionId Must be a valid permission ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermission(permissionId: string, options?: any): AxiosPromise<Permission> {
            return localVarFp.getPermission(permissionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export class PermissionsApi extends BaseAPI {
    /**
     * Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.
     * @summary Get Assigned Permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public getAssignedPermissions(options?: AxiosRequestConfig) {
        return PermissionsApiFp(this.configuration).getAssignedPermissions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as `/auth/permissions`.
     * @summary Get Permission
     * @param {string} permissionId Must be a valid permission ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public getPermission(permissionId: string, options?: AxiosRequestConfig) {
        return PermissionsApiFp(this.configuration).getPermission(permissionId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlayermoderationApi - axios parameter creator
 * @export
 */
export const PlayermoderationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ⚠️ **This will delete every single player moderation you\'ve ever made.**
         * @summary Clear All Player Moderations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearAllPlayerModerations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/playermoderations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a specific player moderation based on it\'s `pmod_` ID. The website uses `unmoderateUser` instead. You can delete the same player moderation multiple times successfully.
         * @summary Delete Player Moderation
         * @param {string} playerModerationId Must be a valid &#x60;pmod_&#x60; ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayerModeration: async (playerModerationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerModerationId' is not null or undefined
            assertParamExists('deletePlayerModeration', 'playerModerationId', playerModerationId)
            const localVarPath = `/auth/user/playermoderations/{playerModerationId}`
                .replace(`{${"playerModerationId"}}`, encodeURIComponent(String(playerModerationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single Player Moderation. This returns the exact same amount of information as the more generalised `getPlayerModerations`.
         * @summary Get Player Moderation
         * @param {string} playerModerationId Must be a valid &#x60;pmod_&#x60; ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerModeration: async (playerModerationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerModerationId' is not null or undefined
            assertParamExists('getPlayerModeration', 'playerModerationId', playerModerationId)
            const localVarPath = `/auth/user/playermoderations/{playerModerationId}`
                .replace(`{${"playerModerationId"}}`, encodeURIComponent(String(playerModerationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
         * @summary Search Player Moderations
         * @param {string} [type] Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block.
         * @param {string} [targetUserId] Must be valid UserID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerModerations: async (type?: string, targetUserId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/playermoderations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (targetUserId !== undefined) {
                localVarQueryParameter['targetUserId'] = targetUserId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Moderate a user, e.g. unmute them or show their avatar.  Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag--playermoderation) on what playerModerations are, and how they differ from staff moderations.
         * @summary Moderate User
         * @param {ModerateUserRequest} [moderateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moderateUser: async (moderateUserRequest?: ModerateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/playermoderations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moderateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a player moderation previously added through `moderateUser`. E.g if you previously have shown their avatar, but now want to reset it to default.
         * @summary Unmoderate User
         * @param {ModerateUserRequest} [moderateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmoderateUser: async (moderateUserRequest?: ModerateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/unplayermoderate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moderateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayermoderationApi - functional programming interface
 * @export
 */
export const PlayermoderationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayermoderationApiAxiosParamCreator(configuration)
    return {
        /**
         * ⚠️ **This will delete every single player moderation you\'ve ever made.**
         * @summary Clear All Player Moderations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearAllPlayerModerations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearAllPlayerModerations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a specific player moderation based on it\'s `pmod_` ID. The website uses `unmoderateUser` instead. You can delete the same player moderation multiple times successfully.
         * @summary Delete Player Moderation
         * @param {string} playerModerationId Must be a valid &#x60;pmod_&#x60; ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlayerModeration(playerModerationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlayerModeration(playerModerationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single Player Moderation. This returns the exact same amount of information as the more generalised `getPlayerModerations`.
         * @summary Get Player Moderation
         * @param {string} playerModerationId Must be a valid &#x60;pmod_&#x60; ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerModeration(playerModerationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerModeration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerModeration(playerModerationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
         * @summary Search Player Moderations
         * @param {string} [type] Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block.
         * @param {string} [targetUserId] Must be valid UserID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerModerations(type?: string, targetUserId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayerModeration>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerModerations(type, targetUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Moderate a user, e.g. unmute them or show their avatar.  Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag--playermoderation) on what playerModerations are, and how they differ from staff moderations.
         * @summary Moderate User
         * @param {ModerateUserRequest} [moderateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moderateUser(moderateUserRequest?: ModerateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerModeration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moderateUser(moderateUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a player moderation previously added through `moderateUser`. E.g if you previously have shown their avatar, but now want to reset it to default.
         * @summary Unmoderate User
         * @param {ModerateUserRequest} [moderateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unmoderateUser(moderateUserRequest?: ModerateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unmoderateUser(moderateUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlayermoderationApi - factory interface
 * @export
 */
export const PlayermoderationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayermoderationApiFp(configuration)
    return {
        /**
         * ⚠️ **This will delete every single player moderation you\'ve ever made.**
         * @summary Clear All Player Moderations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearAllPlayerModerations(options?: any): AxiosPromise<Success> {
            return localVarFp.clearAllPlayerModerations(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a specific player moderation based on it\'s `pmod_` ID. The website uses `unmoderateUser` instead. You can delete the same player moderation multiple times successfully.
         * @summary Delete Player Moderation
         * @param {string} playerModerationId Must be a valid &#x60;pmod_&#x60; ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayerModeration(playerModerationId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.deletePlayerModeration(playerModerationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single Player Moderation. This returns the exact same amount of information as the more generalised `getPlayerModerations`.
         * @summary Get Player Moderation
         * @param {string} playerModerationId Must be a valid &#x60;pmod_&#x60; ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerModeration(playerModerationId: string, options?: any): AxiosPromise<PlayerModeration> {
            return localVarFp.getPlayerModeration(playerModerationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
         * @summary Search Player Moderations
         * @param {string} [type] Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block.
         * @param {string} [targetUserId] Must be valid UserID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerModerations(type?: string, targetUserId?: string, options?: any): AxiosPromise<Array<PlayerModeration>> {
            return localVarFp.getPlayerModerations(type, targetUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * Moderate a user, e.g. unmute them or show their avatar.  Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag--playermoderation) on what playerModerations are, and how they differ from staff moderations.
         * @summary Moderate User
         * @param {ModerateUserRequest} [moderateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moderateUser(moderateUserRequest?: ModerateUserRequest, options?: any): AxiosPromise<PlayerModeration> {
            return localVarFp.moderateUser(moderateUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a player moderation previously added through `moderateUser`. E.g if you previously have shown their avatar, but now want to reset it to default.
         * @summary Unmoderate User
         * @param {ModerateUserRequest} [moderateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmoderateUser(moderateUserRequest?: ModerateUserRequest, options?: any): AxiosPromise<Success> {
            return localVarFp.unmoderateUser(moderateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlayermoderationApi - object-oriented interface
 * @export
 * @class PlayermoderationApi
 * @extends {BaseAPI}
 */
export class PlayermoderationApi extends BaseAPI {
    /**
     * ⚠️ **This will delete every single player moderation you\'ve ever made.**
     * @summary Clear All Player Moderations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayermoderationApi
     */
    public clearAllPlayerModerations(options?: AxiosRequestConfig) {
        return PlayermoderationApiFp(this.configuration).clearAllPlayerModerations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a specific player moderation based on it\'s `pmod_` ID. The website uses `unmoderateUser` instead. You can delete the same player moderation multiple times successfully.
     * @summary Delete Player Moderation
     * @param {string} playerModerationId Must be a valid &#x60;pmod_&#x60; ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayermoderationApi
     */
    public deletePlayerModeration(playerModerationId: string, options?: AxiosRequestConfig) {
        return PlayermoderationApiFp(this.configuration).deletePlayerModeration(playerModerationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single Player Moderation. This returns the exact same amount of information as the more generalised `getPlayerModerations`.
     * @summary Get Player Moderation
     * @param {string} playerModerationId Must be a valid &#x60;pmod_&#x60; ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayermoderationApi
     */
    public getPlayerModeration(playerModerationId: string, options?: AxiosRequestConfig) {
        return PlayermoderationApiFp(this.configuration).getPlayerModeration(playerModerationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all player moderations made by **you**.  This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
     * @summary Search Player Moderations
     * @param {string} [type] Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block.
     * @param {string} [targetUserId] Must be valid UserID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayermoderationApi
     */
    public getPlayerModerations(type?: string, targetUserId?: string, options?: AxiosRequestConfig) {
        return PlayermoderationApiFp(this.configuration).getPlayerModerations(type, targetUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Moderate a user, e.g. unmute them or show their avatar.  Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag--playermoderation) on what playerModerations are, and how they differ from staff moderations.
     * @summary Moderate User
     * @param {ModerateUserRequest} [moderateUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayermoderationApi
     */
    public moderateUser(moderateUserRequest?: ModerateUserRequest, options?: AxiosRequestConfig) {
        return PlayermoderationApiFp(this.configuration).moderateUser(moderateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a player moderation previously added through `moderateUser`. E.g if you previously have shown their avatar, but now want to reset it to default.
     * @summary Unmoderate User
     * @param {ModerateUserRequest} [moderateUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayermoderationApi
     */
    public unmoderateUser(moderateUserRequest?: ModerateUserRequest, options?: AxiosRequestConfig) {
        return PlayermoderationApiFp(this.configuration).unmoderateUser(moderateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches the CSS code to the frontend React website.
         * @summary Download CSS
         * @param {'public' | 'internal'} [variant] Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management.
         * @param {string} [branch] Specifies which git branch the site should load frontend source code from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCSS: async (variant?: 'public' | 'internal', branch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/css/app.css`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variant !== undefined) {
                localVarQueryParameter['variant'] = variant;
            }

            if (branch !== undefined) {
                localVarQueryParameter['branch'] = branch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API config contains configuration that the clients needs to work properly.  Currently the most important value here is `clientApiKey` which is used for all other API endpoints.
         * @summary Fetch API Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
         * @summary Current Online Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentOnlineUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/visits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
         * @summary Check API Health
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getHealth: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  `include` is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \"any of\" search.  `require` is used to limit what Information Pushes should be included in the response. This is usually used in combination with `include`, and is an \"all of\" search.
         * @summary Show Information Notices
         * @param {string} [require] Tags to include (comma-separated). All of the tags needs to be present.
         * @param {string} [include] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfoPush: async (require?: string, include?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/infoPush`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (require !== undefined) {
                localVarQueryParameter['require'] = require;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the JavaScript code to the frontend React website.
         * @summary Download JavaScript
         * @param {'public' | 'internal'} [variant] Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management.
         * @param {string} [branch] Specifies which git branch the site should load frontend source code from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJavaScript: async (variant?: 'public' | 'internal', branch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/js/app.js`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variant !== undefined) {
                localVarQueryParameter['variant'] = variant;
            }

            if (branch !== undefined) {
                localVarQueryParameter['branch'] = branch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
         * @summary Current System Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTime: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches the CSS code to the frontend React website.
         * @summary Download CSS
         * @param {'public' | 'internal'} [variant] Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management.
         * @param {string} [branch] Specifies which git branch the site should load frontend source code from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCSS(variant?: 'public' | 'internal', branch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCSS(variant, branch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API config contains configuration that the clients needs to work properly.  Currently the most important value here is `clientApiKey` which is used for all other API endpoints.
         * @summary Fetch API Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfig(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
         * @summary Current Online Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentOnlineUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentOnlineUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
         * @summary Check API Health
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getHealth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIHealth>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHealth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  `include` is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \"any of\" search.  `require` is used to limit what Information Pushes should be included in the response. This is usually used in combination with `include`, and is an \"all of\" search.
         * @summary Show Information Notices
         * @param {string} [require] Tags to include (comma-separated). All of the tags needs to be present.
         * @param {string} [include] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfoPush(require?: string, include?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InfoPush>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfoPush(require, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the JavaScript code to the frontend React website.
         * @summary Download JavaScript
         * @param {'public' | 'internal'} [variant] Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management.
         * @param {string} [branch] Specifies which git branch the site should load frontend source code from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJavaScript(variant?: 'public' | 'internal', branch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJavaScript(variant, branch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
         * @summary Current System Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemTime(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemTime(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * Fetches the CSS code to the frontend React website.
         * @summary Download CSS
         * @param {'public' | 'internal'} [variant] Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management.
         * @param {string} [branch] Specifies which git branch the site should load frontend source code from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCSS(variant?: 'public' | 'internal', branch?: string, options?: any): AxiosPromise<string> {
            return localVarFp.getCSS(variant, branch, options).then((request) => request(axios, basePath));
        },
        /**
         * API config contains configuration that the clients needs to work properly.  Currently the most important value here is `clientApiKey` which is used for all other API endpoints.
         * @summary Fetch API Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(options?: any): AxiosPromise<APIConfig> {
            return localVarFp.getConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
         * @summary Current Online Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentOnlineUsers(options?: any): AxiosPromise<number> {
            return localVarFp.getCurrentOnlineUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
         * @summary Check API Health
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getHealth(options?: any): AxiosPromise<APIHealth> {
            return localVarFp.getHealth(options).then((request) => request(axios, basePath));
        },
        /**
         * IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  `include` is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \"any of\" search.  `require` is used to limit what Information Pushes should be included in the response. This is usually used in combination with `include`, and is an \"all of\" search.
         * @summary Show Information Notices
         * @param {string} [require] Tags to include (comma-separated). All of the tags needs to be present.
         * @param {string} [include] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfoPush(require?: string, include?: string, options?: any): AxiosPromise<Array<InfoPush>> {
            return localVarFp.getInfoPush(require, include, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the JavaScript code to the frontend React website.
         * @summary Download JavaScript
         * @param {'public' | 'internal'} [variant] Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management.
         * @param {string} [branch] Specifies which git branch the site should load frontend source code from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJavaScript(variant?: 'public' | 'internal', branch?: string, options?: any): AxiosPromise<string> {
            return localVarFp.getJavaScript(variant, branch, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
         * @summary Current System Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTime(options?: any): AxiosPromise<string> {
            return localVarFp.getSystemTime(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * Fetches the CSS code to the frontend React website.
     * @summary Download CSS
     * @param {'public' | 'internal'} [variant] Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management.
     * @param {string} [branch] Specifies which git branch the site should load frontend source code from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getCSS(variant?: 'public' | 'internal', branch?: string, options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).getCSS(variant, branch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API config contains configuration that the clients needs to work properly.  Currently the most important value here is `clientApiKey` which is used for all other API endpoints.
     * @summary Fetch API Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getConfig(options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).getConfig(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the current number of online users.  **NOTE:** The response type is not a JSON object, but a simple JSON integer.
     * @summary Current Online Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getCurrentOnlineUsers(options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).getCurrentOnlineUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ~~Gets the overall health status, the server name, and the current build version tag of the API.~~  **DEPRECATED:** VRChat has suddenly restricted this endpoint for unknown reasons, and now always return 401 Unauthorized.
     * @summary Check API Health
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getHealth(options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).getHealth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.  `include` is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an \"any of\" search.  `require` is used to limit what Information Pushes should be included in the response. This is usually used in combination with `include`, and is an \"all of\" search.
     * @summary Show Information Notices
     * @param {string} [require] Tags to include (comma-separated). All of the tags needs to be present.
     * @param {string} [include] Tags to include (comma-separated). Any of the tags needs to be present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getInfoPush(require?: string, include?: string, options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).getInfoPush(require, include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the JavaScript code to the frontend React website.
     * @summary Download JavaScript
     * @param {'public' | 'internal'} [variant] Specifies which &#x60;variant&#x60; of the site. Public is the end-user site, while &#x60;internal&#x60; is the staff-only site with special pages for moderation and management.
     * @param {string} [branch] Specifies which git branch the site should load frontend source code from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getJavaScript(variant?: 'public' | 'internal', branch?: string, options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).getJavaScript(variant, branch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the current time of the API server.  **NOTE:** The response type is not a JSON object, but a simple JSON string.
     * @summary Current System Time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getSystemTime(options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).getSystemTime(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get public user information about a specific user using their ID.
         * @summary Get User by ID
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ~~Get public user information about a specific user using their name.~~  **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429). This endpoint now require Admin Credentials.
         * @summary Get User by Username
         * @param {string} username Username of the user
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserByName: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserByName', 'username', username)
            const localVarPath = `/users/{username}/name`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Groups the user has requested to be invited into.
         * @summary Get User Group Requests
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroupRequests: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserGroupRequests', 'userId', userId)
            const localVarPath = `/users/{userId}/groups/requested`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s public groups
         * @summary Get User Groups
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroups: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserGroups', 'userId', userId)
            const localVarPath = `/users/{userId}/groups`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search and list any users by text query
         * @summary Search All Users
         * @param {string} [search] Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing.
         * @param {string} [developerType] Active user by developer type, none for normal users and internal for moderators
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsers: async (search?: string, developerType?: string, n?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (developerType !== undefined) {
                localVarQueryParameter['developerType'] = developerType;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a users information such as the email and birthday.
         * @summary Update User Info
         * @param {string} userId Must be a valid user ID.
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, updateUserRequest?: UpdateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get public user information about a specific user using their ID.
         * @summary Get User by ID
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ~~Get public user information about a specific user using their name.~~  **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429). This endpoint now require Admin Credentials.
         * @summary Get User by Username
         * @param {string} username Username of the user
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getUserByName(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByName(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Groups the user has requested to be invited into.
         * @summary Get User Group Requests
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserGroupRequests(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGroupRequests(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user\'s public groups
         * @summary Get User Groups
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserGroups(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGroups(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search and list any users by text query
         * @summary Search All Users
         * @param {string} [search] Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing.
         * @param {string} [developerType] Active user by developer type, none for normal users and internal for moderators
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUsers(search?: string, developerType?: string, n?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LimitedUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUsers(search, developerType, n, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a users information such as the email and birthday.
         * @summary Update User Info
         * @param {string} userId Must be a valid user ID.
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, updateUserRequest?: UpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, updateUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Get public user information about a specific user using their ID.
         * @summary Get User by ID
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * ~~Get public user information about a specific user using their name.~~  **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429). This endpoint now require Admin Credentials.
         * @summary Get User by Username
         * @param {string} username Username of the user
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserByName(username: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUserByName(username, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Groups the user has requested to be invited into.
         * @summary Get User Group Requests
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroupRequests(userId: string, options?: any): AxiosPromise<Array<Group>> {
            return localVarFp.getUserGroupRequests(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s public groups
         * @summary Get User Groups
         * @param {string} userId Must be a valid user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroups(userId: string, options?: any): AxiosPromise<Array<Group>> {
            return localVarFp.getUserGroups(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Search and list any users by text query
         * @summary Search All Users
         * @param {string} [search] Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing.
         * @param {string} [developerType] Active user by developer type, none for normal users and internal for moderators
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsers(search?: string, developerType?: string, n?: number, offset?: number, options?: any): AxiosPromise<Array<LimitedUser>> {
            return localVarFp.searchUsers(search, developerType, n, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a users information such as the email and birthday.
         * @summary Update User Info
         * @param {string} userId Must be a valid user ID.
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: string, updateUserRequest?: UpdateUserRequest, options?: any): AxiosPromise<CurrentUser> {
            return localVarFp.updateUser(userId, updateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Get public user information about a specific user using their ID.
     * @summary Get User by ID
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(userId: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ~~Get public user information about a specific user using their name.~~  **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429). This endpoint now require Admin Credentials.
     * @summary Get User by Username
     * @param {string} username Username of the user
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserByName(username: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserByName(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Groups the user has requested to be invited into.
     * @summary Get User Group Requests
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserGroupRequests(userId: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserGroupRequests(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s public groups
     * @summary Get User Groups
     * @param {string} userId Must be a valid user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserGroups(userId: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserGroups(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search and list any users by text query
     * @summary Search All Users
     * @param {string} [search] Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing.
     * @param {string} [developerType] Active user by developer type, none for normal users and internal for moderators
     * @param {number} [n] The number of objects to return.
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public searchUsers(search?: string, developerType?: string, n?: number, offset?: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).searchUsers(search, developerType, n, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a users information such as the email and birthday.
     * @summary Update User Info
     * @param {string} userId Must be a valid user ID.
     * @param {UpdateUserRequest} [updateUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(userId: string, updateUserRequest?: UpdateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(userId, updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WorldsApi - axios parameter creator
 * @export
 */
export const WorldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new world. This endpoint requires `assetUrl` to be a valid File object with `.vrcw` file extension, and `imageUrl` to be a valid File object with an image file extension.
         * @summary Create World
         * @param {CreateWorldRequest} [createWorldRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorld: async (createWorldRequest?: CreateWorldRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/worlds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorldRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a world. Notice a world is never fully \"deleted\", only its ReleaseStatus is set to \"hidden\" and the linked Files are deleted. The WorldID is permanently reserved.
         * @summary Delete World
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorld: async (worldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worldId' is not null or undefined
            assertParamExists('deleteWorld', 'worldId', worldId)
            const localVarPath = `/worlds/{worldId}`
                .replace(`{${"worldId"}}`, encodeURIComponent(String(worldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search and list currently Active worlds by query filters.
         * @summary List Active Worlds
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveWorlds: async (featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/worlds/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (featured !== undefined) {
                localVarQueryParameter['featured'] = featured;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (notag !== undefined) {
                localVarQueryParameter['notag'] = notag;
            }

            if (releaseStatus !== undefined) {
                localVarQueryParameter['releaseStatus'] = releaseStatus;
            }

            if (maxUnityVersion !== undefined) {
                localVarQueryParameter['maxUnityVersion'] = maxUnityVersion;
            }

            if (minUnityVersion !== undefined) {
                localVarQueryParameter['minUnityVersion'] = minUnityVersion;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search and list favorited worlds by query filters.
         * @summary List Favorited Worlds
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {string} [userId] Target user to see information on, admin-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavoritedWorlds: async (featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/worlds/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (featured !== undefined) {
                localVarQueryParameter['featured'] = featured;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (notag !== undefined) {
                localVarQueryParameter['notag'] = notag;
            }

            if (releaseStatus !== undefined) {
                localVarQueryParameter['releaseStatus'] = releaseStatus;
            }

            if (maxUnityVersion !== undefined) {
                localVarQueryParameter['maxUnityVersion'] = maxUnityVersion;
            }

            if (minUnityVersion !== undefined) {
                localVarQueryParameter['minUnityVersion'] = minUnityVersion;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search and list recently visited worlds by query filters.
         * @summary List Recent Worlds
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {string} [userId] Target user to see information on, admin-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentWorlds: async (featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, userId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/worlds/recent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (featured !== undefined) {
                localVarQueryParameter['featured'] = featured;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (notag !== undefined) {
                localVarQueryParameter['notag'] = notag;
            }

            if (releaseStatus !== undefined) {
                localVarQueryParameter['releaseStatus'] = releaseStatus;
            }

            if (maxUnityVersion !== undefined) {
                localVarQueryParameter['maxUnityVersion'] = maxUnityVersion;
            }

            if (minUnityVersion !== undefined) {
                localVarQueryParameter['minUnityVersion'] = minUnityVersion;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific World. Works unauthenticated but when so will always return `0` for certain fields.
         * @summary Get World by ID
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorld: async (worldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worldId' is not null or undefined
            assertParamExists('getWorld', 'worldId', worldId)
            const localVarPath = `/worlds/{worldId}`
                .replace(`{${"worldId"}}`, encodeURIComponent(String(worldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a worlds instance.
         * @summary Get World Instance
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorldInstance: async (worldId: string, instanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worldId' is not null or undefined
            assertParamExists('getWorldInstance', 'worldId', worldId)
            // verify required parameter 'instanceId' is not null or undefined
            assertParamExists('getWorldInstance', 'instanceId', instanceId)
            const localVarPath = `/worlds/{worldId}/{instanceId}`
                .replace(`{${"worldId"}}`, encodeURIComponent(String(worldId)))
                .replace(`{${"instanceId"}}`, encodeURIComponent(String(instanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with `updateWorld` and can be any arbitrary object.
         * @summary Get World Metadata
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getWorldMetadata: async (worldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worldId' is not null or undefined
            assertParamExists('getWorldMetadata', 'worldId', worldId)
            const localVarPath = `/worlds/{worldId}/metadata`
                .replace(`{${"worldId"}}`, encodeURIComponent(String(worldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a worlds publish status.
         * @summary Get World Publish Status
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorldPublishStatus: async (worldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worldId' is not null or undefined
            assertParamExists('getWorldPublishStatus', 'worldId', worldId)
            const localVarPath = `/worlds/{worldId}/publish`
                .replace(`{${"worldId"}}`, encodeURIComponent(String(worldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish a world. You can only publish one world per week.
         * @summary Publish World
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishWorld: async (worldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worldId' is not null or undefined
            assertParamExists('publishWorld', 'worldId', worldId)
            const localVarPath = `/worlds/{worldId}/publish`
                .replace(`{${"worldId"}}`, encodeURIComponent(String(worldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search and list any worlds by query filters.
         * @summary Search All Worlds
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {'me'} [user] Set to &#x60;me&#x60; for searching own worlds.
         * @param {string} [userId] Filter by UserID.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchWorlds: async (featured?: boolean, sort?: SortOption, user?: 'me', userId?: string, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/worlds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            if (featured !== undefined) {
                localVarQueryParameter['featured'] = featured;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (notag !== undefined) {
                localVarQueryParameter['notag'] = notag;
            }

            if (releaseStatus !== undefined) {
                localVarQueryParameter['releaseStatus'] = releaseStatus;
            }

            if (maxUnityVersion !== undefined) {
                localVarQueryParameter['maxUnityVersion'] = maxUnityVersion;
            }

            if (minUnityVersion !== undefined) {
                localVarQueryParameter['minUnityVersion'] = minUnityVersion;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unpublish a world.
         * @summary Unpublish World
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishWorld: async (worldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worldId' is not null or undefined
            assertParamExists('unpublishWorld', 'worldId', worldId)
            const localVarPath = `/worlds/{worldId}/publish`
                .replace(`{${"worldId"}}`, encodeURIComponent(String(worldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update information about a specific World.
         * @summary Update World
         * @param {string} worldId Must be a valid world ID.
         * @param {UpdateWorldRequest} [updateWorldRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorld: async (worldId: string, updateWorldRequest?: UpdateWorldRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worldId' is not null or undefined
            assertParamExists('updateWorld', 'worldId', worldId)
            const localVarPath = `/worlds/{worldId}`
                .replace(`{${"worldId"}}`, encodeURIComponent(String(worldId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWorldRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorldsApi - functional programming interface
 * @export
 */
export const WorldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorldsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new world. This endpoint requires `assetUrl` to be a valid File object with `.vrcw` file extension, and `imageUrl` to be a valid File object with an image file extension.
         * @summary Create World
         * @param {CreateWorldRequest} [createWorldRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorld(createWorldRequest?: CreateWorldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<World>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorld(createWorldRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a world. Notice a world is never fully \"deleted\", only its ReleaseStatus is set to \"hidden\" and the linked Files are deleted. The WorldID is permanently reserved.
         * @summary Delete World
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorld(worldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorld(worldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search and list currently Active worlds by query filters.
         * @summary List Active Worlds
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveWorlds(featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LimitedWorld>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveWorlds(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search and list favorited worlds by query filters.
         * @summary List Favorited Worlds
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {string} [userId] Target user to see information on, admin-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFavoritedWorlds(featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LimitedWorld>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFavoritedWorlds(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search and list recently visited worlds by query filters.
         * @summary List Recent Worlds
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {string} [userId] Target user to see information on, admin-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecentWorlds(featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, userId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LimitedWorld>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecentWorlds(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a specific World. Works unauthenticated but when so will always return `0` for certain fields.
         * @summary Get World by ID
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorld(worldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<World>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorld(worldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a worlds instance.
         * @summary Get World Instance
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorldInstance(worldId: string, instanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Instance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorldInstance(worldId, instanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with `updateWorld` and can be any arbitrary object.
         * @summary Get World Metadata
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getWorldMetadata(worldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorldMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorldMetadata(worldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a worlds publish status.
         * @summary Get World Publish Status
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorldPublishStatus(worldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorldPublishStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorldPublishStatus(worldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publish a world. You can only publish one world per week.
         * @summary Publish World
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishWorld(worldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishWorld(worldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search and list any worlds by query filters.
         * @summary Search All Worlds
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {'me'} [user] Set to &#x60;me&#x60; for searching own worlds.
         * @param {string} [userId] Filter by UserID.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchWorlds(featured?: boolean, sort?: SortOption, user?: 'me', userId?: string, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LimitedWorld>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchWorlds(featured, sort, user, userId, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unpublish a world.
         * @summary Unpublish World
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpublishWorld(worldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unpublishWorld(worldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update information about a specific World.
         * @summary Update World
         * @param {string} worldId Must be a valid world ID.
         * @param {UpdateWorldRequest} [updateWorldRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorld(worldId: string, updateWorldRequest?: UpdateWorldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<World>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorld(worldId, updateWorldRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorldsApi - factory interface
 * @export
 */
export const WorldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorldsApiFp(configuration)
    return {
        /**
         * Create a new world. This endpoint requires `assetUrl` to be a valid File object with `.vrcw` file extension, and `imageUrl` to be a valid File object with an image file extension.
         * @summary Create World
         * @param {CreateWorldRequest} [createWorldRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorld(createWorldRequest?: CreateWorldRequest, options?: any): AxiosPromise<World> {
            return localVarFp.createWorld(createWorldRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a world. Notice a world is never fully \"deleted\", only its ReleaseStatus is set to \"hidden\" and the linked Files are deleted. The WorldID is permanently reserved.
         * @summary Delete World
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorld(worldId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteWorld(worldId, options).then((request) => request(axios, basePath));
        },
        /**
         * Search and list currently Active worlds by query filters.
         * @summary List Active Worlds
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveWorlds(featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, options?: any): AxiosPromise<Array<LimitedWorld>> {
            return localVarFp.getActiveWorlds(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, options).then((request) => request(axios, basePath));
        },
        /**
         * Search and list favorited worlds by query filters.
         * @summary List Favorited Worlds
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {string} [userId] Target user to see information on, admin-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavoritedWorlds(featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, userId?: string, options?: any): AxiosPromise<Array<LimitedWorld>> {
            return localVarFp.getFavoritedWorlds(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Search and list recently visited worlds by query filters.
         * @summary List Recent Worlds
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {string} [userId] Target user to see information on, admin-only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentWorlds(featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, userId?: string, options?: any): AxiosPromise<Array<LimitedWorld>> {
            return localVarFp.getRecentWorlds(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific World. Works unauthenticated but when so will always return `0` for certain fields.
         * @summary Get World by ID
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorld(worldId: string, options?: any): AxiosPromise<World> {
            return localVarFp.getWorld(worldId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a worlds instance.
         * @summary Get World Instance
         * @param {string} worldId Must be a valid world ID.
         * @param {string} instanceId Must be a valid instance ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorldInstance(worldId: string, instanceId: string, options?: any): AxiosPromise<Instance> {
            return localVarFp.getWorldInstance(worldId, instanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with `updateWorld` and can be any arbitrary object.
         * @summary Get World Metadata
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getWorldMetadata(worldId: string, options?: any): AxiosPromise<WorldMetadata> {
            return localVarFp.getWorldMetadata(worldId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a worlds publish status.
         * @summary Get World Publish Status
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorldPublishStatus(worldId: string, options?: any): AxiosPromise<WorldPublishStatus> {
            return localVarFp.getWorldPublishStatus(worldId, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish a world. You can only publish one world per week.
         * @summary Publish World
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishWorld(worldId: string, options?: any): AxiosPromise<void> {
            return localVarFp.publishWorld(worldId, options).then((request) => request(axios, basePath));
        },
        /**
         * Search and list any worlds by query filters.
         * @summary Search All Worlds
         * @param {boolean} [featured] Filters on featured results.
         * @param {SortOption} [sort] The sort order of the results.
         * @param {'me'} [user] Set to &#x60;me&#x60; for searching own worlds.
         * @param {string} [userId] Filter by UserID.
         * @param {number} [n] The number of objects to return.
         * @param {OrderOption} [order] Result ordering
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {string} [search] Filters by world name.
         * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
         * @param {string} [notag] Tags to exclude (comma-separated).
         * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
         * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
         * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
         * @param {string} [platform] The platform the asset supports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchWorlds(featured?: boolean, sort?: SortOption, user?: 'me', userId?: string, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, options?: any): AxiosPromise<Array<LimitedWorld>> {
            return localVarFp.searchWorlds(featured, sort, user, userId, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, options).then((request) => request(axios, basePath));
        },
        /**
         * Unpublish a world.
         * @summary Unpublish World
         * @param {string} worldId Must be a valid world ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishWorld(worldId: string, options?: any): AxiosPromise<void> {
            return localVarFp.unpublishWorld(worldId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update information about a specific World.
         * @summary Update World
         * @param {string} worldId Must be a valid world ID.
         * @param {UpdateWorldRequest} [updateWorldRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorld(worldId: string, updateWorldRequest?: UpdateWorldRequest, options?: any): AxiosPromise<World> {
            return localVarFp.updateWorld(worldId, updateWorldRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorldsApi - object-oriented interface
 * @export
 * @class WorldsApi
 * @extends {BaseAPI}
 */
export class WorldsApi extends BaseAPI {
    /**
     * Create a new world. This endpoint requires `assetUrl` to be a valid File object with `.vrcw` file extension, and `imageUrl` to be a valid File object with an image file extension.
     * @summary Create World
     * @param {CreateWorldRequest} [createWorldRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public createWorld(createWorldRequest?: CreateWorldRequest, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).createWorld(createWorldRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a world. Notice a world is never fully \"deleted\", only its ReleaseStatus is set to \"hidden\" and the linked Files are deleted. The WorldID is permanently reserved.
     * @summary Delete World
     * @param {string} worldId Must be a valid world ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public deleteWorld(worldId: string, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).deleteWorld(worldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search and list currently Active worlds by query filters.
     * @summary List Active Worlds
     * @param {boolean} [featured] Filters on featured results.
     * @param {SortOption} [sort] The sort order of the results.
     * @param {number} [n] The number of objects to return.
     * @param {OrderOption} [order] Result ordering
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {string} [search] Filters by world name.
     * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
     * @param {string} [notag] Tags to exclude (comma-separated).
     * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
     * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
     * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
     * @param {string} [platform] The platform the asset supports.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public getActiveWorlds(featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).getActiveWorlds(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search and list favorited worlds by query filters.
     * @summary List Favorited Worlds
     * @param {boolean} [featured] Filters on featured results.
     * @param {SortOption} [sort] The sort order of the results.
     * @param {number} [n] The number of objects to return.
     * @param {OrderOption} [order] Result ordering
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {string} [search] Filters by world name.
     * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
     * @param {string} [notag] Tags to exclude (comma-separated).
     * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
     * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
     * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
     * @param {string} [platform] The platform the asset supports.
     * @param {string} [userId] Target user to see information on, admin-only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public getFavoritedWorlds(featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, userId?: string, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).getFavoritedWorlds(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search and list recently visited worlds by query filters.
     * @summary List Recent Worlds
     * @param {boolean} [featured] Filters on featured results.
     * @param {SortOption} [sort] The sort order of the results.
     * @param {number} [n] The number of objects to return.
     * @param {OrderOption} [order] Result ordering
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {string} [search] Filters by world name.
     * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
     * @param {string} [notag] Tags to exclude (comma-separated).
     * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
     * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
     * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
     * @param {string} [platform] The platform the asset supports.
     * @param {string} [userId] Target user to see information on, admin-only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public getRecentWorlds(featured?: boolean, sort?: SortOption, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, userId?: string, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).getRecentWorlds(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a specific World. Works unauthenticated but when so will always return `0` for certain fields.
     * @summary Get World by ID
     * @param {string} worldId Must be a valid world ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public getWorld(worldId: string, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).getWorld(worldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a worlds instance.
     * @summary Get World Instance
     * @param {string} worldId Must be a valid world ID.
     * @param {string} instanceId Must be a valid instance ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public getWorldInstance(worldId: string, instanceId: string, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).getWorldInstance(worldId, instanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with `updateWorld` and can be any arbitrary object.
     * @summary Get World Metadata
     * @param {string} worldId Must be a valid world ID.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public getWorldMetadata(worldId: string, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).getWorldMetadata(worldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a worlds publish status.
     * @summary Get World Publish Status
     * @param {string} worldId Must be a valid world ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public getWorldPublishStatus(worldId: string, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).getWorldPublishStatus(worldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish a world. You can only publish one world per week.
     * @summary Publish World
     * @param {string} worldId Must be a valid world ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public publishWorld(worldId: string, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).publishWorld(worldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search and list any worlds by query filters.
     * @summary Search All Worlds
     * @param {boolean} [featured] Filters on featured results.
     * @param {SortOption} [sort] The sort order of the results.
     * @param {'me'} [user] Set to &#x60;me&#x60; for searching own worlds.
     * @param {string} [userId] Filter by UserID.
     * @param {number} [n] The number of objects to return.
     * @param {OrderOption} [order] Result ordering
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {string} [search] Filters by world name.
     * @param {string} [tag] Tags to include (comma-separated). Any of the tags needs to be present.
     * @param {string} [notag] Tags to exclude (comma-separated).
     * @param {ReleaseStatus} [releaseStatus] Filter by ReleaseStatus.
     * @param {string} [maxUnityVersion] The maximum Unity version supported by the asset.
     * @param {string} [minUnityVersion] The minimum Unity version supported by the asset.
     * @param {string} [platform] The platform the asset supports.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public searchWorlds(featured?: boolean, sort?: SortOption, user?: 'me', userId?: string, n?: number, order?: OrderOption, offset?: number, search?: string, tag?: string, notag?: string, releaseStatus?: ReleaseStatus, maxUnityVersion?: string, minUnityVersion?: string, platform?: string, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).searchWorlds(featured, sort, user, userId, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unpublish a world.
     * @summary Unpublish World
     * @param {string} worldId Must be a valid world ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public unpublishWorld(worldId: string, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).unpublishWorld(worldId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update information about a specific World.
     * @summary Update World
     * @param {string} worldId Must be a valid world ID.
     * @param {UpdateWorldRequest} [updateWorldRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorldsApi
     */
    public updateWorld(worldId: string, updateWorldRequest?: UpdateWorldRequest, options?: AxiosRequestConfig) {
        return WorldsApiFp(this.configuration).updateWorld(worldId, updateWorldRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


